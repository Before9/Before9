<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>I hope you&#39;re here for me</title>
  
  <subtitle>贩卖日落</subtitle>
  <link href="http://www.hr915.xyz/atom.xml" rel="self"/>
  
  <link href="http://www.hr915.xyz/"/>
  <updated>2021-02-06T08:57:38.355Z</updated>
  <id>http://www.hr915.xyz/</id>
  
  <author>
    <name>小刘同学</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker操作 容器、镜像 &amp;&amp; dockerfile</title>
    <link href="http://www.hr915.xyz/2018/07/25/docker%E6%93%8D%E4%BD%9C%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F&amp;&amp;dockerfile/"/>
    <id>http://www.hr915.xyz/2018/07/25/docker%E6%93%8D%E4%BD%9C%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F&amp;&amp;dockerfile/</id>
    <published>2018-07-25T12:46:25.000Z</published>
    <updated>2021-02-06T08:57:38.355Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。<br>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p><a id="more"></a>        <h3 id="Docker-的优点">          <a href="#Docker-的优点" class="heading-link"><i class="fas fa-link"></i></a><a href="#Docker-的优点" class="headerlink" title="Docker 的优点"></a>Docker 的优点</h3>      <ul><li>  快速部署：短时间内可以部署成百上千个应用，更快速交付到线上</li><li>  高效虚拟化：不需要额外hypervisor支持，基于linux内核实现应用虚拟化，相比虚拟机大幅提高性能和效率</li><li>  节省开支：提高服务器利用率，降低IT支出</li><li>  简化配置：将运行环境打包保存至容器，使用时直接启动即可</li><li>  环境统一：将开发，测试，生产的应用运行环境进行标准化和统一，减少环境不一样带来的各种问题</li><li>  快速迁移和扩展：可实现跨平台运行在物理机、虚拟机、公有云等环境，良好的兼容性可以方便将应用从A宿主机迁移到B宿主机，甚至是A平台迁移到B平台</li></ul>        <h3 id="Docker-包括三个基本概念">          <a href="#Docker-包括三个基本概念" class="heading-link"><i class="fas fa-link"></i></a><a href="#Docker-包括三个基本概念" class="headerlink" title="Docker 包括三个基本概念:"></a>Docker 包括三个基本概念:</h3>      <ul><li>镜像（Image）：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</li><li>容器（Container）：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</li><li>仓库（Repository）：仓库可看成一个代码控制中心，用来保存镜像。<br>Docker 使用客户端-服务器 (C/S) 架构模式，使用远程API来管理和创建Docker容器。<br>Docker 容器通过 Docker 镜像来创建。<br>容器与镜像的关系类似于面向对象编程中的对象(容器)与类(镜像)。</li></ul>        <h3 id="Docker安装">          <a href="#Docker安装" class="heading-link"><i class="fas fa-link"></i></a><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h3>              <h4 id="安装Docker-CentOS">          <a href="#安装Docker-CentOS" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装Docker-CentOS" class="headerlink" title="安装Docker - CentOS"></a>安装Docker - CentOS</h4>      <ul><li>Docker 软件包和依赖包已经包含在默认的 CentOS-Extras 软件源里，安装命令如下：<figure class="highlight shell"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker</span><br></pre></td></tr></tbody></table></div></figure><img src="/2018/07/25/docker%E6%93%8D%E4%BD%9C%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F&amp;&amp;dockerfile/01.png" alt="安装"></li><li>安装成功<br><img src="/2018/07/25/docker%E6%93%8D%E4%BD%9C%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F&amp;&amp;dockerfile/02.png" alt="安装成功"></li><li>启动Docker后台服务<figure class="highlight shell"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker start</span><br></pre></td></tr></tbody></table></div></figure><img src="/2018/07/25/docker%E6%93%8D%E4%BD%9C%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F&amp;&amp;dockerfile/03.png" alt="启动服务"></li><li>测试运行hello-world<figure class="highlight shell"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></tbody></table></div></figure><img src="/2018/07/25/docker%E6%93%8D%E4%BD%9C%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F&amp;&amp;dockerfile/04.png" alt="测试"><blockquote><p>因为本地没有hello-world这个镜像，所以会下载一个hello-world的镜像，并在容器内运行</p></blockquote></li></ul>        <h3 id="Docker使用">          <a href="#Docker使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#Docker使用" class="headerlink" title="Docker使用"></a>Docker使用</h3>      <p>Docker官网：<span class="exturl"><a class="exturl__link" href="https://www.docker.com/">https://www.docker.com/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h4 id="Docker容器使用">          <a href="#Docker容器使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#Docker容器使用" class="headerlink" title="Docker容器使用"></a>Docker容器使用</h4>      <ul><li>docker 客户端非常简单 ,我们可以直接输入 docker 命令来查看到 Docker 客户端的所有命令选项。<blockquote><p>docker</p></blockquote></li></ul><p><img src="/2018/07/25/docker%E6%93%8D%E4%BD%9C%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F&amp;&amp;dockerfile/05.png" alt="全部命令"><br>可以通过命令 docker command –help 更深入的了解指定的 Docker 命令使用方法。</p><ul><li>获取镜像<blockquote><p>docker pull 镜像名</p></blockquote></li><li>启动容器 <blockquote><p>docker run 镜像名</p></blockquote></li><li>查看所有容器<blockquote><p>docker ps -a</p></blockquote></li><li>启动一个已经停止的容器<blockquote><p>docker start 容器ID</p></blockquote></li><li>停止容器<blockquote><p>docker stop 容器ID</p></blockquote></li><li>重启容器<blockquote><p>docker restart 容器ID</p></blockquote></li><li>删除指定的容器(只能删除关闭的容器)<blockquote><p>docker rm  (-rf)  容器ID<br>-rf强制删除</p></blockquote></li></ul>        <h4 id="Docker镜像使用">          <a href="#Docker镜像使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#Docker镜像使用" class="headerlink" title="Docker镜像使用"></a>Docker镜像使用</h4>      <p>当运行容器时，使用的镜像如果在本地中不存在，docker 就会自动从 docker 镜像仓库中下载，默认是从 Docker Hub 公共镜像源下载。</p><ul><li>查看docker 镜像(首次安装完后镜像为空)<blockquote><p>docker images</p></blockquote></li><li>docker搜索镜像<blockquote><p>docker search 镜像名称(nignx) </p></blockquote></li></ul><p>搜索下来的镜像和Docker Hub上是一样的</p><ul><li><p>拉取镜像</p><ul><li><p>因为国内访问docker hub的速度慢  所以要使用加速服务</p><blockquote><p>使用ustc镜像加速器   进行配置</p><p>vi /etc/docker/daemon.json</p></blockquote></li><li><p>在配置文件中配置以下内容</p><blockquote><p>{</p><p> “registry-mirrors”: [“<a href="https://docker.mirrors.ustc.edu.cn&quot;]">https://docker.mirrors.ustc.edu.cn"]</a></p><p>}</p></blockquote></li><li><p>配置完以后重启docker</p><blockquote><p>systemctl  start  docker</p></blockquote></li><li><p>最后进行拉取镜像</p><blockquote><p>docker pull  镜像名称</p></blockquote></li></ul></li></ul><ul><li>查看所有镜像ID<blockquote><p>docker  images  -q</p></blockquote></li><li>删除镜像<blockquote><p>docker rmi  镜像名称/镜像 ID</p></blockquote></li></ul>        <h3 id="Dockerfile">          <a href="#Dockerfile" class="heading-link"><i class="fas fa-link"></i></a><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3>              <h4 id="什么是-Dockerfile？">          <a href="#什么是-Dockerfile？" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是-Dockerfile？" class="headerlink" title="什么是 Dockerfile？"></a>什么是 Dockerfile？</h4>      <p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p>        <h4 id="Dockerfile的基本结构">          <a href="#Dockerfile的基本结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#Dockerfile的基本结构" class="headerlink" title="Dockerfile的基本结构"></a>Dockerfile的基本结构</h4>      <p>Dockerfile 一般分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令，’#’ 为 Dockerfile 中的注释。</p>        <h4 id="Dockerfile文件说明">          <a href="#Dockerfile文件说明" class="heading-link"><i class="fas fa-link"></i></a><a href="#Dockerfile文件说明" class="headerlink" title="Dockerfile文件说明"></a>Dockerfile文件说明</h4>      <p>Docker以从上到下的顺序运行Dockerfile的指令。为了指定基本映像，第一条指令必须是FROM。一个声明以＃字符开头则被视为注释。可以在Docker文件中使用RUN，CMD，FROM，EXPOSE，ENV等指令。<br>在这里列出了一些常用的指令。</p><ul><li><p>FROM</p><blockquote><p>FROM &lt;镜像名&gt;</p></blockquote><p>  FROM指定构建镜像的基础源镜像，如果本地没有指定的镜像，则会自动从 Docker 的公共库 pull 镜像下来。<br>  FROM必须是 Dockerfile 中非注释行的第一个指令，即一个 Dockerfile 从FROM语句开始。<br>  FROM可以在一个 Dockerfile 中出现多次，如果有需求在一个 Dockerfile 中创建多个镜像。<br>  如果FROM语句没有指定镜像标签，则默认使用latest标签。</p></li><li><p>CMD<br>CMD有三种使用方式</p><blockquote><p>CMD &lt;shell 命令&gt;<br>CMD [“&lt;可执行文件或命令&gt;”,”<param1>“,”<param2>“,…]<br>CMD [“<param1>“,”<param2>“,…]  # 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数</param2></param1></param2></param1></p></blockquote><p>  类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:<br>  CMD 在docker run 时运行。<br>  RUN 是在 docker build。<br>  作用：为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。<br>  注意：如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。</p></li><li><p>ADD</p><blockquote><p>ADD <src>… <dest></dest></src></p></blockquote><p>  ADD复制本地主机文件、目录或者远程文件 URLS 从 并且添加到容器指定路径中 。<br>  支持通过 Go 的正则模糊匹配，具体规则可参见  Go filepath.Match</p><blockquote><p>ADD hom* /mydir/        # adds all files starting with “hom”<br>ADD hom?.txt /mydir/    # ? is replaced with any single character</p></blockquote><p>  路径必须是绝对路径，如果 不存在，会自动创建对应目录<br>  路径必须是 Dockerfile 所在路径的相对路径<br>  如果是一个目录，只会复制目录下的内容，而目录本身则不会被复制</p></li><li><p>COPY</p><blockquote><p>COPY <src>… <dest></dest></src></p></blockquote><p>  COPY复制新文件或者目录从 并且添加到容器指定路径中 。用法同ADD，唯一的不同是不能指定远程文件 URLS。</p></li></ul><p>Dockerfile学习自:<span class="exturl"><a class="exturl__link" href="https://www.docker.org.cn/dockerppt/114.html">https://www.docker.org.cn/dockerppt/114.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="OK-本文到此结束">          <a href="#OK-本文到此结束" class="heading-link"><i class="fas fa-link"></i></a><a href="#OK-本文到此结束" class="headerlink" title="OK 本文到此结束"></a>OK 本文到此结束</h3>      ]]></content>
    
    
    <summary type="html">&lt;p&gt;Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。&lt;br&gt;Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。&lt;/p&gt;</summary>
    
    
    
    
    <category term="docker" scheme="http://www.hr915.xyz/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>视频直播</title>
    <link href="http://www.hr915.xyz/2018/07/23/%E8%A7%86%E9%A2%91%E7%9B%B4%E6%92%AD/"/>
    <id>http://www.hr915.xyz/2018/07/23/%E8%A7%86%E9%A2%91%E7%9B%B4%E6%92%AD/</id>
    <published>2018-07-23T12:46:25.000Z</published>
    <updated>2021-02-05T09:09:55.905Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>  直播：流式传输协议，传输非常短的一小截视频</p></blockquote><ul><li>主播直播 <strong>推流</strong><ul><li>OBS </li></ul></li><li>观看直播 <strong>拉流</strong><ul><li>  浏览器：video标签</li><li>  客户端工具：vlc播放器</li></ul></li><li>  协议：rtmp协议</li></ul><a id="more"></a>        <h3 id="介绍">          <a href="#介绍" class="heading-link"><i class="fas fa-link"></i></a><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3>      <p>视频直播我们需要两个软件，一个用来直播，一个用来看直播<br><strong>直播</strong><br><img src="/2018/07/23/%E8%A7%86%E9%A2%91%E7%9B%B4%E6%92%AD/01.png" alt="直播"><br><strong>看直播</strong><br><img src="/2018/07/23/%E8%A7%86%E9%A2%91%E7%9B%B4%E6%92%AD/02.png" alt="看直播"></p>        <h3 id="概念">          <a href="#概念" class="heading-link"><i class="fas fa-link"></i></a><a href="#概念" class="headerlink" title="概念"></a>概念</h3>              <h4 id="推流">          <a href="#推流" class="heading-link"><i class="fas fa-link"></i></a><a href="#推流" class="headerlink" title="推流"></a>推流</h4>      <p>推流：指的是把采集阶段封包好的内容传输到服务器的过程。<br><img src="/2018/07/23/%E8%A7%86%E9%A2%91%E7%9B%B4%E6%92%AD/01.jpg" alt="推流"></p>        <h4 id="拉流">          <a href="#拉流" class="heading-link"><i class="fas fa-link"></i></a><a href="#拉流" class="headerlink" title="拉流"></a>拉流</h4>      <p>拉流：指服务器已有直播内容，用指定地址进行拉取的过程<br><img src="/2018/07/23/%E8%A7%86%E9%A2%91%E7%9B%B4%E6%92%AD/02.jpg" alt="拉流"></p>        <h3 id="协议">          <a href="#协议" class="heading-link"><i class="fas fa-link"></i></a><a href="#协议" class="headerlink" title="协议"></a>协议</h3>      <p>主流的推送协议和优缺点</p>        <h4 id="RTMP">          <a href="#RTMP" class="heading-link"><i class="fas fa-link"></i></a><a href="#RTMP" class="headerlink" title="RTMP"></a>RTMP</h4>      <p>RTMP是Real Time Messaging Protocol（实时消息传输协议）的缩写，是Adobe公司为Flash/AIR平台和服务器之间音、视频及数据传输开发的实时消息传送协议。RTMP协议基于TCP，包括RTMP基本协议及RTMPT/RTMPS/RTMPE等多种变种。<br>RTMP协议中，视频必须是H264编码，音频必须是AAC或MP3编码，且多以flv格式封包。RTMP是目前最主流的流媒体传输协议，对CDN支持良好，实现难度较低，是大多数的直播平台的选择。<br>不过RTMP有着一个最大的不足——不支持浏览器，且Adobe已不再更新。因此直播服务要支持浏览器的话，需要另外的推送协议支持。</p>        <h4 id="HLS">          <a href="#HLS" class="heading-link"><i class="fas fa-link"></i></a><a href="#HLS" class="headerlink" title="HLS"></a>HLS</h4>      <p>Http Live Streaming是由Apple公司定义的基于HTTP的流媒体实时传输协议。它的原理是将整个流分为多个小的文件来下载，每次只下载若干个。服务器端会将最新的直播数据生成新的小文件，客户端只要不停的按顺序播放从服务器获取到的文件，就实现了直播。基本上，HLS是以点播的技术实现了直播的体验。因为每个小文件的时长很短，客户端可以很快地切换码率，以适应不同带宽条件下的播放。<br>分段推送的技术特点，决定了HLS的延迟一般会高于普通的流媒体直播协议。<br>传输内容包括两部分：一是M3U8描述文件，二是TS媒体文件。TS媒体文件中的视频必须是H264编码，音频必须是AAC或MP3编码。<br>由于数据通过HTTP协议传输，所以完全不用考虑防火墙或者代理的问题，而且分段文件的时长很短。</p>        <h4 id="WebRTC">          <a href="#WebRTC" class="heading-link"><i class="fas fa-link"></i></a><a href="#WebRTC" class="headerlink" title="WebRTC"></a>WebRTC</h4>      <p>WebRTC（Web Real-Time Communication），即“源自网页即时通信”。WebRTC是一个支持浏览器进行实时语音、视频对话的开源协议。WebRTC的支持者甚多，Google、Mozilla、Opera推动其成为W3C推荐标准。<br>WebRTC支持目前的主流浏览器，并且基于SRTP和UDP，即便在网络信号一般的情况下也具备较好的稳定性。<br>此外，WebRTC可以实现点对点通信，通信双方延时低，此外，WebRTC可以实现点对点通信，通信双方延时低，是实现“连麦”功能比较好的选择。</p>        <h3 id="利用云主机搭建直播服务器">          <a href="#利用云主机搭建直播服务器" class="heading-link"><i class="fas fa-link"></i></a><a href="#利用云主机搭建直播服务器" class="headerlink" title="利用云主机搭建直播服务器"></a>利用云主机搭建直播服务器</h3>              <h4 id="在云主机上环境部署">          <a href="#在云主机上环境部署" class="heading-link"><i class="fas fa-link"></i></a><a href="#在云主机上环境部署" class="headerlink" title="在云主机上环境部署"></a>在云主机上环境部署</h4>      <ul><li>  创建保存软件目录</li></ul><figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/nginx-flv</span><br><span class="line"># 创建了一个安装目录</span><br><span class="line">mkdir /home/flv-tools</span><br><span class="line"># 存储所需软件</span><br></pre></td></tr></tbody></table></div></figure><ul><li>下载nginx<ul><li>什么是nginx，高性能多路复用服务器，让你支持同时响应多个客户连接<ul><li>  多线程、多进程开发模式</li></ul></li></ul></li></ul><figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://nginx.org/download/nginx-1.18.0.tar.gz</span><br></pre></td></tr></tbody></table></div></figure><ul><li>  下载直播模块<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/winshining/nginx-http-flv-module</span><br></pre></td></tr></tbody></table></div></figure></li><li>  解压下载好的nginx<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.18.0.tar.gz nginx-1.18.0/</span><br></pre></td></tr></tbody></table></div></figure></li><li>  解压下载好的直播模块<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip nginx-http-flv-module.zip </span><br></pre></td></tr></tbody></table></div></figure></li><li>  进入解压好的nginx下目录，并进行安装前的配置<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.18.0</span><br><span class="line">./configure --prefix=/usr/local/nginx-flv --add-module=/home/flv-tools/nginx-http-flv-module-master</span><br><span class="line"># --prefix: 配置安装路径</span><br><span class="line">#--add-module: 添加安装插件</span><br></pre></td></tr></tbody></table></div></figure></li><li>  编译及安装<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">make </span><br><span class="line">make install </span><br><span class="line">------------</span><br><span class="line">make &amp;&amp; make install </span><br></pre></td></tr></tbody></table></div></figure>        <h4 id="配置文件修改">          <a href="#配置文件修改" class="heading-link"><i class="fas fa-link"></i></a><a href="#配置文件修改" class="headerlink" title="配置文件修改"></a>配置文件修改</h4>      <figure class="highlight shell"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">rtmp_auto_push on;</span><br><span class="line">rtmp_auto_push_reconnect 1s;</span><br><span class="line">rtmp_socket_dir /tmp;</span><br><span class="line"></span><br><span class="line">rtmp{</span><br><span class="line">out_queue 4096;</span><br><span class="line">out_cork 8;</span><br><span class="line">max_streams 128;</span><br><span class="line">timeout 15s;</span><br><span class="line">drop_idle_publisher 15s;</span><br><span class="line">log_interval 5s;</span><br><span class="line">log_size 1m;</span><br><span class="line">server {</span><br><span class="line">listen 1935; # 推流端口</span><br><span class="line">server_name zege;</span><br><span class="line"></span><br><span class="line">application live {# 配置推流地址</span><br><span class="line">live on; # 打开推流</span><br><span class="line"><span class="meta">#</span><span class="bash"> gop_cache on;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rtmp://123.123.123.123:1935/live/<span class="built_in">test</span></span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">events {</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure></li><li>  配置文件http拉流部分<figure class="highlight shell"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">http {</span><br><span class="line">include       mime.types;</span><br><span class="line">default_type  application/octet-stream;</span><br><span class="line">sendfile        on;</span><br><span class="line">keepalive_timeout  65;</span><br><span class="line">server {</span><br><span class="line">listen       8080; # 拉流通过8080去拉流</span><br><span class="line"><span class="meta">#</span><span class="bash"> http://123.123.123.123:8080/live/?port=1935&amp;stream=<span class="built_in">test</span></span></span><br><span class="line">server_name  localhost;</span><br><span class="line">location /live {</span><br><span class="line">flv_live on;</span><br><span class="line">chunked_transfer_encoding  on;</span><br><span class="line">add_header 'Access-Control-Allow-Origin' '*';</span><br><span class="line">add_header 'Access-Control-Allow-Credentials' 'true';</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure></li><li>  关闭旧有服务<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx-rtmp/sbin/nginx -s stop</span><br><span class="line">/usr/local/nginx-rtmp/sbin/nginx -s reload</span><br><span class="line"># 重启</span><br></pre></td></tr></tbody></table></div></figure></li><li>  开启新服务<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx-flv/sbin/nginx -c /usr/local/nginx-flv/conf/nginx.conf</span><br></pre></td></tr></tbody></table></div></figure><blockquote><p>   记得打开阿里云的防火墙8080</p></blockquote>        <h3 id="OBS设置推流地址">          <a href="#OBS设置推流地址" class="heading-link"><i class="fas fa-link"></i></a><a href="#OBS设置推流地址" class="headerlink" title="OBS设置推流地址"></a>OBS设置推流地址</h3>      </li><li>  推流地址<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rtmp://云主机IP及端口/live/自定义密钥</span><br></pre></td></tr></tbody></table></div></figure><img src="/2018/07/23/%E8%A7%86%E9%A2%91%E7%9B%B4%E6%92%AD/03.png" alt="推流地址"></li><li>  拉流地址<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://云主机IP及端口/live?port=端口&amp;app=live&amp;stream=密钥</span><br></pre></td></tr></tbody></table></div></figure><img src="/2018/07/23/%E8%A7%86%E9%A2%91%E7%9B%B4%E6%92%AD/04.png" alt="拉流地址">        <h3 id="Vue实现拉流">          <a href="#Vue实现拉流" class="heading-link"><i class="fas fa-link"></i></a><a href="#Vue实现拉流" class="headerlink" title="Vue实现拉流"></a>Vue实现拉流</h3>      </li><li>  安装<strong>flv.js</strong>开源工具，进行拉流，哔哩哔哩开源的拉流js<blockquote><p>  video.js 对rtmp拉流</p></blockquote><figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install flv.js --save</span><br></pre></td></tr></tbody></table></div></figure></li><li>  导包<figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> flv <span class="keyword">from</span> <span class="string">'flv.js'</span>;</span><br></pre></td></tr></tbody></table></div></figure></li><li>  构建页面标签，播放标签<figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"videoElement"</span> <span class="attr">controls</span> <span class="attr">muted</span>&gt;</span></span><br><span class="line">  Your browser is too old which doesn't support HTML5 video.</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure></li><li>  进行初始化<figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="keyword">var</span> videoElement = <span class="built_in">document</span>.getElementById(<span class="string">'videoElement'</span>);</span><br><span class="line">    <span class="keyword">var</span> flvPlayer = flv.createPlayer({</span><br><span class="line">      type: <span class="string">'flv'</span>,</span><br><span class="line">      enableWorker: <span class="literal">true</span>,     <span class="comment">//浏览器端开启flv.js的worker,多进程运行flv.js</span></span><br><span class="line">      isLive: <span class="literal">true</span>,           <span class="comment">//直播模式</span></span><br><span class="line">      hasAudio: <span class="literal">false</span>,        <span class="comment">//关闭音频</span></span><br><span class="line">      hasVideo: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// cors: true,</span></span><br><span class="line">      stashInitialSize: <span class="number">128</span>,</span><br><span class="line">      enableStashBuffer: <span class="literal">false</span>, <span class="comment">//播放flv时，设置是否启用播放缓存，只在直播起作用。</span></span><br><span class="line">      url: <span class="string">'http://云主机IP及端口/live?port=端口&amp;app=live&amp;stream=密钥'</span></span><br><span class="line">    })</span><br><span class="line">    flvPlayer.attachMediaElement(videoElement);</span><br><span class="line">    flvPlayer.load();</span><br><span class="line">    flvPlayer.play();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="OK-这样一个直播就做好了">          <a href="#OK-这样一个直播就做好了" class="heading-link"><i class="fas fa-link"></i></a><a href="#OK-这样一个直播就做好了" class="headerlink" title="OK,这样一个直播就做好了"></a>OK,这样一个直播就做好了</h3>      </li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;  直播：流式传输协议，传输非常短的一小截视频&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;主播直播 &lt;strong&gt;推流&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;OBS &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;观看直播 &lt;strong&gt;拉流&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;  浏览器：video标签&lt;/li&gt;
&lt;li&gt;  客户端工具：vlc播放器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;  协议：rtmp协议&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>无限级递归分类</title>
    <link href="http://www.hr915.xyz/2018/07/22/%E6%97%A0%E9%99%90%E7%BA%A7%E9%80%92%E5%BD%92%E5%88%86%E7%B1%BB/"/>
    <id>http://www.hr915.xyz/2018/07/22/%E6%97%A0%E9%99%90%E7%BA%A7%E9%80%92%E5%BD%92%E5%88%86%E7%B1%BB/</id>
    <published>2018-07-22T12:46:25.000Z</published>
    <updated>2021-02-04T08:22:47.217Z</updated>
    
    <content type="html"><![CDATA[<p>所谓的无限极分类是啥？其实简单点说就是一个人类可以繁衍出多个后代，然后一个后代又可以分另外多个后代这样无限繁衍下去（举例：家族族谱），就好象linux系统你可以新建一个文件夹，然后在这个文件夹里又可以建一些个文件夹，在文件夹底下还可以建一些文件夹一样，随后使用tree命令就可以查看文件夹目录层级。<br>那么这种层级结构也成为树结构在日常的开发需求里也是很常见的，比如美多商城系统的商品分类，课程的目录章节，以及以及论坛里的帖子回复等等</p><a id="more"></a>        <h3 id="话不多说，上案例：">          <a href="#话不多说，上案例：" class="heading-link"><i class="fas fa-link"></i></a><a href="#话不多说，上案例：" class="headerlink" title="话不多说，上案例："></a>话不多说，上案例：</h3>              <h4 id="首先，打开django项目中的models-py，新建一个类别的模型类，这里我们以最简单的parentid的形式来建立">          <a href="#首先，打开django项目中的models-py，新建一个类别的模型类，这里我们以最简单的parentid的形式来建立" class="heading-link"><i class="fas fa-link"></i></a><a href="#首先，打开django项目中的models-py，新建一个类别的模型类，这里我们以最简单的parentid的形式来建立" class="headerlink" title="首先，打开django项目中的models.py，新建一个类别的模型类，这里我们以最简单的parentid的形式来建立"></a>首先，打开django项目中的models.py，新建一个类别的模型类，这里我们以最简单的parentid的形式来建立</h4>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cate</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="comment"># 分类名称</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">500</span>)</span><br><span class="line">    <span class="comment"># 父级id</span></span><br><span class="line">    pid = models.IntegerField()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 表名</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'cate'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></tbody></table></div></figure>        <h4 id="由于我们的项目基于drf框架，所以要增加一个序列器类">          <a href="#由于我们的项目基于drf框架，所以要增加一个序列器类" class="heading-link"><i class="fas fa-link"></i></a><a href="#由于我们的项目基于drf框架，所以要增加一个序列器类" class="headerlink" title="由于我们的项目基于drf框架，所以要增加一个序列器类"></a>由于我们的项目基于drf框架，所以要增加一个序列器类</h4>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> WXJapp.models <span class="keyword">import</span> Cate</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CateSer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Cate</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br></pre></td></tr></tbody></table></div></figure>        <h4 id="由于django序列化出来的类不具备层级结构，所以我们提前写好一个用来递归的方法：">          <a href="#由于django序列化出来的类不具备层级结构，所以我们提前写好一个用来递归的方法：" class="heading-link"><i class="fas fa-link"></i></a><a href="#由于django序列化出来的类不具备层级结构，所以我们提前写好一个用来递归的方法：" class="headerlink" title="由于django序列化出来的类不具备层级结构，所以我们提前写好一个用来递归的方法："></a>由于django序列化出来的类不具备层级结构，所以我们提前写好一个用来递归的方法：</h4>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xTree</span>(<span class="params">datas</span>):</span></span><br><span class="line">    lists = []</span><br><span class="line">    tree = {}</span><br><span class="line">    parent_id = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> datas:</span><br><span class="line">        item = i</span><br><span class="line">        print(item)</span><br><span class="line">        tree[item[<span class="string">'id'</span>]] = item</span><br><span class="line">    root = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> datas:</span><br><span class="line">        obj = i</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> obj[<span class="string">'pid'</span>]:</span><br><span class="line">            root = tree[obj[<span class="string">'id'</span>]]</span><br><span class="line">            lists.append(root)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            parent_id = obj[<span class="string">'pid'</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'childlist'</span> <span class="keyword">not</span> <span class="keyword">in</span> tree[parent_id]:</span><br><span class="line">                tree[parent_id][<span class="string">'childlist'</span>] = []</span><br><span class="line">            tree[parent_id][<span class="string">'childlist'</span>].append(tree[obj[<span class="string">'id'</span>]])</span><br><span class="line">    <span class="keyword">return</span> lists</span><br></pre></td></tr></tbody></table></div></figure>        <h4 id="此时我们写一个视图接口，从数据库中读取数据就可以了">          <a href="#此时我们写一个视图接口，从数据库中读取数据就可以了" class="heading-link"><i class="fas fa-link"></i></a><a href="#此时我们写一个视图接口，从数据库中读取数据就可以了" class="headerlink" title="此时我们写一个视图接口，从数据库中读取数据就可以了"></a>此时我们写一个视图接口，从数据库中读取数据就可以了</h4>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTree</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="comment"># 获取订单列表</span></span><br><span class="line">        catelist = Cate.objects.<span class="built_in">all</span>()</span><br><span class="line">        <span class="comment"># 序列化</span></span><br><span class="line">        catelist_ser = CateSer(catelist, many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        mylist = xTree(catelist_ser.data)</span><br><span class="line">        print(mylist)</span><br><span class="line">        <span class="keyword">return</span> Response(mylist)</span><br></pre></td></tr></tbody></table></div></figure>        <h4 id="最后，再配个路由">          <a href="#最后，再配个路由" class="heading-link"><i class="fas fa-link"></i></a><a href="#最后，再配个路由" class="headerlink" title="最后，再配个路由"></a>最后，再配个路由</h4>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> WXJapp.views <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'mytree/'</span>, MyTree.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="这样我们的后端就写好了">          <a href="#这样我们的后端就写好了" class="heading-link"><i class="fas fa-link"></i></a><a href="#这样我们的后端就写好了" class="headerlink" title="这样我们的后端就写好了"></a>这样我们的后端就写好了</h3>              <h4 id="向数据库中添加测试数据">          <a href="#向数据库中添加测试数据" class="heading-link"><i class="fas fa-link"></i></a><a href="#向数据库中添加测试数据" class="headerlink" title="向数据库中添加测试数据"></a>向数据库中添加测试数据</h4>      <p><img src="/2018/07/22/%E6%97%A0%E9%99%90%E7%BA%A7%E9%80%92%E5%BD%92%E5%88%86%E7%B1%BB/01.png" alt="测试数据"></p>        <h4 id="Postman测试后端接口">          <a href="#Postman测试后端接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#Postman测试后端接口" class="headerlink" title="Postman测试后端接口"></a>Postman测试后端接口</h4>      <p><img src="/2018/07/22/%E6%97%A0%E9%99%90%E7%BA%A7%E9%80%92%E5%BD%92%E5%88%86%E7%B1%BB/02.png" alt="测试接口"></p>        <h3 id="现在我们开始写前端，">          <a href="#现在我们开始写前端，" class="heading-link"><i class="fas fa-link"></i></a><a href="#现在我们开始写前端，" class="headerlink" title="现在我们开始写前端，"></a>现在我们开始写前端，</h3>              <h4 id="打开vue项目，封装一个WXJcate-vue递归组件">          <a href="#打开vue项目，封装一个WXJcate-vue递归组件" class="heading-link"><i class="fas fa-link"></i></a><a href="#打开vue项目，封装一个WXJcate-vue递归组件" class="headerlink" title="打开vue项目，封装一个WXJcate.vue递归组件"></a>打开vue项目，封装一个WXJcate.vue递归组件</h4>      <p>所谓递归组件: 就是组件可以在它们自己的模板中调用自身，不过它们只能通过 name 选项来做这件事，例如给组件设置属性 name: ‘WJXcate’，然后在模板中就可以使用 WXJcate 调用自己进行递归调用了</p><figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;div :class="[data.id==0 ? 'root': '', 'wxjcate']"&gt;{{ data.name }}&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;ul v-if="data.childlist &amp;&amp; data.childlist.length&gt;0"&gt;</span><br><span class="line">        &lt;WXJcate v-for="child in data.childlist" :key="child.id" :data="child"/&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  name: 'WXJcate', // 递归组件需要设置 name 属性，才能在模板中调用自己</span><br><span class="line">  props:['data'],</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style &gt;</span><br><span class="line">.wxjcate {</span><br><span class="line">  padding-left: 8px;</span><br><span class="line">  border-left: 1px solid gray;</span><br><span class="line">}</span><br><span class="line">ul {</span><br><span class="line">  padding-left: 20px;</span><br><span class="line">  list-style: none;</span><br><span class="line">}</span><br><span class="line">.root { display: none; }</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></div></figure>        <h4 id="然后就可以在其他页面中调用这个递归组件">          <a href="#然后就可以在其他页面中调用这个递归组件" class="heading-link"><i class="fas fa-link"></i></a><a href="#然后就可以在其他页面中调用这个递归组件" class="headerlink" title="然后就可以在其他页面中调用这个递归组件"></a>然后就可以在其他页面中调用这个递归组件</h4>      <p>在WXJ_Index调用递归组件并请求后端的数据</p><figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;WXJcate :data="data" /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import WXJcate from './WXJcate.vue';</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  data () {</span><br><span class="line">    return {</span><br><span class="line">      data:{},</span><br><span class="line">      online: 0</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  components: {</span><br><span class="line">    WXJcate</span><br><span class="line">  },</span><br><span class="line"></span><br><span class="line">  //钩子方法</span><br><span class="line">  mounted:function(){</span><br><span class="line"></span><br><span class="line">    this.get_token();</span><br><span class="line">  },</span><br><span class="line">  //绑定事件</span><br><span class="line">  methods:{</span><br><span class="line">    get_token(){</span><br><span class="line">      this.$axios.get('mytree/').then((result) =&gt;{</span><br><span class="line">        // console.log(result);</span><br><span class="line">        var mytree = {'id':0,name:'123'};</span><br><span class="line">        mytree['childlist'] = result;</span><br><span class="line">        this.data = mytree;</span><br><span class="line">      });</span><br><span class="line">    },</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">.on {</span><br><span class="line">  background: #cdcbff;</span><br><span class="line">}</span><br><span class="line">.off {</span><br><span class="line">  background: #fefdff;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="这样我们的Web端就写好了">          <a href="#这样我们的Web端就写好了" class="heading-link"><i class="fas fa-link"></i></a><a href="#这样我们的Web端就写好了" class="headerlink" title="这样我们的Web端就写好了"></a>这样我们的Web端就写好了</h3>              <h4 id="最后我们来看一下页面效果">          <a href="#最后我们来看一下页面效果" class="heading-link"><i class="fas fa-link"></i></a><a href="#最后我们来看一下页面效果" class="headerlink" title="最后我们来看一下页面效果"></a>最后我们来看一下页面效果</h4>      <p><img src="/2018/07/22/%E6%97%A0%E9%99%90%E7%BA%A7%E9%80%92%E5%BD%92%E5%88%86%E7%B1%BB/03.png" alt="最终效果"></p><p>django-git地址：<span class="exturl"><a class="exturl__link" href="https://gitee.com/before-l/celery-demo.git">https://gitee.com/before-l/celery-demo.git</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>vue-git地址：<span class="exturl"><a class="exturl__link" href="https://gitee.com/before-l/annual-leave-vue.git">https://gitee.com/before-l/annual-leave-vue.git</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;所谓的无限极分类是啥？其实简单点说就是一个人类可以繁衍出多个后代，然后一个后代又可以分另外多个后代这样无限繁衍下去（举例：家族族谱），就好象linux系统你可以新建一个文件夹，然后在这个文件夹里又可以建一些个文件夹，在文件夹底下还可以建一些文件夹一样，随后使用tree命令就可以查看文件夹目录层级。&lt;br&gt;那么这种层级结构也成为树结构在日常的开发需求里也是很常见的，比如美多商城系统的商品分类，课程的目录章节，以及以及论坛里的帖子回复等等&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>WebShell</title>
    <link href="http://www.hr915.xyz/2018/07/20/Webshell/"/>
    <id>http://www.hr915.xyz/2018/07/20/Webshell/</id>
    <published>2018-07-20T12:46:25.000Z</published>
    <updated>2021-02-04T06:51:19.242Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是Webshell">          <a href="#什么是Webshell" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是Webshell" class="headerlink" title="什么是Webshell?"></a>什么是Webshell?</h3>      <p>顾名思义，”web” - 显然需要服务器开放web服务,”shell” - 取得对服务器某种程度上操作权限。<br>webshell常常被称为匿名用户(入侵者)通过WEB服务端口对WEB服务器有某种程度上操作的权限,由于其大多是以网页脚本的形式出现，也有人称之为网站后门工具。</p><a id="more"></a>        <h3 id="Webshell有什么作用？">          <a href="#Webshell有什么作用？" class="heading-link"><i class="fas fa-link"></i></a><a href="#Webshell有什么作用？" class="headerlink" title="Webshell有什么作用？"></a>Webshell有什么作用？</h3>      <ul><li>一方面，webshell被站长常常用于网站管理、服务器管理等等，根据FSO权限的不同，作用有在线编辑网页脚本、上传下载文件、查看数据库、执行任意程序命令等。</li><li>另一方面，被入侵者利用，从而达到控制网站服务器的目的。这些网页脚本常称为WEB脚本木马，目前比较流行的asp或php木马，也有基于.NET的脚本木马。</li></ul>        <h3 id="使用VUE-Django-实现Webshell">          <a href="#使用VUE-Django-实现Webshell" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用VUE-Django-实现Webshell" class="headerlink" title="使用VUE+Django 实现Webshell"></a>使用VUE+Django 实现Webshell</h3>      <p>web端使用Xterm.js或者其他的WebShell组件和websocket<br>后端只需要支持WebSocket和SSH协议的远程登录模块即可</p>        <h4 id="Web-VUE-端实现">          <a href="#Web-VUE-端实现" class="heading-link"><i class="fas fa-link"></i></a><a href="#Web-VUE-端实现" class="headerlink" title="Web(VUE)端实现"></a>Web(VUE)端实现</h4>      <ul><li>安装<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install xterm@3.1.0 --save  # 指定版本安装，最新版的xterm文件的改动很大，使用下面的方法会报错</span><br></pre></td></tr></tbody></table></div></figure></li><li>导包<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import 'xterm/dist/xterm.css'</span><br><span class="line">import {Terminal} from 'xterm'</span><br><span class="line">import * as attach from 'xterm/lib/addons/attach/attach' // 安装插件时，可以使用attach去添加</span><br><span class="line">Terminal.applyAddon(attach) // 添加插件</span><br></pre></td></tr></tbody></table></div></figure></li><li>在页面中渲染<figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"terminal"</span> <span class="attr">style</span>=<span class="string">"width: 500px;height:300px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure></li><li>数据操作<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">mounted() {</span><br><span class="line">    // 获取到了div标签</span><br><span class="line">            let terminalContainer = document.getElementById('terminal')</span><br><span class="line">            // 初始化黑窗口对象</span><br><span class="line">            this.term = new Terminal(this.terminal)</span><br><span class="line">            // 打开这个对象</span><br><span class="line">            this.term.open(terminalContainer)</span><br><span class="line">            // this.term.write("$ ")</span><br><span class="line">            // this.term.fit()</span><br><span class="line">            // open websocket</span><br><span class="line">        </span><br><span class="line">            this.terminalSocket = new WebSocket('ws://127.0.0.1:8000/webssh/')</span><br><span class="line">            this.terminalSocket.onopen = function () { // 连接成功触发该方法</span><br><span class="line">              // this.term_isconnect = true</span><br><span class="line">              console.log('websocket is Connected...')</span><br><span class="line">            }</span><br><span class="line">            this.terminalSocket.onclose = function () { // 连接关闭适触发的方法</span><br><span class="line">              console.log('websocket is Closed...')</span><br><span class="line">            }</span><br><span class="line">            this.terminalSocket.onerror = function () { // 连接出错触发的方法</span><br><span class="line">              console.log('damn Websocket is broken!')</span><br><span class="line">            }</span><br><span class="line">            this.term.attach(this.terminalSocket)</span><br><span class="line">            // 绑定xterm到ws流中</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></div></figure></li><li>web端完整代码<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="terminal" style="width: 500px;height:300px;"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import 'xterm/dist/xterm.css';</span><br><span class="line">import {Terminal} from 'xterm';</span><br><span class="line">import * as fit from 'xterm/lib/addons/fit/fit';</span><br><span class="line"></span><br><span class="line">Terminal.applyAddon(fit);</span><br><span class="line">export default {</span><br><span class="line">  name: 'Webshell',</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line"></span><br><span class="line">      term: null,</span><br><span class="line">      terminalSocket: null,</span><br><span class="line">      order: ''</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  methods: {},</span><br><span class="line">  mounted () {</span><br><span class="line">       // 获取到了div标签</span><br><span class="line">       let terminalContainer = document.getElementById('terminal')</span><br><span class="line">       // 初始化黑窗口对象</span><br><span class="line">       this.term = new Terminal(this.terminal)</span><br><span class="line">       // 打开这个对象</span><br><span class="line">       this.term.open(terminalContainer)</span><br><span class="line">       // open websocket</span><br><span class="line">   </span><br><span class="line">       this.terminalSocket = new WebSocket('ws://127.0.0.1:8000/webssh/')</span><br><span class="line">       this.terminalSocket.onopen = function () { // 连接成功触发该方法</span><br><span class="line">         // this.term_isconnect = true</span><br><span class="line">         console.log('websocket is Connected...')</span><br><span class="line">       }</span><br><span class="line">       this.terminalSocket.onclose = function () { // 连接关闭适触发的方法</span><br><span class="line">         console.log('websocket is Closed...')</span><br><span class="line">       }</span><br><span class="line">       this.terminalSocket.onerror = function () { // 连接出错触发的方法</span><br><span class="line">         console.log('damn Websocket is broken!')</span><br><span class="line">       }</span><br><span class="line">       this.term.attach(this.terminalSocket)</span><br><span class="line">       // 绑定xterm到ws流中</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></div></figure>        <h4 id="服务器端-Django-实现-使用paramiko与服务器建立交互">          <a href="#服务器端-Django-实现-使用paramiko与服务器建立交互" class="heading-link"><i class="fas fa-link"></i></a><a href="#服务器端-Django-实现-使用paramiko与服务器建立交互" class="headerlink" title="服务器端(Django)实现         使用paramiko与服务器建立交互"></a>服务器端(Django)实现         使用paramiko与服务器建立交互</h4>        ssh是一个协议，OpenSSH是其中一个开源实现，paramiko是Python的一个库，实现了SSHv2协议(底层使用cryptography)。<br>  有了Paramiko以后，我们就可以在Python代码中直接使用SSH协议对远程服务器执行操作，而不是通过ssh命令对远程服务器进行操作</li><li>安装<figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install paramiko</span><br></pre></td></tr></tbody></table></div></figure></li><li>利用paramiko进行ssh远程登录<figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_ssh</span>(<span class="params">host=<span class="string">"********"</span>, username=<span class="string">"***"</span>, password=<span class="string">"****"</span>, port=<span class="number">22</span></span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :host 主机地址</span></span><br><span class="line"><span class="string">    :username 用户名，一般是root</span></span><br><span class="line"><span class="string">    :password 密码</span></span><br><span class="line"><span class="string">    :port ssh协议的端口,22</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 初始化一个ssh对象</span></span><br><span class="line">    sh = paramiko.SSHClient()</span><br><span class="line">    <span class="comment"># 设置对象连接密钥规则</span></span><br><span class="line">    sh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">    <span class="comment"># 连接</span></span><br><span class="line">    sh.connect(host, username=username, password=password, port=port)</span><br><span class="line">    <span class="comment"># 生成shell对象</span></span><br><span class="line">    channle = sh.invoke_shell(term=<span class="string">'xterm'</span>)</span><br><span class="line">    <span class="keyword">return</span> channle</span><br></pre></td></tr></tbody></table></div></figure></li><li>编写子线程方法，专注接收web端发送的命令<figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recv_ssh_msg</span>(<span class="params">channle, ws</span>):</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        只管接收</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 判断shell连接对象是否没有退出</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> channle.exit_status_ready():</span><br><span class="line">        <span class="comment"># 接收过程可能会因为没有任何返回而报错</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            buf = channle.recv(<span class="number">1024</span>)  <span class="comment"># 接收命令的执行结果</span></span><br><span class="line">            ws.send(buf)  <span class="comment"># 向Websocket通道返回</span></span><br><span class="line">        <span class="comment"># 接收不到会报错，但是报错没关系，继续重新尝试接受</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></div></figure></li><li>结合websocket实现实时操作<figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="meta">@accept_websocket</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">webssh</span>(<span class="params">request</span>):</span></span><br><span class="line">    print(<span class="string">"来人了"</span>)</span><br><span class="line">    <span class="keyword">if</span> request.is_websocket:</span><br><span class="line">        <span class="comment"># 1. 获取到连接对象</span></span><br><span class="line">        ws = request.websocket</span><br><span class="line">        <span class="comment"># 2. 初始化linux连接</span></span><br><span class="line">        channel = make_ssh()</span><br><span class="line">        <span class="comment"># 3. 初始化linux数据接收线程，并开启</span></span><br><span class="line">        recv_thread = Thread(target=recv_ssh_msg, args=(channel, ws))</span><br><span class="line">        recv_thread.start()</span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:  <span class="comment"># 主线程: 只管发送</span></span><br><span class="line">            <span class="comment"># 2. 阻塞ws接收发来的数据</span></span><br><span class="line">            cmd = ws.wait()</span><br><span class="line">            <span class="comment"># cmd = ws.recv()</span></span><br><span class="line">            <span class="keyword">if</span> cmd:</span><br><span class="line">                channel.send(cmd)  <span class="comment"># 发送到linux 去执行</span></span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># 如果连接断开，那么cmd将会发一个空包</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        recv_thread.join()  <span class="comment"># 回收子线程</span></span><br><span class="line">        ws.close()  <span class="comment"># 关闭ws连接</span></span><br></pre></td></tr></tbody></table></div></figure></li><li>这样一个webShell就完成了        <h3 id="OK-本文到此结束">          <a href="#OK-本文到此结束" class="heading-link"><i class="fas fa-link"></i></a><a href="#OK-本文到此结束" class="headerlink" title="OK 本文到此结束"></a>OK 本文到此结束</h3>      django-git地址：<span class="exturl"><a class="exturl__link" href="https://gitee.com/before-l/celery-demo.git">https://gitee.com/before-l/celery-demo.git</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> </li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;什么是Webshell&quot;&gt;
          &lt;a href=&quot;#什么是Webshell&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#什么是Webshell&quot; class=&quot;headerlink&quot; title=&quot;什么是Webshell?&quot;&gt;&lt;/a&gt;什么是Webshell?&lt;/h3&gt;
      &lt;p&gt;顾名思义，”web” - 显然需要服务器开放web服务,”shell” - 取得对服务器某种程度上操作权限。&lt;br&gt;webshell常常被称为匿名用户(入侵者)通过WEB服务端口对WEB服务器有某种程度上操作的权限,由于其大多是以网页脚本的形式出现，也有人称之为网站后门工具。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>redis键空间事件</title>
    <link href="http://www.hr915.xyz/2018/07/19/redis%E9%94%AE%E7%A9%BA%E9%97%B4%E4%BA%8B%E4%BB%B6/"/>
    <id>http://www.hr915.xyz/2018/07/19/redis%E9%94%AE%E7%A9%BA%E9%97%B4%E4%BA%8B%E4%BB%B6/</id>
    <published>2018-07-19T12:46:25.000Z</published>
    <updated>2021-02-02T11:03:40.934Z</updated>
    
    <content type="html"><![CDATA[<p>Redis的键空间通知(keyspace notifications)功能是自2.8.0版本开始加入的，客户端可以通过订阅/发布(Pub/Sub)机制，接收那些以某种方式改变了Redis数据空间的事件通知。比如：所有改变给定key的命令；所有经过lpush操作的key；所有在0号数据库中过期的key等等。<br>通知是通过Redis的订阅/发布机制发送的，因此，所有支持订阅/发布功能的客户端都可在无需调整的情况下，使用键空间通知功能。</p><a id="more"></a>        <h4 id="启用">          <a href="#启用" class="heading-link"><i class="fas fa-link"></i></a><a href="#启用" class="headerlink" title="启用"></a>启用</h4>      <p>因键空间通知功能需要耗费一定的CPU时间，因此默认情况下，该功能是关闭的。<br>可以通过修改配置文件redis.conf，或者通过config set notify-keyspace-events KEA，来启用或关闭该功能。</p><p>KEA字符串表示启用了所有可能的事件。要查看每个字符的含义，请参考文档：<span class="exturl"><a class="exturl__link" href="https://redis.io/topics/notifications">https://redis.io/topics/notifications</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>CLI 可以在特殊模式下工作，允许您订阅一个通道以接收消息。</p>        <h4 id="事件的类型">          <a href="#事件的类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#事件的类型" class="headerlink" title="事件的类型"></a>事件的类型</h4>      <p> 针对改变Redis数据空间的每个操作，键空间通知都会发送两类不同的事件。<br>比如在0号数库中，执行del mykey操作，将会触发两个消息，等价于执行下面两个publish命令：</p><figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PUBLISH __keyspace@0__:mykey <span class="keyword">del</span></span><br><span class="line">PUBLISH __keyevent@0__:<span class="keyword">del</span> mykey</span><br></pre></td></tr></tbody></table></div></figure><p>一个频道发布0号数据库中，所有针对mykey键执行的操作，这类事件，以keyspace为前缀，称为keyspace通知；<br> 另一个频道发布0号数据库中，所有成功执行del操作的键，这类事件，以keyevent为前缀，称为keyevent通知；<br> 在上面的例子中，当执行del  mykey时，会发生：<br> a：keyspace频道的订阅者会收到消息，消息中包含键执行的操作的名字；<br> b：keyevent频道的订阅者会收到消息，消息中包含执行某种操作的键的名字；<br> 可以通过配置，使Redis仅发送某一类我们感兴趣的通知。</p>        <h4 id="案例-1-for-example-：">          <a href="#案例-1-for-example-：" class="heading-link"><i class="fas fa-link"></i></a><a href="#案例-1-for-example-：" class="headerlink" title="案例 1 for example ："></a>案例 1 for example ：</h4>      <ol><li>Redis发布所有通知，客户端A订阅所有消息：<figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; config <span class="built_in">set</span> notify-keyspace-events KEA</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;  psubscribe __key*@0__:*</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line"><span class="number">1</span>) <span class="string">"psubscribe"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"__key*@0__:*"</span></span><br><span class="line"><span class="number">3</span>) (integer) <span class="number">1</span></span><br></pre></td></tr></tbody></table></div></figure></li><li>  然后，在客户端B上执行set和del命令：<figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> liu HR</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">del</span> liu</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;</span><br></pre></td></tr></tbody></table></div></figure></li><li>此时客户端A的打印就变成了这样： <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) <span class="string">"pmessage"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"__key*@0__:*"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"__keyspace@0__:liu"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"set"</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"pmessage"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"__key*@0__:*"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"__keyevent@0__:set"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"liu"</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"pmessage"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"__key*@0__:*"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"__keyspace@0__:liu"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"del"</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"pmessage"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"__key*@0__:*"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"__keyevent@0__:del"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"liu"</span></span><br></pre></td></tr></tbody></table></div></figure></li><li>可见，针对每一个操作，客户端A都收到了两种消息，分别是keyspace和keyevent消息。</li></ol>        <h4 id="案例-2-for-example-：">          <a href="#案例-2-for-example-：" class="heading-link"><i class="fas fa-link"></i></a><a href="#案例-2-for-example-：" class="headerlink" title="案例 2 for example ："></a>案例 2 for example ：</h4>      <ol><li>使Redis仅发布keyspace通知，而客户端A订阅所有消息类型：<figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; config <span class="built_in">set</span> notify-keyspace-events KA</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; psubscribe __key*@0__:*</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line"><span class="number">1</span>) <span class="string">"psubscribe"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"__key*@0__:*"</span></span><br><span class="line"><span class="number">3</span>) (integer) <span class="number">1</span></span><br></pre></td></tr></tbody></table></div></figure></li><li>然后，在客户端B上执行set和del命令：<figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> liu HR</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">del</span> liu</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">del</span> liu</span><br><span class="line">(integer) <span class="number">0</span></span><br></pre></td></tr></tbody></table></div></figure></li><li>此时客户端A的打印就变成了这样： <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) <span class="string">"pmessage"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"__key*@0__:*"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"__keyspace@0__:liu"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"set"</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"pmessage"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"__key*@0__:*"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"__keyspace@0__:liu"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"del"</span></span><br></pre></td></tr></tbody></table></div></figure></li><li>可见，尽管客户端A订阅了所有消息，但是Redis仅发布了keyspace事件。<br>而且，在客户端B上执行了两次del操作，而只有第一个del成功执行了，从而产生了一个事件。</li></ol>        <h4 id="案例-3-for-example-：">          <a href="#案例-3-for-example-：" class="heading-link"><i class="fas fa-link"></i></a><a href="#案例-3-for-example-：" class="headerlink" title="案例 3 for example ："></a>案例 3 for example ：</h4>      <ol><li>Redis发布所有通知，客户端A仅订阅keyspace消息<figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; config <span class="built_in">set</span> notify-keyspace-events KEA</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; psubscribe __keyspace@0__:*</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line"><span class="number">1</span>) <span class="string">"psubscribe"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"__keyspace@0__:*"</span></span><br><span class="line"><span class="number">3</span>) (integer) <span class="number">1</span></span><br></pre></td></tr></tbody></table></div></figure></li><li>然后，在客户端B上执行set和del命令：<figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> liu HR</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">del</span> liu</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">del</span> liu</span><br><span class="line">(integer) <span class="number">0</span></span><br></pre></td></tr></tbody></table></div></figure></li><li>此时客户端A的打印就变成了这样： <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) <span class="string">"pmessage"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"__keyspace@0__:*"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"__keyspace@0__:liu"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"set"</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"pmessage"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"__keyspace@0__:*"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"__keyspace@0__:liu"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"del"</span></span><br></pre></td></tr></tbody></table></div></figure></li><li>可见，针对每一个操作，客户端A只收到了keyspace消息</li></ol>        <h4 id="案例-4-for-example-：">          <a href="#案例-4-for-example-：" class="heading-link"><i class="fas fa-link"></i></a><a href="#案例-4-for-example-：" class="headerlink" title="案例 4 for example ："></a>案例 4 for example ：</h4>      <ol><li>Redis仅发布字符串特定类型的通知，客户端A订阅所有类型的消息<figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; config <span class="built_in">set</span> notify-keyspace-events KE$</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; psubscribe __key*@0__:*</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line"><span class="number">1</span>) <span class="string">"psubscribe"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"__key*@0__:*"</span></span><br><span class="line"><span class="number">3</span>) (integer) <span class="number">1</span></span><br></pre></td></tr></tbody></table></div></figure></li><li>在客户端B上，分别执行lpush，set和del命令：<figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lpush <span class="built_in">list</span> liu hui ran</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> liu HR</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">del</span> liu</span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></tbody></table></div></figure></li><li>此时客户端A的打印就变成了这样：<figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) <span class="string">"pmessage"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"__key*@0__:*"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"__keyspace@0__:liu"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"set"</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"pmessage"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"__key*@0__:*"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"__keyevent@0__:set"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"liu"</span></span><br></pre></td></tr></tbody></table></div></figure></li><li>可见，针对字符串，产生了keyspace和keyevent类型的消息，而针对列表的lpush命令并没有产生消息，而且，del命令是非特定类型的命令，也没有产生消息。</li></ol>        <h4 id="OK-本文到此结束">          <a href="#OK-本文到此结束" class="heading-link"><i class="fas fa-link"></i></a><a href="#OK-本文到此结束" class="headerlink" title="OK,本文到此结束"></a>OK,本文到此结束</h4>      <p>要查看所有有可能的时间，请参考文档：<span class="exturl"><a class="exturl__link" href="https://redis.io/topics/notifications">https://redis.io/topics/notifications</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Redis的键空间通知(keyspace notifications)功能是自2.8.0版本开始加入的，客户端可以通过订阅/发布(Pub/Sub)机制，接收那些以某种方式改变了Redis数据空间的事件通知。比如：所有改变给定key的命令；所有经过lpush操作的key；所有在0号数据库中过期的key等等。&lt;br&gt;通知是通过Redis的订阅/发布机制发送的，因此，所有支持订阅/发布功能的客户端都可在无需调整的情况下，使用键空间通知功能。&lt;/p&gt;</summary>
    
    
    
    
    <category term="redis" scheme="http://www.hr915.xyz/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis发布订阅</title>
    <link href="http://www.hr915.xyz/2018/07/18/redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/"/>
    <id>http://www.hr915.xyz/2018/07/18/redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</id>
    <published>2018-07-18T12:46:25.000Z</published>
    <updated>2021-02-02T08:50:06.427Z</updated>
    
    <content type="html"><![CDATA[<p>Redis提供了发布订阅功能，跟消息中间件是类似的，可以用于消息的传输，Redis提供了一组命令可以让开发者实现“发布/订阅”模式 (publish/subscribe) ，该模式同样可以实现进程间的消息传递。<br>它的实现原理是发布/订阅模式包含两种角色，分别是发布者和订阅者。订阅者可以订阅一个或多个频道，而发布者可以向指定的 频道发送消息，所有订阅此频道的订阅者都会收到该消息。</p><a id="more"></a>        <h4 id="关系图">          <a href="#关系图" class="heading-link"><i class="fas fa-link"></i></a><a href="#关系图" class="headerlink" title="关系图"></a>关系图</h4>      <p><img src="/2018/07/18/redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/01.png" alt="发布订阅"></p>        <h4 id="redis-消息订阅和发布命令：">          <a href="#redis-消息订阅和发布命令：" class="heading-link"><i class="fas fa-link"></i></a><a href="#redis-消息订阅和发布命令：" class="headerlink" title="redis 消息订阅和发布命令："></a>redis 消息订阅和发布命令：</h4>      <ol><li>psubscribe pattern [pattern…] ：订阅一个或多个给定模式的 频道</li><li>punsubscribe [pattern [pttern…]]：退订所有频道给定模式的频道</li><li>pubsub subcommand [argument [argument…]]：查看订阅与发布系统状态</li><li>publish channel message：将信息发送到指定的频道</li><li>subscribe channel [channel…]：订阅给定的一个或多个频道信息。</li><li>unsubscribe [channel [channel…]]：指退订给定的频道。</li></ol>        <h4 id="案例-for-example-：">          <a href="#案例-for-example-：" class="heading-link"><i class="fas fa-link"></i></a><a href="#案例-for-example-：" class="headerlink" title="案例 for example ："></a>案例 for example ：</h4>      <p><strong>注意</strong>：需要打开两个小黑窗口哦！</p><ol><li><p>一次订阅多个频道 c1,c2,c3 (subscribe c1 c2 c3)<br><img src="/2018/07/18/redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/02.png" alt="订阅多个频道"></p></li><li><p>消息发布，向c2频道发布消息 (publish c2 hello-redis)<br><img src="/2018/07/18/redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/03.png" alt="向指定频道发布消息"></p></li><li><p>订阅给定模式的频道，通配符* (psubscribe new*)<br><img src="/2018/07/18/redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/04.png" alt="订阅特定模式的频道"></p></li><li><p>发布消息 (publish new1 redis-hello)<br><img src="/2018/07/18/redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/05.png" alt="发布消息"></p></li></ol>        <h4 id="OK-本文到此结束">          <a href="#OK-本文到此结束" class="heading-link"><i class="fas fa-link"></i></a><a href="#OK-本文到此结束" class="headerlink" title="OK 本文到此结束"></a>OK 本文到此结束</h4>      ]]></content>
    
    
    <summary type="html">&lt;p&gt;Redis提供了发布订阅功能，跟消息中间件是类似的，可以用于消息的传输，Redis提供了一组命令可以让开发者实现“发布/订阅”模式 (publish/subscribe) ，该模式同样可以实现进程间的消息传递。&lt;br&gt;它的实现原理是发布/订阅模式包含两种角色，分别是发布者和订阅者。订阅者可以订阅一个或多个频道，而发布者可以向指定的 频道发送消息，所有订阅此频道的订阅者都会收到该消息。&lt;/p&gt;</summary>
    
    
    
    
    <category term="redis" scheme="http://www.hr915.xyz/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>axios封装</title>
    <link href="http://www.hr915.xyz/2018/07/17/axios%E5%B0%81%E8%A3%85/"/>
    <id>http://www.hr915.xyz/2018/07/17/axios%E5%B0%81%E8%A3%85/</id>
    <published>2018-07-17T12:46:25.000Z</published>
    <updated>2021-02-02T06:07:30.619Z</updated>
    
    <content type="html"><![CDATA[<p>在vue项目中，和后台交互获取数据这块，我们通常使用的是axios库，它是基于promise的http库，可运行在浏览器端和node.js中。<br>他有很多优秀的特性，例如拦截请求和响应、取消请求、转换json、客户端防御CSRF等。<br>axios文档：<span class="exturl"><a class="exturl__link" href="https://www.npmjs.com/package/axios">https://www.npmjs.com/package/axios</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><a id="more"></a>        <h4 id="安装">          <a href="#安装" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装" class="headerlink" title="安装"></a>安装</h4>      <figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></tbody></table></div></figure>        <h4 id="引入">          <a href="#引入" class="heading-link"><i class="fas fa-link"></i></a><a href="#引入" class="headerlink" title="引入"></a>引入</h4>      <p>通常我们会在src中，新建一个http文件夹，里边新建index.js和api.js文件，index.js文件用来封装我们的axios，api.js用来统一管理我们的接口</p><hr><p>我们需要在index.js中做如下操作：</p><ul><li>首先需要引入axios</li></ul><figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span><br><span class="line"><span class="comment">// 设置默认请求地址</span></span><br><span class="line">axios.defaults.baseURL = <span class="string">'http://127.0.0.1:8000/'</span></span><br><span class="line"><span class="comment">// 设置请求超时时限</span></span><br><span class="line">axios.defaults.timeout = <span class="number">10000</span></span><br></pre></td></tr></tbody></table></div></figure><ul><li><p>请求拦截<br>我们在发送请求前可以进行一个请求的拦截，为什么要拦截呢，我们拦截请求是用来做什么的呢？<br>比如，有些请求是需要用户登录之后才能访问的，或者post请求的时候，我们需要序列化我们提交的数据。<br>这时候，我们可以在请求被发送之前进行一个拦截，从而进行我们想要的操作。</p><figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求拦截器 当请求被发送之前进行我们想要的操作</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> {</span><br><span class="line">  <span class="comment">// 从localStorage中获取token</span></span><br><span class="line">  <span class="keyword">let</span> token = <span class="built_in">localStorage</span>.getItem(<span class="string">'token'</span>);</span><br><span class="line">  <span class="comment">// 如果有token, 就把token设置到请求头中Authorization字段中</span></span><br><span class="line">  <span class="keyword">if</span> (token) {</span><br><span class="line">    axios.defaults.headers[<span class="string">'Authorization'</span>] = token</span><br><span class="line">  }</span><br><span class="line">  <span class="comment">// token &amp;&amp; (config.headers.Authorization = token);</span></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">}, <span class="function"><span class="params">error</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></div></figure></li><li><p>响应拦截<br>响应拦截器很好理解，就是服务器返回给我们的数据，我们在拿到之前可以对他进行一些处理。<br>例如下面的思想：如果后台返回的状态码是200，则正常返回数据，否则的根据错误的状态码类型进行一些我们需要的错误，<br>其实这里主要就是进行了错误的统一处理和没登录或登录过期后调整登录页的一个操作。</p><figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 响应拦截器（当后端返回数据的时候进行拦截）</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="params">response</span> =&gt;</span> {</span><br><span class="line">  <span class="comment">// 当响应码是 2xx 的情况, 进入这里</span></span><br><span class="line">  <span class="comment">// debugger</span></span><br><span class="line">  <span class="keyword">return</span> response.data;</span><br><span class="line">}, <span class="function"><span class="params">error</span> =&gt;</span> {</span><br><span class="line">  <span class="built_in">console</span>.log(error.response)</span><br><span class="line">  <span class="comment">// 当响应码不是 2xx 的情况, 进入这里</span></span><br><span class="line">  <span class="comment">// debugger</span></span><br><span class="line">  <span class="keyword">return</span> error</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></div></figure></li><li><p>根据上面封装好的axios对象，封装 get、post、put、delete请求</p><ul><li>封装get方法,对应get请求<figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url, params, headers</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">    axios.get(url, {params, headers}).then(<span class="function"><span class="params">res</span> =&gt;</span> {</span><br><span class="line">      resolve(res)</span><br><span class="line">    }).catch(<span class="function"><span class="params">err</span> =&gt;</span> {</span><br><span class="line">      reject(err)</span><br><span class="line">    })</span><br><span class="line">  })</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></div></figure></li><li>封装post方法,对应post请求<figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">url, params</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">    axios.post(url, params).then(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">      resolve(res)</span><br><span class="line">    }).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> {</span><br><span class="line">      <span class="comment">// debugger</span></span><br><span class="line">      reject(err)</span><br><span class="line">    })</span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure></li><li>封装put方法,对应put请求<figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">put</span>(<span class="params">url, params, headers</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">    axios.put(url, params, headers).then(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">      resolve(res)</span><br><span class="line">    }).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> {</span><br><span class="line">      <span class="comment">// debugger</span></span><br><span class="line">      reject(err)</span><br><span class="line">    })</span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure></li><li>封装delete方法,对应delete请求<figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">del</span>(<span class="params">url, params, headers</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">    axios.delete(url, {<span class="attr">data</span>: params, headers}).then(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">      resolve(res)</span><br><span class="line">    }).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> {</span><br><span class="line">      <span class="comment">// debugger</span></span><br><span class="line">      reject(err)</span><br><span class="line">    })</span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure></li></ul></li></ul><hr>        <h4 id="到这里axios的封装基本就完成了，下面还有api的统一管理">          <a href="#到这里axios的封装基本就完成了，下面还有api的统一管理" class="heading-link"><i class="fas fa-link"></i></a><a href="#到这里axios的封装基本就完成了，下面还有api的统一管理" class="headerlink" title="到这里axios的封装基本就完成了，下面还有api的统一管理"></a>到这里axios的封装基本就完成了，下面还有api的统一管理</h4>      <ul><li>首先在api.js里面导入我们封装的方法<figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> {get, post, put, del} <span class="keyword">from</span> <span class="string">'./index'</span></span><br></pre></td></tr></tbody></table></div></figure></li><li>现在比如我们要注册一个账号，是post请求,我们可以再api中这样封装<figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> signUp = <span class="function"><span class="params">parameter</span> =&gt;</span> {</span><br><span class="line">  <span class="comment">// 注册</span></span><br><span class="line">  <span class="keyword">return</span> post(</span><br><span class="line">    <span class="comment">// baseURL后拼接的路由 </span></span><br><span class="line">    <span class="string">'signup/'</span>,</span><br><span class="line">    <span class="comment">// post携带的data数据</span></span><br><span class="line">    parameter</span><br><span class="line">  )</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure></li><li>然后我们可以在页面中这样调用我们的api接口<figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">signUp</span>(<span class="params"></span>)</span>{</span><br><span class="line">      <span class="keyword">let</span> params = {</span><br><span class="line">        <span class="string">"email"</span>: <span class="built_in">this</span>.signup_email,</span><br><span class="line">        <span class="string">"username"</span>: <span class="built_in">this</span>.signup_username,</span><br><span class="line">        <span class="string">"phone"</span>: <span class="built_in">this</span>.signup_phone,</span><br><span class="line">        <span class="string">'password'</span>: <span class="built_in">this</span>.signup_password,</span><br><span class="line">      }</span><br><span class="line">      signUp(params).then(<span class="function"><span class="params">res</span> =&gt;</span> {</span><br><span class="line">        <span class="keyword">if</span> (res.code == <span class="number">10004</span>) {</span><br><span class="line">          <span class="built_in">this</span>.signup_errors = res.msg  <span class="comment">//10004注册失败</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.signup_errors.email[<span class="number">0</span>])</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (res.code == <span class="number">10001</span>) {</span><br><span class="line">          <span class="built_in">this</span>.signup_errors = <span class="string">''</span>  <span class="comment">//初始化错误信息</span></span><br><span class="line">          <span class="built_in">this</span>.message = res.msg  <span class="comment">//10001注册成功</span></span><br><span class="line">        }</span><br><span class="line">      }).catch(<span class="function"><span class="params">error</span> =&gt;</span> {</span><br><span class="line">        <span class="built_in">console</span>.log(error)</span><br><span class="line">      })</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></div></figure></li><li>其他的api接口，就在api.js中继续往下面扩展就可以了,但是一定要注意写好注释        <h4 id="OK-这样一个axios封装就做好啦">          <a href="#OK-这样一个axios封装就做好啦" class="heading-link"><i class="fas fa-link"></i></a><a href="#OK-这样一个axios封装就做好啦" class="headerlink" title="OK 这样一个axios封装就做好啦"></a>OK 这样一个axios封装就做好啦</h4>      </li></ul><p>vue-git地址：<span class="exturl"><a class="exturl__link" href="https://gitee.com/before-l/vue-project.git">https://gitee.com/before-l/vue-project.git</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在vue项目中，和后台交互获取数据这块，我们通常使用的是axios库，它是基于promise的http库，可运行在浏览器端和node.js中。&lt;br&gt;他有很多优秀的特性，例如拦截请求和响应、取消请求、转换json、客户端防御CSRF等。&lt;br&gt;axios文档：&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot; href=&quot;https://www.npmjs.com/package/axios&quot;&gt;https://www.npmjs.com/package/axios&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="axios" scheme="http://www.hr915.xyz/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>celery异步框架</title>
    <link href="http://www.hr915.xyz/2018/07/16/celery%E5%BC%82%E6%AD%A5%E6%A1%86%E6%9E%B6/"/>
    <id>http://www.hr915.xyz/2018/07/16/celery%E5%BC%82%E6%AD%A5%E6%A1%86%E6%9E%B6/</id>
    <published>2018-07-16T12:46:25.000Z</published>
    <updated>2021-02-02T06:07:30.630Z</updated>
    
    <content type="html"><![CDATA[<p>Celery是一个简单、灵活且可靠的，处理大量消息的<strong>分布式系统</strong>。它专注于实时处理的异步任务队列，同时也支持任务调度。<br>Celery官方文档中文版：<span class="exturl"><a class="exturl__link" href="http://docs.jinkan.org/docs/celery/">http://docs.jinkan.org/docs/celery/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><a id="more"></a>        <h4 id="1-Celery简介">          <a href="#1-Celery简介" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-Celery简介" class="headerlink" title="1.Celery简介"></a>1.Celery简介</h4>      <p>我们通常使用Celery来实现异步任务（async task）和定时任务（Celery Beat）比如发邮件<br>Celery的架构由三部分组成，消息中间件（message broker），任务执行单元（worker）和任务执行结果存储（task result store）组成<br>附上架构图：<img src="/2018/07/16/celery%E5%BC%82%E6%AD%A5%E6%A1%86%E6%9E%B6/01.png" alt="Celery架构图"></p><p>由此架构图得知Celery主要包含以下几个<strong>模块</strong>：</p><ul><li><p>任务模块 Task<br>包含异步任务和定时任务。其中，异步任务通常在业务逻辑中被触发并发往任务队列，而定时任务由 Celery Beat 进程周期性地将任务发往任务队列。</p></li><li><p>消息中间件 Broker<br>Broker，即为任务调度队列，接收任务生产者发来的消息（即任务），将任务存入队列。Celery 本身不提供队列服务，官方推荐使用 RabbitMQ 和 Redis 等。</p></li><li><p>任务执行单元 Worker<br>Worker 是执行任务的处理单元，它实时监控消息队列，获取队列中调度的任务，并执行它。</p></li><li><p>任务结果存储 Backend<br>Backend 用于存储任务的执行结果，以供查询。同消息中间件一样，存储也可使用 RabbitMQ, redis 和 MongoDB 等。</p></li></ul>        <h6 id="Celery优点">          <a href="#Celery优点" class="heading-link"><i class="fas fa-link"></i></a><a href="#Celery优点" class="headerlink" title="Celery优点"></a>Celery优点</h6>      <ul><li>简单：celery的 配置和使用还是比较简单的, 非常容易使用和维护和不需要配置文件</li><li>高可用：当任务执行失败或执行过程中发生连接中断，celery 会自动尝试重新执行任务</li><li>如果连接丢失或发生故障，worker和client 将自动重试，并且一些代理通过主/主或主/副本复制方式支持HA。</li><li>快速：一个单进程的celery每分钟可处理上百万个任务</li><li>灵活： 几乎celery的各个组件都可以被扩展及自定制</li></ul>        <h4 id="2-Celery的使用">          <a href="#2-Celery的使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-Celery的使用" class="headerlink" title="2.Celery的使用"></a>2.Celery的使用</h4>              <h6 id="创建Django项目，">          <a href="#创建Django项目，" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建Django项目，" class="headerlink" title="创建Django项目，"></a>创建Django项目，</h6>      <p>目录如下:<br><img src="/2018/07/16/celery%E5%BC%82%E6%AD%A5%E6%A1%86%E6%9E%B6/02.png" alt="Django目录"></p><ul><li>安装<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 安装django-celery-results</span><br><span class="line">pip install django-celery-results</span><br><span class="line"># 安装Redis</span><br><span class="line">pip install redis</span><br></pre></td></tr></tbody></table></div></figure></li><li>在setting文件中配置<figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ····</span><br><span class="line">    <span class="string">'django_celery_results'</span></span><br><span class="line">    ····</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></div></figure></li><li>在setting同级目录下创建celery.py文件<figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># celery.py文件中</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为celery设置环境变量</span></span><br><span class="line">os.environ.setdefault(<span class="string">'DJANGO_SETTINGS_MODULE'</span>, <span class="string">'DjCelery.settings'</span>)</span><br><span class="line"><span class="comment"># 首先你需要一个 Celery 实例，称为 Celery 应用或直接简称应用</span></span><br><span class="line">app = Celery(<span class="string">'DjCelery'</span>)</span><br><span class="line"><span class="comment">#  从单独的配置模块中加载配置，导入celery配置</span></span><br><span class="line">app.config_from_object(<span class="string">'django.conf:settings'</span>)</span><br><span class="line">app.conf.enable_utc = <span class="literal">False</span></span><br><span class="line"><span class="comment"># 时区</span></span><br><span class="line">app.conf.timezone = <span class="string">"Asia/Shanghai"</span></span><br><span class="line"><span class="comment"># 自动搜索任务</span></span><br><span class="line">app.autodiscover_tasks()</span><br></pre></td></tr></tbody></table></div></figure></li><li>在setting同级目录__init__文件中<figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> app <span class="keyword">as</span> celery_app</span><br><span class="line"></span><br><span class="line">__all__ = (<span class="string">'celery_app'</span>,)</span><br></pre></td></tr></tbody></table></div></figure></li><li>在app中创建tasks.py文件<figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> shared_task</span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br></pre></td></tr></tbody></table></div></figure></li><li>在views.py文件中调用它<figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> celery_app <span class="keyword">import</span> tasks</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 例如我们希望在用户发出request后异步执行该task, 马上返回response,</span></span><br><span class="line">        <span class="comment"># 从而不阻塞该request, 使用户有一个流畅的访问过程.</span></span><br><span class="line">        <span class="comment"># 那么, 我们可以使用.delay</span></span><br><span class="line">        <span class="comment"># delay是注册为celery异步任务的关键点</span></span><br><span class="line">        res = tasks.add.delay(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 返回执行结果和执行结果ID号</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse({<span class="string">'status'</span>: <span class="string">'successful'</span>, <span class="string">'task_id'</span>: res.task_id})</span><br></pre></td></tr></tbody></table></div></figure></li><li>最后使用celery命令启动work<figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 注意：需要切换目录到执行文件的目录下，否则会报错</span><br><span class="line">cd celery_app</span><br><span class="line">celery -A tasks worker  --loglevel=info</span><br></pre></td></tr></tbody></table></div></figure>        <h4 id="3-总结：">          <a href="#3-总结：" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-总结：" class="headerlink" title="3. 总结："></a>3. 总结：</h4>      本文简单介绍了 celery 的基本的功能 , 以及celery 能够处理的任务特点,以及可以和 flask 结合起来使用. 简单分析了 celery 的工作机制 . 当然 如果想要深入了解 celery,可以 参考 celery的官方文档.</li></ul><p>django-git地址：<span class="exturl"><a class="exturl__link" href="https://gitee.com/before-l/celery-demo.git">https://gitee.com/before-l/celery-demo.git</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>好文：<span class="exturl"><a class="exturl__link" href="https://blog.csdn.net/u010339879/article/details/97691231">https://blog.csdn.net/u010339879/article/details/97691231</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Celery是一个简单、灵活且可靠的，处理大量消息的&lt;strong&gt;分布式系统&lt;/strong&gt;。它专注于实时处理的异步任务队列，同时也支持任务调度。&lt;br&gt;Celery官方文档中文版：&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot; href=&quot;http://docs.jinkan.org/docs/celery/&quot;&gt;http://docs.jinkan.org/docs/celery/&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="django,celery" scheme="http://www.hr915.xyz/tags/django-celery/"/>
    
  </entry>
  
  <entry>
    <title>三方支付</title>
    <link href="http://www.hr915.xyz/2018/07/15/%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98/"/>
    <id>http://www.hr915.xyz/2018/07/15/%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98/</id>
    <published>2018-07-15T12:46:25.000Z</published>
    <updated>2021-02-05T07:17:42.277Z</updated>
    
    <content type="html"><![CDATA[<p>三方支付流程：</p><pre><code>首先进入支付宝平台，点击开发中心-》研发服务获得沙盒的appid以及商户公钥和支付宝公钥然后利用秘钥生成软件生成私钥和公钥建立keys文件夹，  将私钥和公钥文件放入keys加入头部和尾部代码最后用支付宝公钥替换公钥文件</code></pre><a id="more"></a><p>支付宝开放平台：<span class="exturl"><a class="exturl__link" href="https://open.alipay.com/platform/home.htm">https://open.alipay.com/platform/home.htm</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h4 id="1-支付宝沙箱商家应用RSA2密钥生成">          <a href="#1-支付宝沙箱商家应用RSA2密钥生成" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-支付宝沙箱商家应用RSA2密钥生成" class="headerlink" title="1.支付宝沙箱商家应用RSA2密钥生成"></a>1.支付宝沙箱商家应用RSA2密钥生成</h4>      <p>可以使用支付宝开发助手来实现密钥的生成<br>具体步骤查看官方网站：<span class="exturl"><a class="exturl__link" href="https://opendocs.alipay.com/open/291/105971">https://opendocs.alipay.com/open/291/105971</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>同时配置到沙箱</p>        <h4 id="2-安装支付宝SDK模块">          <a href="#2-安装支付宝SDK模块" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-安装支付宝SDK模块" class="headerlink" title="2.安装支付宝SDK模块"></a>2.安装支付宝SDK模块</h4>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 支付宝的sdk已经集成为一个python模块，只需要安装模块进行开发。</span></span><br><span class="line">pip install pycryptodome</span><br><span class="line"></span><br><span class="line">pip install python-alipay-sdk --upgrade</span><br></pre></td></tr></tbody></table></div></figure>        <h4 id="3-安装完成-测试支付功能">          <a href="#3-安装完成-测试支付功能" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-安装完成-测试支付功能" class="headerlink" title="3.安装完成 测试支付功能"></a>3.安装完成 测试支付功能</h4>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> alipay <span class="keyword">import</span> AliPay</span><br><span class="line"></span><br><span class="line"><span class="comment"># 公钥</span></span><br><span class="line">alipay_public_key_string = <span class="string">"""-----BEGIN PUBLIC KEY-----</span></span><br><span class="line"><span class="string">此处填写公钥</span></span><br><span class="line"><span class="string">-----END PUBLIC KEY-----"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 私钥</span></span><br><span class="line">app_private_key_string = <span class="string">"""-----BEGIN RSA PRIVATE KEY-----</span></span><br><span class="line"><span class="string">此处填写私钥</span></span><br><span class="line"><span class="string">-----END RSA PRIVATE KEY-----"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化支付请求</span></span><br><span class="line">alipay = AliPay(</span><br><span class="line">    appid = <span class="string">"xxxxxxxxx"</span>,     <span class="comment"># APPID</span></span><br><span class="line">    app_notify_url = <span class="literal">None</span>,</span><br><span class="line">    app_private_key_string = app_private_key_string,</span><br><span class="line">    alipay_public_key_string = alipay_public_key_string,</span><br><span class="line">    sign_type = <span class="string">"RSA2"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发起支付请求</span></span><br><span class="line">order_string = alipay.api_alipay_trade_page_pay(</span><br><span class="line">    out_trade_no = <span class="string">'10001'</span>, <span class="comment">#订单号</span></span><br><span class="line">    total_amount= <span class="built_in">str</span>(<span class="number">10000</span>), <span class="comment">#支付金额</span></span><br><span class="line">    subject = <span class="string">'水果干果'</span>,</span><br><span class="line">    return_url=<span class="string">"http://127.0.0.1:8000/buyer/pr/"</span>,</span><br><span class="line">    <span class="comment"># 支付宝回调地址 </span></span><br><span class="line">    notify_url=<span class="string">"http://127.0.0.1:8000/buyer/pr/"</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(<span class="string">"https://openapi.alipaydev.com/gateway.do?"</span> + order_string)</span><br></pre></td></tr></tbody></table></div></figure>        <h4 id="4-最后附上流程图：">          <a href="#4-最后附上流程图：" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-最后附上流程图：" class="headerlink" title="4.最后附上流程图："></a>4.最后附上流程图：</h4>      <p><img src="/2018/07/15/%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98/01.png" alt="三方支付流程图"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;三方支付流程：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;首先进入支付宝平台，点击开发中心-》研发服务

获得沙盒的appid以及商户公钥和支付宝公钥

然后利用秘钥生成软件生成私钥和公钥

建立keys文件夹，  将私钥和公钥文件放入keys

加入头部和尾部代码

最后用支付宝公钥替换公钥文件&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    
    <category term="django" scheme="http://www.hr915.xyz/tags/django/"/>
    
    <category term="三方支付" scheme="http://www.hr915.xyz/tags/%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>微博三方登录</title>
    <link href="http://www.hr915.xyz/2018/07/14/%E5%BE%AE%E5%8D%9A%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/"/>
    <id>http://www.hr915.xyz/2018/07/14/%E5%BE%AE%E5%8D%9A%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/</id>
    <published>2018-07-14T12:46:25.000Z</published>
    <updated>2021-02-02T06:08:05.779Z</updated>
    
    <content type="html"><![CDATA[<p>三方登录流程：</p><pre><code>   理解第三方登录的流程   用户向后端发起请求，我要用微博进行登录   我们的前端凑一个url让用户跳转到第三方应用的url(微博的登录页面)   用户在该界面点击输入用户名密码之后，点击授权。   微博有个回调url指向我们的后端。   我们的后端就可以获取到用户的基本信息等。</code></pre><a id="more"></a><p>微博开放平台网址：<span class="exturl"><a class="exturl__link" href="https://open.weibo.com/?sudaref=www.baidu.com">https://open.weibo.com/?sudaref=www.baidu.com</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>微博三方登录的指导思想：OAuth2.0授权认证</p><p>步骤：</p>        <h4 id="1-创建应用">          <a href="#1-创建应用" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-创建应用" class="headerlink" title="1.创建应用"></a>1.创建应用</h4>      <p><img src="/2018/07/14/%E5%BE%AE%E5%8D%9A%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/01.png" alt="创建应用"></p>        <h4 id="2-设置回调地址">          <a href="#2-设置回调地址" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-设置回调地址" class="headerlink" title="2.设置回调地址"></a>2.设置回调地址</h4>      <p><img src="/2018/07/14/%E5%BE%AE%E5%8D%9A%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/02.png" alt="设置回调地址"></p>        <h4 id="3-请求用户授权token">          <a href="#3-请求用户授权token" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-请求用户授权token" class="headerlink" title="3. 请求用户授权token"></a>3. 请求用户授权token</h4>      <p><img src="/2018/07/14/%E5%BE%AE%E5%8D%9A%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/03.png" alt="请求用户授权Token"><br><img src="/2018/07/14/%E5%BE%AE%E5%8D%9A%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/04.png" alt="请求用户授权Token"><br><img src="/2018/07/14/%E5%BE%AE%E5%8D%9A%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/05.png" alt="请求用户授权Token"></p><ul><li>在前端写一个超链接用来向微博发送请求<figure class="highlight html"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://api.weibo.com/oauth2/authorize?client_id=xxxxxxxx&amp;redirect_uri=xxxxxxxx"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../../assets/240.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></div></figure>        <h4 id="4-获取授权过的Access-Token">          <a href="#4-获取授权过的Access-Token" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-获取授权过的Access-Token" class="headerlink" title="4.获取授权过的Access Token"></a>4.获取授权过的Access Token</h4>      <img src="/2018/07/14/%E5%BE%AE%E5%8D%9A%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/06.png" alt="获取授权过的Acccess Token"><br><img src="/2018/07/14/%E5%BE%AE%E5%8D%9A%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/07.png" alt="获取授权过的Acccess Token"></li></ul>        <h4 id="5-在后端写一个接口用来进行网络请求-使用requests三方模块">          <a href="#5-在后端写一个接口用来进行网络请求-使用requests三方模块" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-在后端写一个接口用来进行网络请求-使用requests三方模块" class="headerlink" title="5.在后端写一个接口用来进行网络请求(使用requests三方模块)"></a>5.在后端写一个接口用来进行网络请求(使用requests三方模块)</h4>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeiboView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        code = request.GET.get(<span class="string">"code"</span>)</span><br><span class="line">        <span class="comment"># 通过python进行网络请求 requests</span></span><br><span class="line">        r = requests.post(<span class="string">"https://api.weibo.com/oauth2/access_token"</span>, {</span><br><span class="line">            <span class="comment"># App Key</span></span><br><span class="line">            <span class="string">"client_id"</span>: xxxx,</span><br><span class="line">            <span class="comment"># 密钥  App Secret</span></span><br><span class="line">            <span class="string">"client_secret"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="comment"># 请求的类型</span></span><br><span class="line">            <span class="string">"grant_type"</span>: <span class="string">"authorization_code"</span>,</span><br><span class="line">            <span class="comment"># 调用authorize获得的code值。</span></span><br><span class="line">            <span class="string">"code"</span>: code,</span><br><span class="line">            <span class="comment"># 回调地址</span></span><br><span class="line">            <span class="string">"redirect_uri"</span>: <span class="string">"http://127.0.0.1:8000/weibo/"</span></span><br><span class="line">        })</span><br><span class="line">        access_token = r.json()[<span class="string">'access_token'</span>]</span><br><span class="line">        uid = r.json()[<span class="string">'uid'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 先判断微博账号是否登录过，没有登录过则把账号添加到第三方表中，登陆过则返回登录信息</span></span><br><span class="line">        open_user = OpenUser.objects.<span class="built_in">filter</span>(uid=uid).first()</span><br><span class="line">        <span class="keyword">if</span> open_user:</span><br><span class="line">            <span class="comment"># 已经登录过了</span></span><br><span class="line">            user = open_user.user</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            user = User.objects.create(username=uid, password=uid)</span><br><span class="line">            <span class="comment"># 没有登录</span></span><br><span class="line">            OpenUser.objects.create(uid=uid, cate=<span class="string">"微博"</span>, user=user)</span><br><span class="line">        <span class="comment"># 生成令牌</span></span><br><span class="line">        token = jwt.encode({<span class="string">"uid"</span>:user.<span class="built_in">id</span>},<span class="string">'123'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 跳转到前端首页</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"登录成功,点击跳转&lt;a href='http://127.0.0.1:8080/#/index?token=%s&amp;username=%s'&gt;跳转&lt;/a&gt;"</span>%(token.decode(),uid))</span><br></pre></td></tr></tbody></table></div></figure>        <h4 id="6-OK-这样一个微博三方登录就做好啦">          <a href="#6-OK-这样一个微博三方登录就做好啦" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-OK-这样一个微博三方登录就做好啦" class="headerlink" title="6.OK 这样一个微博三方登录就做好啦"></a>6.OK 这样一个微博三方登录就做好啦</h4>              <h5 id="vue-git地址：https-gitee-com-before-l-annual-leave-vue-git">          <a href="#vue-git地址：https-gitee-com-before-l-annual-leave-vue-git" class="heading-link"><i class="fas fa-link"></i></a><a href="#vue-git地址：https-gitee-com-before-l-annual-leave-vue-git" class="headerlink" title="vue-git地址：https://gitee.com/before-l/annual-leave-vue.git"></a>vue-git地址：<span class="exturl"><a class="exturl__link" href="https://gitee.com/before-l/annual-leave-vue.git">https://gitee.com/before-l/annual-leave-vue.git</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h5>              <h5 id="django-git地址-https-gitee-com-before-l-annual-leave-git">          <a href="#django-git地址-https-gitee-com-before-l-annual-leave-git" class="heading-link"><i class="fas fa-link"></i></a><a href="#django-git地址-https-gitee-com-before-l-annual-leave-git" class="headerlink" title="django-git地址:https://gitee.com/before-l/annual-leave.git"></a>django-git地址:<span class="exturl"><a class="exturl__link" href="https://gitee.com/before-l/annual-leave.git">https://gitee.com/before-l/annual-leave.git</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h5>      ]]></content>
    
    
    <summary type="html">&lt;p&gt;三方登录流程：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   理解第三方登录的流程

   用户向后端发起请求，我要用微博进行登录

   我们的前端凑一个url让用户跳转到第三方应用的url(微博的登录页面)

   用户在该界面点击输入用户名密码之后，点击授权。

   微博有个回调url指向我们的后端。

   我们的后端就可以获取到用户的基本信息等。&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    
    <category term="django,三方登录" scheme="http://www.hr915.xyz/tags/django-%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>VUE父子组件</title>
    <link href="http://www.hr915.xyz/2018/07/13/vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6/"/>
    <id>http://www.hr915.xyz/2018/07/13/vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6/</id>
    <published>2018-07-13T12:46:25.000Z</published>
    <updated>2021-01-31T07:49:32.997Z</updated>
    
    <content type="html"><![CDATA[<h4 id="VUE父子组件使用">          <a href="#VUE父子组件使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#VUE父子组件使用" class="headerlink" title="VUE父子组件使用"></a>VUE父子组件使用</h4>      <p>在vue组件通信中其中最常见通信方式就是父子组件之中的通信，而父子组件的设定方式在不同情况下又各有不同。<br>最常见的就是父组件为控制组件，子组件为视图组件。<br>父组件传递数据给子组件使用，遇到业务逻辑操作时子组件触发父组件的自定义事件。<br>但是，无论哪种组织方式父子组件的通信方式都是大同小异</p><a id="more"></a>        <h4 id="父组件向子组件传参">          <a href="#父组件向子组件传参" class="heading-link"><i class="fas fa-link"></i></a><a href="#父组件向子组件传参" class="headerlink" title="父组件向子组件传参"></a>父组件向子组件传参</h4>      <p><strong>通过 [props]传递数据 (推荐)</strong></p><p>父子通讯中最常见的数据传递方式就是通过props传递数据，就好像方法的传参一样，父组件调用子组件并传入数据，子组件接受到父组件传递的数据进行验证<br>使用props 可以是数组或对象，用于接收来自父组件的数据。<br>props 可以是简单的数组，或者使用对象作为替代，对象允许配置高级选项，如类型检测、自定义校验和设置默认值prop 的定义应该尽量详细，至少需要指定其类型</p><figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 父组件  Father --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Son :parentMessage="parentMessage"&gt;&lt;/Son&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Son from "./Son";</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  components: {</span><br><span class="line">    Son</span><br><span class="line">  },</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      parentMessage: "我是来自父组件的消息，借用一下子组件的地方渲染一下"</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 子组件 Son  --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;你好哇&lt;/h1&gt;</span><br><span class="line">    &lt;span&gt;{{ parentMessage }}&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  mounted() {</span><br><span class="line">    console.log(this.parentMessage)</span><br><span class="line">  },</span><br><span class="line">  //第一种方法  </span><br><span class="line">  // props: ['parentMessage']</span><br><span class="line">  //第二种方法</span><br><span class="line">    props: {</span><br><span class="line">      parentMessage: {</span><br><span class="line">        type: String,</span><br><span class="line">        default: '子组件默认显示的信息',</span><br><span class="line">        require: true</span><br><span class="line">      }</span><br><span class="line">    }  </span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></div></figure><p>效果：<br><img src="/2018/07/13/vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6/01.png" alt="父子组件传参"></p>        <h4 id="子组件向父组件传参">          <a href="#子组件向父组件传参" class="heading-link"><i class="fas fa-link"></i></a><a href="#子组件向父组件传参" class="headerlink" title="子组件向父组件传参"></a>子组件向父组件传参</h4>      <p><strong>通过 [$emit]传递数据 (推荐)</strong><br>通过 $emit 传递父组件数据与父组件到子组件通讯中的$on配套使用，可以向父组件中触发的方法传递参数供父组件使用。</p><figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 父组件  Father --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;h1&gt;{{data}}&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Son @event="change"&gt;&lt;/Son&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Son from "./Son";</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  components: {</span><br><span class="line">    Son</span><br><span class="line">  },</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      data:"我是父组件"</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">    methods: {</span><br><span class="line">      change(event) {</span><br><span class="line">        this.data = event</span><br><span class="line">          console.log(event)</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></tbody></table></div></figure><figure class="highlight plain"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 子组件 Son  --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button @click="toFather"&gt;向父组件传值&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  data(){</span><br><span class="line">    return{</span><br><span class="line">      data:"我是子组件"</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  methods:{</span><br><span class="line">      toFather(){</span><br><span class="line">        this.$emit('event', this.data)</span><br><span class="line">      }</span><br><span class="line">  },</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></tbody></table></div></figure><p>效果：<br><img src="/2018/07/13/vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6/02.png" alt="子父组件传参"></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;VUE父子组件使用&quot;&gt;
          &lt;a href=&quot;#VUE父子组件使用&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#VUE父子组件使用&quot; class=&quot;headerlink&quot; title=&quot;VUE父子组件使用&quot;&gt;&lt;/a&gt;VUE父子组件使用&lt;/h4&gt;
      &lt;p&gt;在vue组件通信中其中最常见通信方式就是父子组件之中的通信，而父子组件的设定方式在不同情况下又各有不同。&lt;br&gt;最常见的就是父组件为控制组件，子组件为视图组件。&lt;br&gt;父组件传递数据给子组件使用，遇到业务逻辑操作时子组件触发父组件的自定义事件。&lt;br&gt;但是，无论哪种组织方式父子组件的通信方式都是大同小异&lt;/p&gt;</summary>
    
    
    
    
    <category term="vue,组件" scheme="http://www.hr915.xyz/tags/vue-%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>VUE路由钩子</title>
    <link href="http://www.hr915.xyz/2018/07/12/vue_%E8%B7%AF%E7%94%B1%E9%92%A9%E5%AD%90/"/>
    <id>http://www.hr915.xyz/2018/07/12/vue_%E8%B7%AF%E7%94%B1%E9%92%A9%E5%AD%90/</id>
    <published>2018-07-12T12:46:25.000Z</published>
    <updated>2021-02-05T08:57:04.530Z</updated>
    
    <content type="html"><![CDATA[<p>描述：通常我们在跳转页面时会遇到各种各样的要求，比如没有登录不能查看，比如跳转需要验证，各种各样的要求。如果分开写代码的话就会显得很乱，代码很繁重，此时就用到了我们的路由钩子<br>路由钩子主要是给使用者在路由发生变化时进行一些特殊的处理而定义的</p><a id="more"></a>        <h4 id="路由钩子主要分三种">          <a href="#路由钩子主要分三种" class="heading-link"><i class="fas fa-link"></i></a><a href="#路由钩子主要分三种" class="headerlink" title="路由钩子主要分三种"></a><strong>路由钩子</strong>主要分三种</h4>      <p>全局路由钩子：beforeEach<br>单个路由钩子：beforeEnter<br>路由组件钩子：beforeEachEnter</p>        <h4 id="三种路由钩子中都涉及到了三个参数">          <a href="#三种路由钩子中都涉及到了三个参数" class="heading-link"><i class="fas fa-link"></i></a><a href="#三种路由钩子中都涉及到了三个参数" class="headerlink" title="三种路由钩子中都涉及到了三个参数:"></a>三种路由钩子中都涉及到了三个参数:</h4>      <p>to: Route: 即将要进入的目标 路由对象<br>from: Route: 当前导航正要离开的路由<br>next: Function: 通过这个方法来调用下一个钩子函数</p>        <h4 id="使用：">          <a href="#使用：" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用：" class="headerlink" title="使用："></a>使用：</h4>      <p>beforeEach(跳转前)  &amp;&amp;  afterEach(跳转后)<br>需要通过main.js配置</p><hr><figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> {</span><br><span class="line">    <span class="comment">//会在任意路由跳转前执行，next一定要记着执行，不然路由不能跳转了</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"我要跳转啦"</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(to,<span class="keyword">from</span>)</span><br><span class="line">  <span class="comment">//调用下一个钩子函数</span></span><br><span class="line">  next()</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> {</span><br><span class="line">    <span class="comment">//会在任意路由跳转后执行</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'我跳过来了'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></div></figure><p>beforeEnter(写在router-index.js里面)</p><hr><figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router({</span><br><span class="line">  routes: [</span><br><span class="line">    {</span><br><span class="line">      path: <span class="string">'/index'</span>,</span><br><span class="line">      name: <span class="string">'Index'</span>,</span><br><span class="line">      component: Index,</span><br><span class="line">      <span class="function"><span class="title">beforeEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span> {</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我是只守护Index的beforeEnter"</span>)</span><br><span class="line">        next()</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></div></figure><p>beforeRouteEnter(到达之后)   &amp;&amp;   beforeRouteUpdate(到达子路由)   &amp;&amp;   beforeRouteLeave(离开之前)<br>写在具体页面里</p><hr><figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span> {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"****************Test1****我来啦**************"</span>);</span><br><span class="line">  next(<span class="function"><span class="params">vm</span> =&gt;</span> {</span><br><span class="line">    <span class="comment">//因为当钩子执行前，组件实例还没被创建</span></span><br><span class="line">    <span class="comment">// vm 就是当前组件的实例相当于上面的 this，所以在 next 方法里你就可以把 vm 当 this 来用了。</span></span><br><span class="line">    <span class="built_in">console</span>.log(vm);<span class="comment">//当前组件的实例</span></span><br><span class="line">  });</span><br><span class="line">},</span><br><span class="line"><span class="function"><span class="title">beforeRouteUpdate</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span> {</span><br><span class="line">  <span class="comment">//在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">  <span class="comment">//对于一个带有动态参数的路径 /good/:id，在 /good/1 和 /good/2 之间跳转的时候，</span></span><br><span class="line">  <span class="comment">// 由于会渲染同样的good组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">  <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//简单来说就是在跳转子路由的时候可以获取query和params</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"****************Test1*******Update***********"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>, <span class="string">'Update'</span>); <span class="comment">//当前组件实例</span></span><br><span class="line">  next();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="title">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span> {</span><br><span class="line">  <span class="comment">// 导航离开该组件的对应路由时调用</span></span><br><span class="line">  <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"****************Test1****我走啦**************"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>, <span class="string">'Leave'</span>); <span class="comment">//当前组件实例</span></span><br><span class="line">  next();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;描述：通常我们在跳转页面时会遇到各种各样的要求，比如没有登录不能查看，比如跳转需要验证，各种各样的要求。如果分开写代码的话就会显得很乱，代码很繁重，此时就用到了我们的路由钩子&lt;br&gt;路由钩子主要是给使用者在路由发生变化时进行一些特殊的处理而定义的&lt;/p&gt;</summary>
    
    
    
    
    <category term="vue" scheme="http://www.hr915.xyz/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>VUE拦截器</title>
    <link href="http://www.hr915.xyz/2018/07/11/vue%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>http://www.hr915.xyz/2018/07/11/vue%E6%8B%A6%E6%88%AA%E5%99%A8/</id>
    <published>2018-07-11T12:46:25.000Z</published>
    <updated>2021-01-31T07:49:32.991Z</updated>
    
    <content type="html"><![CDATA[<p>vue拦截器axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端,<br>他主要分为请求拦截器和响应拦截器…</p><a id="more"></a><p><strong>请求拦截器</strong>：就是我们在请求之前进行的一个操作比如说，我们可以在请求之前加一个loading框，在响应拦截后进行loading框的一个去除。</p><p><strong>响应拦截器</strong>：就是请求得到回应，我们可以做一个状态的拦截，比如说405，404等等状态吗，我们可以做一个拦截，然后在页面进行响应的展示</p><figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>{</span><br><span class="line">  <span class="comment">// 在发送请求之前做些什么,比如把token携带过去</span></span><br><span class="line">  <span class="keyword">let</span> token = <span class="built_in">localStorage</span>.getItem(<span class="string">'token'</span>);</span><br><span class="line">  <span class="comment">// 如果有token, 就可以进行操作</span></span><br><span class="line">  <span class="keyword">if</span> (token) {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"开始请求啦"</span>)</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">}, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>{</span><br><span class="line">  <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">});</span><br><span class="line"></span><br></pre></td></tr></tbody></table></div></figure><p>请求拦截器通常在用户身份认证的时候使用，便于携带用户的身份认证信息token之类的</p><figure class="highlight js"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 响应拦截器（当后端返回数据的时候进行拦截）</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="params">response</span> =&gt;</span> {</span><br><span class="line">  <span class="comment">// 当响应码是 2xx 的情况, 进入这里</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"请求成功，开始响应啦"</span>)</span><br><span class="line">  <span class="keyword">return</span> response.data;</span><br><span class="line">}, <span class="function"><span class="params">error</span> =&gt;</span> {</span><br><span class="line">  <span class="built_in">console</span>.log(error.response)</span><br><span class="line">  <span class="comment">// 当响应码不是 2xx 的情况, 进入这里</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"请求失败了哦"</span>)</span><br><span class="line">  <span class="keyword">return</span> error</span><br><span class="line">});</span><br><span class="line"></span><br></pre></td></tr></tbody></table></div></figure><p><strong>作用</strong>：</p><ul><li>比如config中的一些信息不符合服务器的要求，得及时拦截下来更改。</li><li>比如每次发送网络请求的时候，都希望在界面中显示一个动态加载的请求图标，就是一直在转圈圈，让用户知道当前页面正在加载数据，准备渲染视图。</li><li>比如某些网络请求（比如登录token）,必须携带一些特殊的信息。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;vue拦截器axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端,&lt;br&gt;他主要分为请求拦截器和响应拦截器…&lt;/p&gt;</summary>
    
    
    
    
    <category term="vue,Sjavascript" scheme="http://www.hr915.xyz/tags/vue-Sjavascript/"/>
    
  </entry>
  
</feed>
