<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>I hope you&#39;re here for me</title>
  
  <subtitle>欢迎来到Ran博客</subtitle>
  <link href="http://www.hr915.xyz/atom.xml" rel="self"/>
  
  <link href="http://www.hr915.xyz/"/>
  <updated>2021-01-30T09:55:19.804Z</updated>
  <id>http://www.hr915.xyz/</id>
  
  <author>
    <name>小刘同学</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>celery异步框架</title>
    <link href="http://www.hr915.xyz/2018/07/16/celery%E5%BC%82%E6%AD%A5%E6%A1%86%E6%9E%B6/"/>
    <id>http://www.hr915.xyz/2018/07/16/celery%E5%BC%82%E6%AD%A5%E6%A1%86%E6%9E%B6/</id>
    <published>2018-07-16T12:46:25.000Z</published>
    <updated>2021-01-30T09:55:19.804Z</updated>
    
    <content type="html"><![CDATA[<p>Celery是一个简单、灵活且可靠的，处理大量消息的<strong>分布式系统</strong>。它专注于实时处理的异步任务队列，同时也支持任务调度。<br>Celery官方文档中文版：<span class="exturl"><a class="exturl__link" href="http://docs.jinkan.org/docs/celery/">http://docs.jinkan.org/docs/celery/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><a id="more"></a>        <h4 id="1-Celery简介">          <a href="#1-Celery简介" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-Celery简介" class="headerlink" title="1.Celery简介"></a>1.Celery简介</h4>      <p>我们通常使用Celery来实现异步任务（async task）和定时任务（Celery Beat）比如发邮件<br>Celery的架构由三部分组成，消息中间件（message broker），任务执行单元（worker）和任务执行结果存储（task result store）组成<br>附上架构图：<img src="/2018/07/16/celery%E5%BC%82%E6%AD%A5%E6%A1%86%E6%9E%B6/01.png" alt="Celery架构图"></p><p>由此得知Celery主要包含以下几个<strong>模块</strong>：</p><ul><li><p>任务模块 Task<br>包含异步任务和定时任务。其中，异步任务通常在业务逻辑中被触发并发往任务队列，而定时任务由 Celery Beat 进程周期性地将任务发往任务队列。</p></li><li><p>消息中间件 Broker<br>Broker，即为任务调度队列，接收任务生产者发来的消息（即任务），将任务存入队列。Celery 本身不提供队列服务，官方推荐使用 RabbitMQ 和 Redis 等。</p></li><li><p>任务执行单元 Worker<br>Worker 是执行任务的处理单元，它实时监控消息队列，获取队列中调度的任务，并执行它。</p></li><li><p>任务结果存储 Backend<br>Backend 用于存储任务的执行结果，以供查询。同消息中间件一样，存储也可使用 RabbitMQ, redis 和 MongoDB 等。</p></li></ul>        <h6 id="Celery优点">          <a href="#Celery优点" class="heading-link"><i class="fas fa-link"></i></a><a href="#Celery优点" class="headerlink" title="Celery优点"></a>Celery优点</h6>      <ul><li>简单：celery的 配置和使用还是比较简单的, 非常容易使用和维护和不需要配置文件</li><li>高可用：当任务执行失败或执行过程中发生连接中断，celery 会自动尝试重新执行任务</li><li>如果连接丢失或发生故障，worker和client 将自动重试，并且一些代理通过主/主或主/副本复制方式支持HA。</li><li>快速：一个单进程的celery每分钟可处理上百万个任务</li><li>灵活： 几乎celery的各个组件都可以被扩展及自定制</li></ul>        <h4 id="2-Celery的使用">          <a href="#2-Celery的使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-Celery的使用" class="headerlink" title="2.Celery的使用"></a>2.Celery的使用</h4>              <h6 id="创建Django项目，">          <a href="#创建Django项目，" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建Django项目，" class="headerlink" title="创建Django项目，"></a>创建Django项目，</h6>      <p>目录如下:<br><img src="/2018/07/16/celery%E5%BC%82%E6%AD%A5%E6%A1%86%E6%9E%B6/02.png" alt="Django目录"></p><ul><li>安装<figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 安装django-celery-results</span><br><span class="line">pip install django-celery-results</span><br><span class="line"># 安装Redis</span><br><span class="line">pip install redis</span><br></pre></td></tr></table></div></figure></li><li>在setting文件中配置<figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ····</span><br><span class="line">    <span class="string">&#x27;django_celery_results&#x27;</span></span><br><span class="line">    ····</span><br><span class="line">]</span><br></pre></td></tr></table></div></figure></li><li>在setting同级目录下创建celery.py文件<figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># celery.py文件中</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为celery设置环境变量</span></span><br><span class="line">os.environ.setdefault(<span class="string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="string">&#x27;DjCelery.settings&#x27;</span>)</span><br><span class="line"><span class="comment"># 首先你需要一个 Celery 实例，称为 Celery 应用或直接简称应用</span></span><br><span class="line">app = Celery(<span class="string">&#x27;DjCelery&#x27;</span>)</span><br><span class="line"><span class="comment">#  从单独的配置模块中加载配置，导入celery配置</span></span><br><span class="line">app.config_from_object(<span class="string">&#x27;django.conf:settings&#x27;</span>)</span><br><span class="line">app.conf.enable_utc = <span class="literal">False</span></span><br><span class="line"><span class="comment"># 时区</span></span><br><span class="line">app.conf.timezone = <span class="string">&quot;Asia/Shanghai&quot;</span></span><br><span class="line"><span class="comment"># 自动搜索任务</span></span><br><span class="line">app.autodiscover_tasks()</span><br></pre></td></tr></table></div></figure></li><li>在setting同级目录__init__文件中<figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> app <span class="keyword">as</span> celery_app</span><br><span class="line"></span><br><span class="line">__all__ = (<span class="string">&#x27;celery_app&#x27;</span>,)</span><br></pre></td></tr></table></div></figure></li><li>在app中创建tasks.py文件<figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> shared_task</span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br></pre></td></tr></table></div></figure></li><li>在views.py文件中调用它<figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> celery_app <span class="keyword">import</span> tasks</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 例如我们希望在用户发出request后异步执行该task, 马上返回response,</span></span><br><span class="line">        <span class="comment"># 从而不阻塞该request, 使用户有一个流畅的访问过程.</span></span><br><span class="line">        <span class="comment"># 那么, 我们可以使用.delay</span></span><br><span class="line">        <span class="comment"># delay是注册为celery异步任务的关键点</span></span><br><span class="line">        res = tasks.add.delay(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 返回执行结果和执行结果ID号</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;status&#x27;</span>: <span class="string">&#x27;successful&#x27;</span>, <span class="string">&#x27;task_id&#x27;</span>: res.task_id&#125;)</span><br></pre></td></tr></table></div></figure></li><li>最后使用celery命令启动work<figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 注意：需要切换目录到执行文件的目录下，否则会报错</span><br><span class="line">cd celery_app</span><br><span class="line">celery -A tasks worker  --loglevel&#x3D;info</span><br></pre></td></tr></table></div></figure>        <h4 id="3-总结：">          <a href="#3-总结：" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-总结：" class="headerlink" title="3. 总结："></a>3. 总结：</h4>      本文简单介绍了 celery 的基本的功能 , 以及celery 能够处理的任务特点,以及可以和 flask 结合起来使用. 简单分析了 celery 的工作机制 . 当然 如果想要深入了解 celery,可以 参考 celery的官方文档.</li></ul><p>django-git地址：<span class="exturl"><a class="exturl__link" href="https://gitee.com/before-l/celery-demo.git">https://gitee.com/before-l/celery-demo.git</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Celery是一个简单、灵活且可靠的，处理大量消息的&lt;strong&gt;分布式系统&lt;/strong&gt;。它专注于实时处理的异步任务队列，同时也支持任务调度。&lt;br&gt;Celery官方文档中文版：&lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot; href=&quot;http://docs.jinkan.org/docs/celery/&quot;&gt;http://docs.jinkan.org/docs/celery/&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>三方支付</title>
    <link href="http://www.hr915.xyz/2018/07/15/%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98/"/>
    <id>http://www.hr915.xyz/2018/07/15/%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98/</id>
    <published>2018-07-15T12:46:25.000Z</published>
    <updated>2021-01-29T07:06:38.226Z</updated>
    
    <content type="html"><![CDATA[<p>三方支付流程：</p><pre><code>首先进入支付宝平台，点击开发中心-》研发服务获得沙盒的appid以及商户公钥和支付宝公钥然后利用秘钥生成软件生成私钥和公钥建立keys文件夹，  将私钥和公钥文件放入keys加入头部和尾部代码最后用支付宝公钥替换公钥文件</code></pre><a id="more"></a><p>支付宝开放平台：<span class="exturl"><a class="exturl__link" href="https://open.alipay.com/platform/home.htm">https://open.alipay.com/platform/home.htm</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h4 id="1-支付宝沙箱商家应用RSA2密钥生成">          <a href="#1-支付宝沙箱商家应用RSA2密钥生成" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-支付宝沙箱商家应用RSA2密钥生成" class="headerlink" title="1.支付宝沙箱商家应用RSA2密钥生成"></a>1.支付宝沙箱商家应用RSA2密钥生成</h4>      <p>可以使用支付宝开发助手来实现密钥的生成<br>具体步骤查看官方网站：<span class="exturl"><a class="exturl__link" href="https://opendocs.alipay.com/open/291/105971">https://opendocs.alipay.com/open/291/105971</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>同时配置到沙箱</p>        <h4 id="2-安装支付宝SDK模块">          <a href="#2-安装支付宝SDK模块" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-安装支付宝SDK模块" class="headerlink" title="2.安装支付宝SDK模块"></a>2.安装支付宝SDK模块</h4>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 支付宝的sdk已经集成为一个python模块，只需要安装模块进行开发。</span></span><br><span class="line">pip install pycryptodome</span><br><span class="line"></span><br><span class="line">pip install python-alipay-sdk --upgrade</span><br></pre></td></tr></table></div></figure>        <h4 id="3-安装完成-测试支付功能">          <a href="#3-安装完成-测试支付功能" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-安装完成-测试支付功能" class="headerlink" title="3.安装完成 测试支付功能"></a>3.安装完成 测试支付功能</h4>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> alipay <span class="keyword">import</span> AliPay</span><br><span class="line"></span><br><span class="line"><span class="comment"># 公钥</span></span><br><span class="line">alipay_public_key_string = <span class="string">&quot;&quot;&quot;-----BEGIN PUBLIC KEY-----</span></span><br><span class="line"><span class="string">此处填写公钥</span></span><br><span class="line"><span class="string">-----END PUBLIC KEY-----&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 私钥</span></span><br><span class="line">app_private_key_string = <span class="string">&quot;&quot;&quot;-----BEGIN RSA PRIVATE KEY-----</span></span><br><span class="line"><span class="string">此处填写私钥</span></span><br><span class="line"><span class="string">-----END RSA PRIVATE KEY-----&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化支付请求</span></span><br><span class="line">alipay = AliPay(</span><br><span class="line">    appid = <span class="string">&quot;xxxxxxxxx&quot;</span>,     <span class="comment"># APPID</span></span><br><span class="line">    app_notify_url = <span class="literal">None</span>,</span><br><span class="line">    app_private_key_string = app_private_key_string,</span><br><span class="line">    alipay_public_key_string = alipay_public_key_string,</span><br><span class="line">    sign_type = <span class="string">&quot;RSA2&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发起支付请求</span></span><br><span class="line">order_string = alipay.api_alipay_trade_page_pay(</span><br><span class="line">    out_trade_no = <span class="string">&#x27;10001&#x27;</span>, <span class="comment">#订单号</span></span><br><span class="line">    total_amount= <span class="built_in">str</span>(<span class="number">10000</span>), <span class="comment">#支付金额</span></span><br><span class="line">    subject = <span class="string">&#x27;水果干果&#x27;</span>,</span><br><span class="line">    return_url=<span class="string">&quot;http://127.0.0.1:8000/buyer/pr/&quot;</span>,</span><br><span class="line">    <span class="comment"># 支付宝回调地址 </span></span><br><span class="line">    notify_url=<span class="string">&quot;http://127.0.0.1:8000/buyer/pr/&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&quot;https://openapi.alipaydev.com/gateway.do?&quot;</span> + order_string)</span><br></pre></td></tr></table></div></figure>        <h4 id="4-最后附上流程图：">          <a href="#4-最后附上流程图：" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-最后附上流程图：" class="headerlink" title="4.最后附上流程图："></a>4.最后附上流程图：</h4>      <p><img src="/2018/07/15/%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98/01.png" alt="三方支付流程图"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;三方支付流程：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;首先进入支付宝平台，点击开发中心-》研发服务

获得沙盒的appid以及商户公钥和支付宝公钥

然后利用秘钥生成软件生成私钥和公钥

建立keys文件夹，  将私钥和公钥文件放入keys

加入头部和尾部代码

最后用支付宝公钥替换公钥文件&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>微博三方登录</title>
    <link href="http://www.hr915.xyz/2018/07/14/%E5%BE%AE%E5%8D%9A%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/"/>
    <id>http://www.hr915.xyz/2018/07/14/%E5%BE%AE%E5%8D%9A%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/</id>
    <published>2018-07-14T12:46:25.000Z</published>
    <updated>2021-01-29T03:35:42.443Z</updated>
    
    <content type="html"><![CDATA[<p>三方登录流程：</p><pre><code>   理解第三方登录的流程   用户向后端发起请求，我要用微博进行登录   我们的前端凑一个url让用户跳转到第三方应用的url(微博的登录页面)   用户在该界面点击输入用户名密码之后，点击授权。   微博有个回调url指向我们的后端。   我们的后端就可以获取到用户的基本信息等。</code></pre><a id="more"></a><p>微博开放平台网址：<span class="exturl"><a class="exturl__link" href="https://open.weibo.com/?sudaref=www.baidu.com">https://open.weibo.com/?sudaref=www.baidu.com</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>微博三方登录的指导思想：OAuth2.0授权认证</p><p>步骤：</p>        <h4 id="1-创建应用">          <a href="#1-创建应用" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-创建应用" class="headerlink" title="1.创建应用"></a>1.创建应用</h4>      <p><img src="/2018/07/14/%E5%BE%AE%E5%8D%9A%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/01.png" alt="创建应用"></p>        <h4 id="2-设置回调地址">          <a href="#2-设置回调地址" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-设置回调地址" class="headerlink" title="2.设置回调地址"></a>2.设置回调地址</h4>      <p><img src="/2018/07/14/%E5%BE%AE%E5%8D%9A%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/02.png" alt="设置回调地址"></p>        <h4 id="3-请求用户授权token">          <a href="#3-请求用户授权token" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-请求用户授权token" class="headerlink" title="3. 请求用户授权token"></a>3. 请求用户授权token</h4>      <p><img src="/2018/07/14/%E5%BE%AE%E5%8D%9A%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/03.png" alt="请求用户授权Token"><br><img src="/2018/07/14/%E5%BE%AE%E5%8D%9A%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/04.png" alt="请求用户授权Token"><br><img src="/2018/07/14/%E5%BE%AE%E5%8D%9A%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/05.png" alt="请求用户授权Token"></p><ul><li><p>在前端写一个超链接用来向微博发送请求</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://api.weibo.com/oauth2/authorize?client_id=xxxxxxxx&amp;redirect_uri=xxxxxxxx&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../../assets/240.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="4-获取授权过的Access-Token">          <a href="#4-获取授权过的Access-Token" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-获取授权过的Access-Token" class="headerlink" title="4.获取授权过的Access Token"></a>4.获取授权过的Access Token</h4>      <p><img src="/2018/07/14/%E5%BE%AE%E5%8D%9A%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/06.png" alt="获取授权过的Acccess Token"><br><img src="/2018/07/14/%E5%BE%AE%E5%8D%9A%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/07.png" alt="获取授权过的Acccess Token"></p></li><li><p>在后端写一个接口用来进行网络请求(使用requests三方模块)</p></li></ul><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeiboView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        code = request.GET.get(<span class="string">&quot;code&quot;</span>)</span><br><span class="line">        <span class="comment"># 通过python进行网络请求 requests</span></span><br><span class="line">        r = requests.post(<span class="string">&quot;https://api.weibo.com/oauth2/access_token&quot;</span>, &#123;</span><br><span class="line">            <span class="comment"># App Key</span></span><br><span class="line">            <span class="string">&quot;client_id&quot;</span>: xxxx,</span><br><span class="line">            <span class="comment"># 密钥  App Secret</span></span><br><span class="line">            <span class="string">&quot;client_secret&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="comment"># 请求的类型</span></span><br><span class="line">            <span class="string">&quot;grant_type&quot;</span>: <span class="string">&quot;authorization_code&quot;</span>,</span><br><span class="line">            <span class="comment"># 调用authorize获得的code值。</span></span><br><span class="line">            <span class="string">&quot;code&quot;</span>: code,</span><br><span class="line">            <span class="comment"># 回调地址</span></span><br><span class="line">            <span class="string">&quot;redirect_uri&quot;</span>: <span class="string">&quot;http://127.0.0.1:8000/weibo/&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        access_token = r.json()[<span class="string">&#x27;access_token&#x27;</span>]</span><br><span class="line">        uid = r.json()[<span class="string">&#x27;uid&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 先判断微博账号是否登录过，没有登录过则把账号添加到第三方表中，登陆过则返回登录信息</span></span><br><span class="line">        open_user = OpenUser.objects.<span class="built_in">filter</span>(uid=uid).first()</span><br><span class="line">        <span class="keyword">if</span> open_user:</span><br><span class="line">            <span class="comment"># 已经登录过了</span></span><br><span class="line">            user = open_user.user</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            user = User.objects.create(username=uid, password=uid)</span><br><span class="line">            <span class="comment"># 没有登录</span></span><br><span class="line">            OpenUser.objects.create(uid=uid, cate=<span class="string">&quot;微博&quot;</span>, user=user)</span><br><span class="line">        <span class="comment"># 生成令牌</span></span><br><span class="line">        token = jwt.encode(&#123;<span class="string">&quot;uid&quot;</span>:user.<span class="built_in">id</span>&#125;,<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 跳转到前端首页</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;登录成功,点击跳转&lt;a href=&#x27;http://127.0.0.1:8080/#/index?token=%s&amp;username=%s&#x27;&gt;跳转&lt;/a&gt;&quot;</span>%(token.decode(),uid))</span><br></pre></td></tr></table></div></figure>        <h4 id="5-OK-这样一个微博三方登录就做好啦">          <a href="#5-OK-这样一个微博三方登录就做好啦" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-OK-这样一个微博三方登录就做好啦" class="headerlink" title="5.OK 这样一个微博三方登录就做好啦"></a>5.OK 这样一个微博三方登录就做好啦</h4>              <h5 id="vue-git地址：https-gitee-com-before-l-annual-leave-vue-git">          <a href="#vue-git地址：https-gitee-com-before-l-annual-leave-vue-git" class="heading-link"><i class="fas fa-link"></i></a><a href="#vue-git地址：https-gitee-com-before-l-annual-leave-vue-git" class="headerlink" title="vue-git地址：https://gitee.com/before-l/annual-leave-vue.git"></a>vue-git地址：<span class="exturl"><a class="exturl__link" href="https://gitee.com/before-l/annual-leave-vue.git">https://gitee.com/before-l/annual-leave-vue.git</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h5>              <h5 id="django-git地址-https-gitee-com-before-l-annual-leave-git">          <a href="#django-git地址-https-gitee-com-before-l-annual-leave-git" class="heading-link"><i class="fas fa-link"></i></a><a href="#django-git地址-https-gitee-com-before-l-annual-leave-git" class="headerlink" title="django-git地址:https://gitee.com/before-l/annual-leave.git"></a>django-git地址:<span class="exturl"><a class="exturl__link" href="https://gitee.com/before-l/annual-leave.git">https://gitee.com/before-l/annual-leave.git</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h5>      ]]></content>
    
    
    <summary type="html">&lt;p&gt;三方登录流程：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   理解第三方登录的流程

   用户向后端发起请求，我要用微博进行登录

   我们的前端凑一个url让用户跳转到第三方应用的url(微博的登录页面)

   用户在该界面点击输入用户名密码之后，点击授权。

   微博有个回调url指向我们的后端。

   我们的后端就可以获取到用户的基本信息等。&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>VUE父子组件</title>
    <link href="http://www.hr915.xyz/2018/07/13/vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6/"/>
    <id>http://www.hr915.xyz/2018/07/13/vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6/</id>
    <published>2018-07-13T12:46:25.000Z</published>
    <updated>2021-01-28T09:02:04.973Z</updated>
    
    <content type="html"><![CDATA[        <h4 id="VUE父子组件使用">          <a href="#VUE父子组件使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#VUE父子组件使用" class="headerlink" title="VUE父子组件使用"></a>VUE父子组件使用</h4>      <p>在vue组件通信中其中最常见通信方式就是父子组件之中的通信，而父子组件的设定方式在不同情况下又各有不同。<br>最常见的就是父组件为控制组件，子组件为视图组件。<br>父组件传递数据给子组件使用，遇到业务逻辑操作时子组件触发父组件的自定义事件。<br>但是，无论哪种组织方式父子组件的通信方式都是大同小异</p><a id="more"></a>        <h4 id="父组件向子组件传参-★★★★★">          <a href="#父组件向子组件传参-★★★★★" class="heading-link"><i class="fas fa-link"></i></a><a href="#父组件向子组件传参-★★★★★" class="headerlink" title="父组件向子组件传参 ★★★★★"></a>父组件向子组件传参 ★★★★★</h4>      <p><strong>通过 [props]传递数据 (推荐)</strong></p><p>父子通讯中最常见的数据传递方式就是通过props传递数据，就好像方法的传参一样，父组件调用子组件并传入数据，子组件接受到父组件传递的数据进行验证<br>使用props 可以是数组或对象，用于接收来自父组件的数据。<br>props 可以是简单的数组，或者使用对象作为替代，对象允许配置高级选项，如类型检测、自定义校验和设置默认值prop 的定义应该尽量详细，至少需要指定其类型</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 父组件  Father --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Son :parentMessage&#x3D;&quot;parentMessage&quot;&gt;&lt;&#x2F;Son&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Son from &quot;.&#x2F;Son&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Son</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      parentMessage: &quot;我是来自父组件的消息，借用一下子组件的地方渲染一下&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style&gt;&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></div></figure><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 子组件 Son  --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;你好哇&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123; parentMessage &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(this.parentMessage)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F;第一种方法  </span><br><span class="line">  &#x2F;&#x2F; props: [&#39;parentMessage&#39;]</span><br><span class="line">  &#x2F;&#x2F;第二种方法</span><br><span class="line">    props: &#123;</span><br><span class="line">      parentMessage: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        default: &#39;子组件默认显示的信息&#39;,</span><br><span class="line">        require: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style&gt;&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>效果：<br><img src="/2018/07/13/vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6/01.png" alt="父子组件传参"></p>        <h4 id="子组件向父组件传参-★★★★★">          <a href="#子组件向父组件传参-★★★★★" class="heading-link"><i class="fas fa-link"></i></a><a href="#子组件向父组件传参-★★★★★" class="headerlink" title="子组件向父组件传参 ★★★★★"></a>子组件向父组件传参 ★★★★★</h4>      <p><strong>通过 [$emit]传递数据 (推荐)</strong><br>通过 $emit 传递父组件数据与父组件到子组件通讯中的$on配套使用，可以向父组件中触发的方法传递参数供父组件使用。</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 父组件  Father --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;h1&gt;&#123;&#123;data&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Son @event&#x3D;&quot;change&quot;&gt;&lt;&#x2F;Son&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Son from &quot;.&#x2F;Son&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Son</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      data:&quot;我是父组件&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      change(event) &#123;</span><br><span class="line">        this.data &#x3D; event</span><br><span class="line">          console.log(event)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style&gt;&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></div></figure><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 子组件 Son  --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button @click&#x3D;&quot;toFather&quot;&gt;向父组件传值&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      data:&quot;我是子组件&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">      toFather()&#123;</span><br><span class="line">        this.$emit(&#39;event&#39;, this.data)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style&gt;&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></div></figure><p>效果：<br><img src="/2018/07/13/vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6/02.png" alt="子父组件传参"></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;VUE父子组件使用&quot;&gt;
          &lt;a href=&quot;#VUE父子组件使用&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#VUE父子组件使用&quot; class=&quot;headerlink&quot; title=&quot;VUE父子组件使用&quot;&gt;&lt;/a&gt;VUE父子组件使用&lt;/h4&gt;
      &lt;p&gt;在vue组件通信中其中最常见通信方式就是父子组件之中的通信，而父子组件的设定方式在不同情况下又各有不同。&lt;br&gt;最常见的就是父组件为控制组件，子组件为视图组件。&lt;br&gt;父组件传递数据给子组件使用，遇到业务逻辑操作时子组件触发父组件的自定义事件。&lt;br&gt;但是，无论哪种组织方式父子组件的通信方式都是大同小异&lt;/p&gt;</summary>
    
    
    
    
    <category term="vue,组件" scheme="http://www.hr915.xyz/tags/vue-%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>VUE路由钩子</title>
    <link href="http://www.hr915.xyz/2018/07/12/vue%E8%B7%AF%E7%94%B1%E9%92%A9%E5%AD%90/"/>
    <id>http://www.hr915.xyz/2018/07/12/vue%E8%B7%AF%E7%94%B1%E9%92%A9%E5%AD%90/</id>
    <published>2018-07-12T12:46:25.000Z</published>
    <updated>2021-01-28T03:45:49.910Z</updated>
    
    <content type="html"><![CDATA[<p>描述：通常我们在跳转页面时会遇到各种各样的要求，比如没有登录不能查看，比如跳转需要验证，各种各样的要求。如果分开写代码的话就会显得很乱，代码很繁重，此时就用到了我们的路由钩子<br>路由钩子主要是给使用者在路由发生变化时进行一些特殊的处理而定义的</p><a id="more"></a>        <h4 id="路由钩子主要分三种">          <a href="#路由钩子主要分三种" class="heading-link"><i class="fas fa-link"></i></a><a href="#路由钩子主要分三种" class="headerlink" title="路由钩子主要分三种"></a><strong>路由钩子</strong>主要分三种</h4>      <p>全局路由钩子：beforeEach<br>单个路由钩子：beforeEnter<br>路由组件钩子：beforeEachEnter</p>        <h4 id="三种路由钩子中都涉及到了三个参数">          <a href="#三种路由钩子中都涉及到了三个参数" class="heading-link"><i class="fas fa-link"></i></a><a href="#三种路由钩子中都涉及到了三个参数" class="headerlink" title="三种路由钩子中都涉及到了三个参数:"></a>三种路由钩子中都涉及到了三个参数:</h4>      <p>to: Route: 即将要进入的目标 路由对象<br>from: Route: 当前导航正要离开的路由<br>next: Function: 通过这个方法来调用下一个钩子函数</p>        <h4 id="使用：">          <a href="#使用：" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用：" class="headerlink" title="使用："></a>使用：</h4>      <p>beforeEach(跳转前)  &amp;&amp;  afterEach(跳转后)<br>需要通过main.js配置</p><hr><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//会在任意路由跳转前执行，next一定要记着执行，不然路由不能跳转了</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;我要跳转啦&quot;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(to,<span class="keyword">from</span>)</span><br><span class="line">  <span class="comment">//调用下一个钩子函数</span></span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//会在任意路由跳转后执行</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;我跳过来了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure><p>beforeEnter(写在router-index.js里面)</p><hr><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/index&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;Index&#x27;</span>,</span><br><span class="line">      component: Index,</span><br><span class="line">      <span class="function"><span class="title">beforeEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;我是只守护Index的beforeEnter&quot;</span>)</span><br><span class="line">        next()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure><p>beforeRouteEnter(到达之后)   &amp;&amp;   beforeRouteUpdate(到达子路由)   &amp;&amp;   beforeRouteLeave(离开之前)<br>写在具体页面里</p><hr><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;****************Test1****我来啦**************&quot;</span>);</span><br><span class="line">  next(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//因为当钩子执行前，组件实例还没被创建</span></span><br><span class="line">    <span class="comment">// vm 就是当前组件的实例相当于上面的 this，所以在 next 方法里你就可以把 vm 当 this 来用了。</span></span><br><span class="line">    <span class="built_in">console</span>.log(vm);<span class="comment">//当前组件的实例</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">beforeRouteUpdate</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span> &#123;</span><br><span class="line">  <span class="comment">//在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">  <span class="comment">//对于一个带有动态参数的路径 /good/:id，在 /good/1 和 /good/2 之间跳转的时候，</span></span><br><span class="line">  <span class="comment">// 由于会渲染同样的good组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">  <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//简单来说就是在跳转子路由的时候可以获取query和params</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;****************Test1*******Update***********&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>, <span class="string">&#x27;Update&#x27;</span>); <span class="comment">//当前组件实例</span></span><br><span class="line">  next();</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span> &#123;</span><br><span class="line">  <span class="comment">// 导航离开该组件的对应路由时调用</span></span><br><span class="line">  <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;****************Test1****我走啦**************&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>, <span class="string">&#x27;Leave&#x27;</span>); <span class="comment">//当前组件实例</span></span><br><span class="line">  next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;描述：通常我们在跳转页面时会遇到各种各样的要求，比如没有登录不能查看，比如跳转需要验证，各种各样的要求。如果分开写代码的话就会显得很乱，代码很繁重，此时就用到了我们的路由钩子&lt;br&gt;路由钩子主要是给使用者在路由发生变化时进行一些特殊的处理而定义的&lt;/p&gt;</summary>
    
    
    
    
    <category term="vue" scheme="http://www.hr915.xyz/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>VUE拦截器</title>
    <link href="http://www.hr915.xyz/2018/07/11/vue%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>http://www.hr915.xyz/2018/07/11/vue%E6%8B%A6%E6%88%AA%E5%99%A8/</id>
    <published>2018-07-11T12:46:25.000Z</published>
    <updated>2021-01-28T03:48:04.225Z</updated>
    
    <content type="html"><![CDATA[<p>vue拦截器axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端,<br>他主要分为请求拦截器和响应拦截器…</p><a id="more"></a><p><strong>请求拦截器</strong>：就是我们在请求之前进行的一个操作比如说，我们可以在请求之前加一个loading框，在响应拦截后进行loading框的一个去除。</p><p><strong>响应拦截器</strong>：就是请求得到回应，我们可以做一个状态的拦截，比如说405，404等等状态吗，我们可以做一个拦截，然后在页面进行响应的展示</p><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 在发送请求之前做些什么,比如把token携带过去</span></span><br><span class="line">  <span class="keyword">let</span> token = <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">  <span class="comment">// 如果有token, 就可以进行操作</span></span><br><span class="line">  <span class="keyword">if</span> (token) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;开始请求啦&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>请求拦截器通常在用户身份认证的时候使用，便于携带用户的身份认证信息token之类的</p><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 响应拦截器（当后端返回数据的时候进行拦截）</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 当响应码是 2xx 的情况, 进入这里</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;请求成功，开始响应啦&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> response.data;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error.response)</span><br><span class="line">  <span class="comment">// 当响应码不是 2xx 的情况, 进入这里</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;请求失败了哦&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> error</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p><strong>作用</strong>：</p><ul><li>比如config中的一些信息不符合服务器的要求，得及时拦截下来更改。</li><li>比如每次发送网络请求的时候，都希望在界面中显示一个动态加载的请求图标，就是一直在转圈圈，让用户知道当前页面正在加载数据，准备渲染视图。</li><li>比如某些网络请求（比如登录token）,必须携带一些特殊的信息。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;vue拦截器axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端,&lt;br&gt;他主要分为请求拦截器和响应拦截器…&lt;/p&gt;</summary>
    
    
    
    
    <category term="vue,Sjavascript" scheme="http://www.hr915.xyz/tags/vue-Sjavascript/"/>
    
  </entry>
  
</feed>
