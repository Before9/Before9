<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>I hope you&#39;re here for me</title>
  
  <subtitle>贩卖日落</subtitle>
  <link href="https://www.hr915.xyz/atom.xml" rel="self"/>
  
  <link href="https://www.hr915.xyz/"/>
  <updated>2021-05-11T06:56:21.083Z</updated>
  <id>https://www.hr915.xyz/</id>
  
  <author>
    <name>Before</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MongoDB安装与使用</title>
    <link href="https://www.hr915.xyz/id_24/"/>
    <id>https://www.hr915.xyz/id_24/</id>
    <published>2020-10-02T12:46:25.000Z</published>
    <updated>2021-05-11T06:56:21.083Z</updated>
    
    <content type="html"><![CDATA[<h4 id="MongoDB安装"><a href="#MongoDB安装" class="headerlink" title="MongoDB安装"></a>MongoDB安装</h4><p>MongoDB安装方式</p><ul><li>将MongoDB服务下载下来 安装到自己的电脑<a id="more"></a><h5 id="MongoDB服务下载并安装"><a href="#MongoDB服务下载并安装" class="headerlink" title="MongoDB服务下载并安装"></a>MongoDB服务下载并安装</h5></li></ul><p>进入<a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a> 这个链接去下载，<br>下载完成后，会得到一个后缀为.msi的文件，双击进行安装即可<br><strong>注意</strong>：不去掉勾选的话可能会安装特别慢，四五个小时都有可能<br><img src="/id_24/01.jpg" alt="注意"><br>详细安装过程可参考菜鸟教程<br><a href="https://www.runoob.com/mongodb/mongodb-window-install.html">https://www.runoob.com/mongodb/mongodb-window-install.html</a></p><h5 id="MongoDB-Compass（可视化工具）安装"><a href="#MongoDB-Compass（可视化工具）安装" class="headerlink" title="MongoDB Compass（可视化工具）安装"></a>MongoDB Compass（可视化工具）安装</h5><p>进入 <a href="https://www.mongodb.com/try/download/compass">https://www.mongodb.com/try/download/compass</a> 这个链接下载可视化工具<br>下载完成后，会得到一个压缩文件，解压到任意文件夹里即可，<br>压缩包解压之后，上方有一个MongoDBCompass.exe文件，打开即可</p><p>MongoDB使用</p><p>基本语法</p><table><thead><tr><th>命令</th><th>语法</th></tr></thead><tbody><tr><td>创建数据库</td><td>use 数据库名</td></tr><tr><td>展示所有数据库</td><td>show dbss</td></tr><tr><td>查看当前所在数据库</td><td>db</td></tr><tr><td>创建集合</td><td>db.createCollection(‘集合’)</td></tr><tr><td>展示集合</td><td>show 集合名</td></tr><tr><td>插入数据</td><td>db.集合.insert({…})</td></tr><tr><td>读取数据</td><td>db.集合.find()</td></tr><tr><td>读取指定数据</td><td>db.集合.find({id:1})</td></tr><tr><td>读取一条数据</td><td>db.集合.find_one({id:1})</td></tr></tbody></table><h4 id="python操作MongoDB"><a href="#python操作MongoDB" class="headerlink" title="python操作MongoDB"></a>python操作MongoDB</h4><ul><li>下载python中的MongoDB<blockquote><p>pip install pymongo</p></blockquote></li></ul><p>下载完成之后，进行连接（此处要导包）</p><blockquote><p>from pymongo import MongoClient<br>client = MongoClient(host=’127.0.0.1’, port=27017)</p></blockquote><p>接下来需要进入我们在MongoDB创建的数据库(mongotest)<br>此处没有创建数据库的，需要手动创建MongoDB数据库（看上方的基本语法）</p><blockquote><p>db = client.mongotest</p></blockquote><p>指定集合</p><blockquote><p>table = db.CateTemplate</p></blockquote><p>建立好之后，就可以进行查询了</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">    <span class="comment"># 进入数据库</span></span><br><span class="line">    db = client.mongotest</span><br><span class="line">    <span class="comment"># 集合</span></span><br><span class="line">    dbset = db.CateTemplate</span><br><span class="line">    <span class="built_in">id</span> = request.GET.get(<span class="string">'id'</span>, <span class="literal">None</span>)</span><br><span class="line">    tid = WorkOrderModel.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="built_in">id</span>).first()</span><br><span class="line">    data = {}</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> zst.find({<span class="string">'tid'</span>: <span class="built_in">str</span>(tid.pid)}):</span><br><span class="line">        data = <span class="built_in">eval</span>(i[<span class="string">'name'</span>])</span><br><span class="line">    <span class="keyword">return</span> Response(data)</span><br></pre></td></tr></tbody></table></figure><h4 id="OK"><a href="#OK" class="headerlink" title="OK"></a>OK</h4>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;MongoDB安装&quot;&gt;&lt;a href=&quot;#MongoDB安装&quot; class=&quot;headerlink&quot; title=&quot;MongoDB安装&quot;&gt;&lt;/a&gt;MongoDB安装&lt;/h4&gt;&lt;p&gt;MongoDB安装方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将MongoDB服务下载下来 安装到自己的电脑&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="数据库" scheme="https://www.hr915.xyz/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="mongodb" scheme="https://www.hr915.xyz/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>Redis封禁账号30分钟</title>
    <link href="https://www.hr915.xyz/id_20/"/>
    <id>https://www.hr915.xyz/id_20/</id>
    <published>2020-09-26T11:43:58.000Z</published>
    <updated>2021-05-11T06:56:21.068Z</updated>
    
    <content type="html"><![CDATA[<p><strong>问题</strong>： 账号锁定问题  五分钟以内输错五次密码，锁定账号30分钟</p><ul><li>相关问题：</li></ul><p><strong>问</strong>：用户登录都有哪些校验方式？<br><strong>答</strong>：</p><ul><li>用户名和密码 what you know (容易被破解，ant-desgin被黑删库)</li><li>用户名和密钥(token)  what you have (gitee可以通过密钥来提交代码)</li><li>用户名和实体  who you are  (人脸识别但成本过高)<a id="more"></a></li></ul><p><strong>问</strong>：为什么要使用redis解决这个问题而不用mysql呢<br><strong>答</strong>：因为使用redis更简单，redis会自动计算时间，mysql需要自己手动将时间入库，比较复杂<br><strong>问题解答</strong>：</p><ul><li><p>第一步 先判断 用户名+balck 这个key 是否存在</p><ul><li>存在 意味着已经被锁定 所以直接返回</li><li> 不存在 继续执行</li></ul></li><li><p>第二步 向数据库进行请求  登录</p><ul><li>登录成功 直接返回    </li><li>登录不成功 进行redis操作</li></ul></li><li><p>第三步 判断是否是第一次输入错误</p><ul><li>是 使用incrby进行redis自动累加存储，并expire设置过期时间5分钟，返回输入错误</li><li>否 使用get取出用户名这个key的值，判断是否等于5 次<ul><li>是 使用set将 用户名+’black’ 这个key存入redis 并expire设置过期时间30分钟，返回账户已锁定</li><li>否 使用set用户名更新这个key，并返回输入错误 </li></ul></li></ul></li></ul><p>OK，上代码</p><h3 id="首先-对redis命令进行封装"><a href="#首先-对redis命令进行封装" class="headerlink" title="首先 对redis命令进行封装"></a>首先 对redis命令进行封装</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 封装redis</span></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRedis</span>:</span></span><br><span class="line">    <span class="comment"># 用来定义属性和变量</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, key, **redis_kwargs</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># self.__变量名：使用双下划线开头的变量是私有变量，在类外不可以被调用</span></span><br><span class="line">        <span class="comment"># **kwarys不定长参数  用于可传可不传的参数</span></span><br><span class="line">        <span class="comment"># kwargs是用来传键值对，args 用来传列表和元祖</span></span><br><span class="line"></span><br><span class="line">        self.__db = redis.Redis(**redis_kwargs)</span><br><span class="line"></span><br><span class="line">        self.key = key</span><br><span class="line">    <span class="comment"># 向redis存储数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self.__db.<span class="built_in">set</span>(self.key, value)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从redis取出数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__db.get(self.key)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># redis 自动累加</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">incrby</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self.__db.incrby(self.key, value)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># redis设置键过期时间</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">expire</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self.__db.expire(self.key, value)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="然后写登录视图"><a href="#然后写登录视图" class="headerlink" title="然后写登录视图"></a>然后写登录视图</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        username = request.data.get(<span class="string">"username"</span>)</span><br><span class="line">        password = request.data.get(<span class="string">"password"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 第一步 先判断 用户名+balck 这个key 是否存在</span></span><br><span class="line">        <span class="comment"># 存在 意味着已经被锁定 所以直接返回</span></span><br><span class="line">        r = redis.Redis()</span><br><span class="line">        <span class="keyword">if</span> r.get(username + <span class="string">'black'</span>):</span><br><span class="line">            print(r.get(username + <span class="string">'black'</span>))</span><br><span class="line">            <span class="keyword">return</span> Response({<span class="string">"msg"</span>: <span class="string">"账户已锁定，请等待30分钟后重试"</span>})</span><br><span class="line">        <span class="comment"># 不存在 登录</span></span><br><span class="line">        user = UserModel.objects.<span class="built_in">filter</span>(username=username, password=password).first()</span><br><span class="line">        <span class="keyword">if</span> user:</span><br><span class="line">            <span class="keyword">return</span> Response({<span class="string">"msg"</span>: <span class="string">"登录成功"</span>, <span class="string">"code"</span>: <span class="number">200</span>})</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 判断是否输入错误过</span></span><br><span class="line">            <span class="comment"># 没有</span></span><br><span class="line">            <span class="keyword">if</span> r.get(username) == <span class="literal">None</span>:</span><br><span class="line">                r.incrby(username, <span class="number">1</span>)</span><br><span class="line">                print(<span class="string">"第一次输入错误"</span>)</span><br><span class="line">                r.expire(username, <span class="number">300</span>)</span><br><span class="line">                <span class="keyword">return</span> Response({<span class="string">"msg"</span>: <span class="string">"第一次输入错误"</span>, <span class="string">"code"</span>: <span class="number">400</span>})</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                value = <span class="built_in">int</span>(r.get(username))</span><br><span class="line">                <span class="comment"># 输入错误五次，加入黑名单</span></span><br><span class="line">                <span class="keyword">if</span> value == <span class="number">5</span>:</span><br><span class="line">                    r.<span class="built_in">set</span>(username + <span class="string">'black'</span>, <span class="number">30</span>)</span><br><span class="line">                    r.expire(username + <span class="string">'black'</span>, <span class="number">1800</span>)</span><br><span class="line">                    <span class="keyword">return</span> Response({<span class="string">"msg"</span>: <span class="string">"输入次数以上限，请30分钟后重试"</span>, <span class="string">'code'</span>: <span class="number">200</span>})</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    r.<span class="built_in">set</span>(username, value + <span class="number">1</span>)</span><br><span class="line">                    print(r.get(username))</span><br><span class="line">                    <span class="keyword">return</span> Response({<span class="string">"msg"</span>: <span class="string">"用户名或密码错误，请重新输入"</span>, <span class="string">'code'</span>: <span class="number">400</span>})</span><br></pre></td></tr></tbody></table></figure><h3 id="OK-问题解决了。"><a href="#OK-问题解决了。" class="headerlink" title="OK,问题解决了。"></a>OK,问题解决了。</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;： 账号锁定问题  五分钟以内输错五次密码，锁定账号30分钟&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相关问题：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;问&lt;/strong&gt;：用户登录都有哪些校验方式？&lt;br&gt;&lt;strong&gt;答&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户名和密码 what you know (容易被破解，ant-desgin被黑删库)&lt;/li&gt;
&lt;li&gt;用户名和密钥(token)  what you have (gitee可以通过密钥来提交代码)&lt;/li&gt;
&lt;li&gt;用户名和实体  who you are  (人脸识别但成本过高)&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="数据库" scheme="https://www.hr915.xyz/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="redis" scheme="https://www.hr915.xyz/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>docker打包镜像</title>
    <link href="https://www.hr915.xyz/id_5/"/>
    <id>https://www.hr915.xyz/id_5/</id>
    <published>2020-08-20T08:58:35.000Z</published>
    <updated>2021-05-11T06:51:26.554Z</updated>
    
    <content type="html"><![CDATA[<p>在docker hub上有时我们找不到想要的image,或自己想要打包纯净的image ( 怕投毒?? ).</p><p>所以自己制作docker image是一种不错的选择</p><a id="more"></a><h5 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h5><blockquote><p>docker pull centos</p></blockquote><h5 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h5><blockquote><p>docker images</p></blockquote><h5 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h5><blockquote><p>docker run -it –name=容器名  镜像名  /bin/bash</p></blockquote><h5 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h5><blockquote><p>docker start 容器ID</p></blockquote><h5 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h5><blockquote><p>docker exec -itd 容器名(容器ID) /bin/bash<br>docker attach 容器ID</p></blockquote><h5 id="安装ssh"><a href="#安装ssh" class="headerlink" title="安装ssh"></a>安装ssh</h5><blockquote><p>yum install openssh-server</p></blockquote><p>没有正常启动的话通常需要生成当前主机的ssh-key</p><blockquote><p>ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key<br>ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key<br>ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key<br>ssh-keygen -t dsa -f /etc/ssh/ssh_host_ed25519_key</p></blockquote><h5 id="在容器中启动ssh服务，让外界可以连接"><a href="#在容器中启动ssh服务，让外界可以连接" class="headerlink" title="在容器中启动ssh服务，让外界可以连接"></a>在容器中启动ssh服务，让外界可以连接</h5><blockquote><p>/usr/sbin/sshd</p></blockquote><h5 id="修改容器内部密码"><a href="#修改容器内部密码" class="headerlink" title="修改容器内部密码"></a>修改容器内部密码</h5><blockquote><p>修改密码需要安装passwd<br>yum install passwd.x86_64<br>修改密码<br>passwd root</p></blockquote><h5 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h5><blockquote><p>exit</p></blockquote><h5 id="修改云主机密码"><a href="#修改云主机密码" class="headerlink" title="修改云主机密码"></a>修改云主机密码</h5><blockquote><p>修改云主机密码需要退出容器在执行passwd</p></blockquote><h5 id="查看所有容器"><a href="#查看所有容器" class="headerlink" title="查看所有容器"></a>查看所有容器</h5><blockquote><p>docker ps -a</p></blockquote><h5 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h5><blockquote><p>docker commit -a “作者” -m “简介”  被打包的容器ID  镜像名: 版本号</p></blockquote><h5 id="镜像导出"><a href="#镜像导出" class="headerlink" title="镜像导出"></a>镜像导出</h5><blockquote><p>docker save 镜像名 &gt; ./文件名<br>例如： docker save ssh_image &gt; ./文件名</p></blockquote><h5 id="加载镜像-解压"><a href="#加载镜像-解压" class="headerlink" title="加载镜像(解压)"></a>加载镜像(解压)</h5><blockquote><p>docker load &lt; ./文件名<br>例如： docker load &lt; ./文件名</p></blockquote><h5 id="查看镜像是否存在"><a href="#查看镜像是否存在" class="headerlink" title="查看镜像是否存在"></a>查看镜像是否存在</h5><blockquote><p>docker images</p></blockquote><h5 id="创建容器并映射端口把镜像跑起来"><a href="#创建容器并映射端口把镜像跑起来" class="headerlink" title="创建容器并映射端口把镜像跑起来"></a>创建容器并映射端口把镜像跑起来</h5><blockquote><p>docker run -itd -p 11111:22(映射的端口号)  镜像ID  /bin/bash</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;在docker hub上有时我们找不到想要的image,或自己想要打包纯净的image ( 怕投毒?? ).&lt;/p&gt;
&lt;p&gt;所以自己制作docker image是一种不错的选择&lt;/p&gt;</summary>
    
    
    
    <category term="部署" scheme="https://www.hr915.xyz/categories/%E9%83%A8%E7%BD%B2/"/>
    
    
    <category term="docker" scheme="https://www.hr915.xyz/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker操作 容器、镜像 &amp;&amp; dockerfile</title>
    <link href="https://www.hr915.xyz/id_4/"/>
    <id>https://www.hr915.xyz/id_4/</id>
    <published>2020-08-19T12:46:25.000Z</published>
    <updated>2021-05-11T06:51:26.586Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。<br>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p><a id="more"></a><h3 id="Docker-的优点"><a href="#Docker-的优点" class="headerlink" title="Docker 的优点"></a>Docker 的优点</h3><ul><li>  快速部署：短时间内可以部署成百上千个应用，更快速交付到线上</li><li>  高效虚拟化：不需要额外hypervisor支持，基于linux内核实现应用虚拟化，相比虚拟机大幅提高性能和效率</li><li>  节省开支：提高服务器利用率，降低IT支出</li><li>  简化配置：将运行环境打包保存至容器，使用时直接启动即可</li><li>  环境统一：将开发，测试，生产的应用运行环境进行标准化和统一，减少环境不一样带来的各种问题</li><li>  快速迁移和扩展：可实现跨平台运行在物理机、虚拟机、公有云等环境，良好的兼容性可以方便将应用从A宿主机迁移到B宿主机，甚至是A平台迁移到B平台</li></ul><h3 id="Docker-包括三个基本概念"><a href="#Docker-包括三个基本概念" class="headerlink" title="Docker 包括三个基本概念:"></a>Docker 包括三个基本概念:</h3><ul><li>镜像（Image）：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</li><li>容器（Container）：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</li><li>仓库（Repository）：仓库可看成一个代码控制中心，用来保存镜像。<br>Docker 使用客户端-服务器 (C/S) 架构模式，使用远程API来管理和创建Docker容器。<br>Docker 容器通过 Docker 镜像来创建。<br>容器与镜像的关系类似于面向对象编程中的对象(容器)与类(镜像)。</li></ul><h3 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h3><h4 id="安装Docker-CentOS"><a href="#安装Docker-CentOS" class="headerlink" title="安装Docker - CentOS"></a>安装Docker - CentOS</h4><ul><li>Docker 软件包和依赖包已经包含在默认的 CentOS-Extras 软件源里，安装命令如下：<figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker</span><br></pre></td></tr></tbody></table></figure><img src="/id_4/01.png" alt="安装"></li><li>安装成功<br><img src="/id_4/02.png" alt="安装成功"></li><li>启动Docker后台服务<figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker start</span><br></pre></td></tr></tbody></table></figure><img src="/id_4/03.png" alt="启动服务"></li><li>测试运行hello-world<figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></tbody></table></figure><img src="/id_4/04.png" alt="测试"><blockquote><p>因为本地没有hello-world这个镜像，所以会下载一个hello-world的镜像，并在容器内运行</p></blockquote></li></ul><h3 id="Docker使用"><a href="#Docker使用" class="headerlink" title="Docker使用"></a>Docker使用</h3><p>Docker官网：<a href="https://www.docker.com/">https://www.docker.com/</a></p><h4 id="Docker镜像使用"><a href="#Docker镜像使用" class="headerlink" title="Docker镜像使用"></a>Docker镜像使用</h4><ul><li>docker 客户端非常简单 ,我们可以直接输入 docker 命令来查看到 Docker 客户端的所有命令选项。<blockquote><p>docker</p></blockquote></li></ul><p><img src="/id_4/05.png" alt="全部命令"><br>可以通过命令 docker command –help 更深入的了解指定的 Docker 命令使用方法。</p><ul><li><p>拉取镜像</p><blockquote><p>docker pull</p></blockquote></li><li><p>查看docker 镜像(首次安装完后镜像为空)</p><blockquote><p>docker images</p></blockquote></li><li><p>docker搜索镜像</p><blockquote><p>docker search 镜像名称(nignx) </p></blockquote></li><li><p>镜像导出(本地镜像导出为一个压缩文件)</p><blockquote><p>docker save 镜像名 &gt; 文件路径</p></blockquote></li><li><p>加载镜像(将镜像导出的压缩文件再导入)</p><blockquote><p>docker load &lt; 文件名  </p></blockquote></li><li><p>镜像标签(类似于起别名)</p><blockquote><p>docker tag 镜像名 镜像名:标签</p></blockquote></li></ul><p>搜索下来的镜像和Docker Hub上是一样的</p><ul><li><p>拉取镜像</p><ul><li><p>因为国内访问docker hub的速度慢  所以要使用加速服务</p><blockquote><p>使用ustc镜像加速器   进行配置</p><p>vi /etc/docker/daemon.json</p></blockquote></li><li><p>在配置文件中配置以下内容</p><blockquote><p>{</p><p> “registry-mirrors”: [“<a href="https://docker.mirrors.ustc.edu.cn&quot;]">https://docker.mirrors.ustc.edu.cn"]</a></p><p>}</p></blockquote></li><li><p>配置完以后重启docker</p><blockquote><p>systemctl  start  docker</p></blockquote></li><li><p>最后进行拉取镜像</p><blockquote><p>docker pull  镜像名称</p></blockquote></li></ul></li></ul><ul><li>查看所有镜像ID<blockquote><p>docker  images  -q</p></blockquote></li><li>删除镜像<blockquote><p>docker rmi  镜像名称/镜像 ID</p></blockquote></li></ul><h4 id="Docker容器使用"><a href="#Docker容器使用" class="headerlink" title="Docker容器使用"></a>Docker容器使用</h4><p>当运行容器时，使用的镜像如果在本地中不存在，docker 就会自动从 docker 镜像仓库中下载，默认是从 Docker Hub 公共镜像源下载。</p><ul><li>获取镜像<blockquote><p>docker pull 镜像名</p></blockquote></li><li>启动容器 <blockquote><p>docker run 镜像名</p></blockquote></li><li>查看所有容器<blockquote><p>docker ps -a</p></blockquote></li><li>启动一个已经停止的容器<blockquote><p>docker start 容器ID</p></blockquote></li><li>停止容器<blockquote><p>docker stop 容器ID</p></blockquote></li><li>重启容器<blockquote><p>docker restart 容器ID</p></blockquote></li><li>删除指定的容器(只能删除关闭的容器)<blockquote><p>docker rm  (-rf)  容器ID<br>-rf强制删除</p></blockquote></li></ul><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><h4 id="什么是-Dockerfile？"><a href="#什么是-Dockerfile？" class="headerlink" title="什么是 Dockerfile？"></a>什么是 Dockerfile？</h4><p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p><h4 id="Dockerfile的基本结构"><a href="#Dockerfile的基本结构" class="headerlink" title="Dockerfile的基本结构"></a>Dockerfile的基本结构</h4><p>Dockerfile 一般分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令，’#’ 为 Dockerfile 中的注释。</p><h4 id="Dockerfile文件说明"><a href="#Dockerfile文件说明" class="headerlink" title="Dockerfile文件说明"></a>Dockerfile文件说明</h4><p>Docker以从上到下的顺序运行Dockerfile的指令。为了指定基本映像，第一条指令必须是FROM。一个声明以＃字符开头则被视为注释。可以在Docker文件中使用RUN，CMD，FROM，EXPOSE，ENV等指令。<br>在这里列出了一些常用的指令。</p><ul><li><p>FROM</p><blockquote><p>FROM &lt;镜像名&gt;</p></blockquote><p>  FROM指定构建镜像的基础源镜像，如果本地没有指定的镜像，则会自动从 Docker 的公共库 pull 镜像下来。<br>  FROM必须是 Dockerfile 中非注释行的第一个指令，即一个 Dockerfile 从FROM语句开始。<br>  FROM可以在一个 Dockerfile 中出现多次，如果有需求在一个 Dockerfile 中创建多个镜像。<br>  如果FROM语句没有指定镜像标签，则默认使用latest标签。<br>RUN 有两种使用方式</p></li><li><p>RUN</p><blockquote><p>RUN  “executable”, “param1”, “param2”</p></blockquote><p>  每条RUN指令将在当前镜像基础上执行指定命令，并提交为新的镜像，后续的RUN都在之前RUN提交后的镜像为基础，镜像是分层的，可以通过一个镜像的任何一个历史提交点来创建，类似源码的 版本控制 。<br>  exec 方式会被解析为一个 JSON 数组，所以必须使用双引号而不是单引号。exec 方式不会调用一个命令 shell，所以也就不会继承相应的变量，如：</p><p>  RUN [ “echo”, “$HOME” ]<br>  这种方式是不会达到输出 HOME 变量的，正确的方式应该是这样的</p><p>  RUN [ “sh”, “-c”, “echo”, “$HOME” ]<br>  RUN产生的缓存在下一次构建的时候是不会失效的，会被重用，可以使用–no-cache选项，即docker build –no-cache，如此便不会缓存。</p></li><li><p>CMD<br>CMD有三种使用方式</p><blockquote><p>CMD &lt;shell 命令&gt;<br>CMD [“&lt;可执行文件或命令&gt;”,”<param1>“,”<param2>“,…]<br>CMD [“<param1>“,”<param2>“,…]  # 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数</param2></param1></param2></param1></p></blockquote><p>  类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:<br>  CMD 在docker run 时运行。<br>  RUN 是在 docker build。<br>  作用：为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。<br>  注意：如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。</p></li><li><p>ADD</p><blockquote><p>ADD <src>… <dest></dest></src></p></blockquote><p>  ADD复制本地主机文件、目录或者远程文件 URLS 从 并且添加到容器指定路径中 。<br>  支持通过 Go 的正则模糊匹配，具体规则可参见  Go filepath.Match</p><blockquote><p>ADD hom* /mydir/        # adds all files starting with “hom”<br>ADD hom?.txt /mydir/    # ? is replaced with any single character</p></blockquote><p>  路径必须是绝对路径，如果 不存在，会自动创建对应目录<br>  路径必须是 Dockerfile 所在路径的相对路径<br>  如果是一个目录，只会复制目录下的内容，而目录本身则不会被复制</p></li><li><p>COPY</p><blockquote><p>COPY <src>… <dest></dest></src></p></blockquote><p>  COPY复制新文件或者目录从 并且添加到容器指定路径中 。用法同ADD，唯一的不同是不能指定远程文件 URLS。</p></li></ul><p>Dockerfile学习自:<a href="https://www.docker.org.cn/dockerppt/114.html">https://www.docker.org.cn/dockerppt/114.html</a></p><h3 id="OK-本文到此结束"><a href="#OK-本文到此结束" class="headerlink" title="OK 本文到此结束"></a>OK 本文到此结束</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。&lt;br&gt;Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。&lt;/p&gt;</summary>
    
    
    
    <category term="部署" scheme="https://www.hr915.xyz/categories/%E9%83%A8%E7%BD%B2/"/>
    
    
    <category term="docker" scheme="https://www.hr915.xyz/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>三方支付</title>
    <link href="https://www.hr915.xyz/id_14/"/>
    <id>https://www.hr915.xyz/id_14/</id>
    <published>2020-08-15T12:46:25.000Z</published>
    <updated>2021-05-11T06:56:21.043Z</updated>
    
    <content type="html"><![CDATA[<p>三方支付流程：</p><pre><code>首先进入支付宝平台，点击开发中心-》研发服务获得沙箱的appid以及商户公钥和支付宝公钥然后利用秘钥生成软件生成私钥和公钥建立keys文件夹，  将私钥和公钥文件放入keys加入头部和尾部代码最后用支付宝公钥替换公钥文件</code></pre><a id="more"></a><p>支付宝开放平台：<a href="https://open.alipay.com/platform/home.htm">https://open.alipay.com/platform/home.htm</a></p><h4 id="1-支付宝沙箱商家应用RSA2密钥生成"><a href="#1-支付宝沙箱商家应用RSA2密钥生成" class="headerlink" title="1.支付宝沙箱商家应用RSA2密钥生成"></a>1.支付宝沙箱商家应用RSA2密钥生成</h4><p>可以使用支付宝开发助手来实现密钥的生成<br>具体步骤查看官方网站：<a href="https://opendocs.alipay.com/open/291/105971">https://opendocs.alipay.com/open/291/105971</a><br>同时配置到沙箱</p><h4 id="2-安装支付宝SDK模块"><a href="#2-安装支付宝SDK模块" class="headerlink" title="2.安装支付宝SDK模块"></a>2.安装支付宝SDK模块</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 支付宝的sdk已经集成为一个python模块，只需要安装模块进行开发。</span></span><br><span class="line">pip install pycryptodome</span><br><span class="line"></span><br><span class="line">pip install python-alipay-sdk --upgrade</span><br></pre></td></tr></tbody></table></figure><h4 id="3-安装完成-测试支付功能"><a href="#3-安装完成-测试支付功能" class="headerlink" title="3.安装完成 测试支付功能"></a>3.安装完成 测试支付功能</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> alipay <span class="keyword">import</span> AliPay</span><br><span class="line"></span><br><span class="line"><span class="comment"># 公钥</span></span><br><span class="line">alipay_public_key_string = <span class="string">"""-----BEGIN PUBLIC KEY-----</span></span><br><span class="line"><span class="string">此处填写公钥</span></span><br><span class="line"><span class="string">-----END PUBLIC KEY-----"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 私钥</span></span><br><span class="line">app_private_key_string = <span class="string">"""-----BEGIN RSA PRIVATE KEY-----</span></span><br><span class="line"><span class="string">此处填写私钥</span></span><br><span class="line"><span class="string">-----END RSA PRIVATE KEY-----"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化支付请求</span></span><br><span class="line">alipay = AliPay(</span><br><span class="line">    appid = <span class="string">"xxxxxxxxx"</span>,     <span class="comment"># APPID</span></span><br><span class="line">    app_notify_url = <span class="literal">None</span>,</span><br><span class="line">    app_private_key_string = app_private_key_string,</span><br><span class="line">    alipay_public_key_string = alipay_public_key_string,</span><br><span class="line">    sign_type = <span class="string">"RSA2"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发起支付请求</span></span><br><span class="line">order_string = alipay.api_alipay_trade_page_pay(</span><br><span class="line">    out_trade_no = <span class="string">'10001'</span>, <span class="comment">#订单号</span></span><br><span class="line">    total_amount= <span class="built_in">str</span>(<span class="number">10000</span>), <span class="comment">#支付金额</span></span><br><span class="line">    subject = <span class="string">'水果干果'</span>,</span><br><span class="line">    return_url=<span class="string">"http://127.0.0.1:8000/buyer/pr/"</span>,</span><br><span class="line">    <span class="comment"># 支付宝回调地址 </span></span><br><span class="line">    notify_url=<span class="string">"http://127.0.0.1:8000/buyer/pr/"</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(<span class="string">"https://openapi.alipaydev.com/gateway.do?"</span> + order_string)</span><br></pre></td></tr></tbody></table></figure><h4 id="4-最后附上流程图："><a href="#4-最后附上流程图：" class="headerlink" title="4.最后附上流程图："></a>4.最后附上流程图：</h4><p><img src="/id_14/01.png" alt="三方支付流程图"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;三方支付流程：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;首先进入支付宝平台，点击开发中心-》研发服务

获得沙箱的appid以及商户公钥和支付宝公钥

然后利用秘钥生成软件生成私钥和公钥

建立keys文件夹，  将私钥和公钥文件放入keys

加入头部和尾部代码

最后用支付宝公钥替换公钥文件&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="后端" scheme="https://www.hr915.xyz/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="django" scheme="https://www.hr915.xyz/tags/django/"/>
    
    <category term="三方" scheme="https://www.hr915.xyz/tags/%E4%B8%89%E6%96%B9/"/>
    
  </entry>
  
  <entry>
    <title>微博三方登录</title>
    <link href="https://www.hr915.xyz/id_13/"/>
    <id>https://www.hr915.xyz/id_13/</id>
    <published>2020-08-14T12:46:25.000Z</published>
    <updated>2021-05-11T06:56:21.056Z</updated>
    
    <content type="html"><![CDATA[<p>三方登录流程：</p><pre><code>   理解第三方登录的流程   用户向后端发起请求，我要用微博进行登录   我们的前端凑一个url让用户跳转到第三方应用的url(微博的登录页面)   用户在该界面点击输入用户名密码之后，点击授权。   微博有个回调url指向我们的后端。   我们的后端就可以获取到用户的基本信息等。</code></pre><a id="more"></a><p>微博开放平台网址：<a href="https://open.weibo.com/?sudaref=www.baidu.com">https://open.weibo.com/?sudaref=www.baidu.com</a></p><p>微博三方登录的指导思想：OAuth2.0授权认证</p><p>步骤：</p><h4 id="1-创建应用"><a href="#1-创建应用" class="headerlink" title="1.创建应用"></a>1.创建应用</h4><p><img src="/id_13/01.png" alt="创建应用"></p><h4 id="2-设置回调地址"><a href="#2-设置回调地址" class="headerlink" title="2.设置回调地址"></a>2.设置回调地址</h4><p><img src="/id_13/02.png" alt="设置回调地址"></p><h4 id="3-请求用户授权token"><a href="#3-请求用户授权token" class="headerlink" title="3. 请求用户授权token"></a>3. 请求用户授权token</h4><p><img src="/id_13/03.png" alt="请求用户授权Token"><br><img src="/id_13/04.png" alt="请求用户授权Token"><br><img src="/id_13/05.png" alt="请求用户授权Token"></p><ul><li>在前端写一个超链接用来向微博发送请求<figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://api.weibo.com/oauth2/authorize?client_id=xxxxxxxx&amp;redirect_uri=xxxxxxxx"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../../assets/240.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="4-获取授权过的Access-Token"><a href="#4-获取授权过的Access-Token" class="headerlink" title="4.获取授权过的Access Token"></a>4.获取授权过的Access Token</h4><img src="/id_13/06.png" alt="获取授权过的Acccess Token"><br><img src="/id_13/07.png" alt="获取授权过的Acccess Token"></li></ul><h4 id="5-在后端写一个接口用来进行网络请求-使用requests三方模块"><a href="#5-在后端写一个接口用来进行网络请求-使用requests三方模块" class="headerlink" title="5.在后端写一个接口用来进行网络请求(使用requests三方模块)"></a>5.在后端写一个接口用来进行网络请求(使用requests三方模块)</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeiboView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        code = request.GET.get(<span class="string">"code"</span>)</span><br><span class="line">        <span class="comment"># 通过python进行网络请求 requests</span></span><br><span class="line">        r = requests.post(<span class="string">"https://api.weibo.com/oauth2/access_token"</span>, {</span><br><span class="line">            <span class="comment"># App Key</span></span><br><span class="line">            <span class="string">"client_id"</span>: xxxx,</span><br><span class="line">            <span class="comment"># 密钥  App Secret</span></span><br><span class="line">            <span class="string">"client_secret"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="comment"># 请求的类型</span></span><br><span class="line">            <span class="string">"grant_type"</span>: <span class="string">"authorization_code"</span>,</span><br><span class="line">            <span class="comment"># 调用authorize获得的code值。</span></span><br><span class="line">            <span class="string">"code"</span>: code,</span><br><span class="line">            <span class="comment"># 回调地址</span></span><br><span class="line">            <span class="string">"redirect_uri"</span>: <span class="string">"http://127.0.0.1:8000/weibo/"</span></span><br><span class="line">        })</span><br><span class="line">        access_token = r.json()[<span class="string">'access_token'</span>]</span><br><span class="line">        uid = r.json()[<span class="string">'uid'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 先判断微博账号是否登录过，没有登录过则把账号添加到第三方表中，登陆过则返回登录信息</span></span><br><span class="line">        open_user = OpenUser.objects.<span class="built_in">filter</span>(uid=uid).first()</span><br><span class="line">        <span class="keyword">if</span> open_user:</span><br><span class="line">            <span class="comment"># 已经登录过了</span></span><br><span class="line">            user = open_user.user</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            user = User.objects.create(username=uid, password=uid)</span><br><span class="line">            <span class="comment"># 没有登录</span></span><br><span class="line">            OpenUser.objects.create(uid=uid, cate=<span class="string">"微博"</span>, user=user)</span><br><span class="line">        <span class="comment"># 生成令牌</span></span><br><span class="line">        token = jwt.encode({<span class="string">"uid"</span>:user.<span class="built_in">id</span>},<span class="string">'123'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 跳转到前端首页</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"登录成功,点击跳转&lt;a href='http://127.0.0.1:8080/#/index?token=%s&amp;username=%s'&gt;跳转&lt;/a&gt;"</span>%(token.decode(),uid))</span><br></pre></td></tr></tbody></table></figure><h4 id="6-OK-这样一个微博三方登录就做好啦"><a href="#6-OK-这样一个微博三方登录就做好啦" class="headerlink" title="6.OK 这样一个微博三方登录就做好啦"></a>6.OK 这样一个微博三方登录就做好啦</h4><h5 id="vue-git地址：https-gitee-com-before-l-annual-leave-vue-git"><a href="#vue-git地址：https-gitee-com-before-l-annual-leave-vue-git" class="headerlink" title="vue-git地址：https://gitee.com/before-l/annual-leave-vue.git"></a>vue-git地址：<a href="https://gitee.com/before-l/annual-leave-vue.git">https://gitee.com/before-l/annual-leave-vue.git</a></h5><h5 id="django-git地址-https-gitee-com-before-l-annual-leave-git"><a href="#django-git地址-https-gitee-com-before-l-annual-leave-git" class="headerlink" title="django-git地址:https://gitee.com/before-l/annual-leave.git"></a>django-git地址:<a href="https://gitee.com/before-l/annual-leave.git">https://gitee.com/before-l/annual-leave.git</a></h5>]]></content>
    
    
    <summary type="html">&lt;p&gt;三方登录流程：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   理解第三方登录的流程

   用户向后端发起请求，我要用微博进行登录

   我们的前端凑一个url让用户跳转到第三方应用的url(微博的登录页面)

   用户在该界面点击输入用户名密码之后，点击授权。

   微博有个回调url指向我们的后端。

   我们的后端就可以获取到用户的基本信息等。&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="后端" scheme="https://www.hr915.xyz/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="django" scheme="https://www.hr915.xyz/tags/django/"/>
    
    <category term="三方" scheme="https://www.hr915.xyz/tags/%E4%B8%89%E6%96%B9/"/>
    
  </entry>
  
  <entry>
    <title>接口测试中的异步调用和异步写入文件</title>
    <link href="https://www.hr915.xyz/id_19/"/>
    <id>https://www.hr915.xyz/id_19/</id>
    <published>2020-07-26T07:21:32.000Z</published>
    <updated>2021-05-11T06:56:21.016Z</updated>
    
    <content type="html"><![CDATA[<p>异步调用：<br>异步方法必须async 关键字声明<br>所有其他方法，耗时任务都需要加上await关键字，await必须依靠async<br>with用来建立工作流和关闭流对象</p><a id="more"></a><h4 id="异步发送100次请求"><a href="#异步发送100次请求" class="headerlink" title="异步发送100次请求"></a>异步发送100次请求</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 异步调用</span></span><br><span class="line"><span class="keyword">import</span> httpx</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url = <span class="string">'http://127.0.0.1:8000/p8/user'</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span>(<span class="params">client</span>):</span></span><br><span class="line">    r = <span class="keyword">await</span> client.get(url)</span><br><span class="line">    print(r.json())</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> httpx.AsyncClient() <span class="keyword">as</span> client:</span><br><span class="line">        <span class="comment"># 100 次调用</span></span><br><span class="line">        task_list = []</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">            req = request(client)</span><br><span class="line">            task = asyncio.create_task(req)</span><br><span class="line">            task_list.append(task)</span><br><span class="line">        <span class="keyword">await</span> asyncio.gather(*task_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment">#开始</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    asyncio.run(main())</span><br><span class="line">    <span class="comment"># 结束</span></span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">f'异步：发送100次请求，耗时：<span class="subst">{end - start}</span>'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="异步写文件"><a href="#异步写文件" class="headerlink" title="异步写文件"></a>异步写文件</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="keyword">await</span> f.write(<span class="string">"欢迎来到缅甸北部\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">fun</span>():</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiofiles.<span class="built_in">open</span>(<span class="string">"10000.txt"</span>, <span class="string">'a'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 列表推导式调用，更快，效率更高 </span></span><br><span class="line">        task = [asyncio.create_task(write(f)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>)]</span><br><span class="line">        <span class="comment"># 普通列表 相对于列表推导式要慢一点</span></span><br><span class="line">        <span class="comment"># test_list = []</span></span><br><span class="line">        <span class="comment"># for i in range(10000):</span></span><br><span class="line">        <span class="comment">#     w = write(f)</span></span><br><span class="line">        <span class="comment">#     task = asyncio.create_task(w)</span></span><br><span class="line">        <span class="comment">#     test_list.append(task)</span></span><br><span class="line">        <span class="keyword">await</span> asyncio.gather(*task)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    asyncio.run(fun())</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">"执行了%d秒"</span> % (end - start))</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;异步调用：&lt;br&gt;异步方法必须async 关键字声明&lt;br&gt;所有其他方法，耗时任务都需要加上await关键字，await必须依靠async&lt;br&gt;with用来建立工作流和关闭流对象&lt;/p&gt;</summary>
    
    
    
    <category term="后端" scheme="https://www.hr915.xyz/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="异步" scheme="https://www.hr915.xyz/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>位运算</title>
    <link href="https://www.hr915.xyz/id_23/"/>
    <id>https://www.hr915.xyz/id_23/</id>
    <published>2019-11-29T02:52:38.000Z</published>
    <updated>2021-05-11T06:56:21.116Z</updated>
    
    <content type="html"><![CDATA[<p>位运算是一切算法的基础<br>位运算是对二进制进行操作<br>使用位运算来判断奇偶数的时候效率要快一些，性能会高一些，因为二进制是计算机识别的语言，计算机不需要去强转然后判断，直接判断即可<br>例如；判断4是不是奇数或偶数</p><a id="more"></a><p>可以二进制直接和1进行比较<br>0b100 &amp; 1<br>0<br>也可以使用十进制直接和1比较<br>4 &amp; 1<br>0</p><blockquote><p> 返回为0 证明是偶数</p></blockquote><p>0b11 &amp; 1<br>1<br>3 &amp; 1<br>1</p><blockquote><p>返回为1 证明是奇数 </p></blockquote><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p>符号    描述    运算规则<br>&amp;    与    两个位都为1时，结果才为1<br>|    或    两个位都为0时，结果才为0<br>^    异或    两个位相同为0，相异为1<br>~    取反    0变1，1变0</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;位运算是一切算法的基础&lt;br&gt;位运算是对二进制进行操作&lt;br&gt;使用位运算来判断奇偶数的时候效率要快一些，性能会高一些，因为二进制是计算机识别的语言，计算机不需要去强转然后判断，直接判断即可&lt;br&gt;例如；判断4是不是奇数或偶数&lt;/p&gt;</summary>
    
    
    
    <category term="后端" scheme="https://www.hr915.xyz/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="进制" scheme="https://www.hr915.xyz/tags/%E8%BF%9B%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="https://www.hr915.xyz/id_26/"/>
    <id>https://www.hr915.xyz/id_26/</id>
    <published>2019-11-05T12:46:25.000Z</published>
    <updated>2021-05-11T06:56:21.097Z</updated>
    
    <content type="html"><![CDATA[<h4 id="设计模式简介"><a href="#设计模式简介" class="headerlink" title="设计模式简介"></a>设计模式简介</h4><p>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。</p><h4 id="设计模式有三大类："><a href="#设计模式有三大类：" class="headerlink" title="设计模式有三大类："></a>设计模式有三大类：</h4><ol><li>创建模式，提供实例化的方法，为适合的状况提供相应的对象创建方法。</li><li>结构化模式，通常用来处理实体之间的关系，使得这些实体能够更好地协同工作。</li><li>行为模式，用于在不同的实体建进行通信，为实体之间的通信提供更容易，更灵活的通信方法。</li></ol><a id="more"></a><p><strong>创建型</strong></p><ol><li><p>Factory Method（工厂方法）</p></li><li><p>Abstract Factory（抽象工厂）</p></li><li><p>Builder（建造者）</p></li><li><p>Prototype（原型）</p></li><li><p>Singleton（单例）</p></li></ol><p><strong>结构型</strong></p><ol start="6"><li><p>Adapter Class/Object（适配器）</p></li><li><p>Bridge（桥接）</p></li><li><p>Composite（组合）</p></li><li><p>Decorator（装饰）</p></li><li><p>Facade（外观）</p></li><li><p>Flyweight（享元）</p></li><li><p>Proxy（代理）</p></li></ol><p><strong>行为型</strong></p><ol start="13"><li><p>Interpreter（解释器）</p></li><li><p>Template Method（模板方法）</p></li><li><p>Chain of Responsibility（责任链）</p></li><li><p>Command（命令）</p></li><li><p>Iterator（迭代器）</p></li><li><p>Mediator（中介者）</p></li><li><p>Memento（备忘录）</p></li><li><p>Observer（观察者）</p></li><li><p>State（状态）</p></li><li><p>Strategy（策略）</p></li><li><p>Visitor（访问者）</p></li></ol><ul><li><h4 id="这里我们挑两个做例子"><a href="#这里我们挑两个做例子" class="headerlink" title="这里我们挑两个做例子"></a>这里我们挑两个做例子</h4></li></ul><p><strong>１．Factory Method（工厂方法）</strong><br><strong>意图：</strong><br>定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method 使一个类的实例化延迟到其子类。<br>工厂模式是用来解耦的<br>在工单审批中，使用工厂模式将串审和并审都封装起来，使用工厂模式来判断是串审还是并审，工厂模式还可以用来三方登录<br><strong>适用性：</strong><br>当一个类不知道它所必须创建的对象的类的时候。<br>当一个类希望由它的子类来指定它所创建的对象的时候。<br>当类将创建对象的职责委托给多个帮助子类中的某一个，并且你希望将哪一个帮助子类是代理者这一信息局部化的时候。 </p><p><img src="/id_26/%E5%B7%A5%E5%8E%82.png" alt="工厂模式"></p><p><strong>实现：</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 小汽车</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line">    <span class="comment"># 用于显示，return的数据repr会自动帮你打印出来</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'小汽车'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 口罩</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mask</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"口罩"</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span>:</span></span><br><span class="line">    <span class="comment"># 装饰器  静态方法</span></span><br><span class="line">    <span class="comment"># 类方法需用用类实例调用。静态方法不需要类实例，直接通过类名就可以调用</span></span><br><span class="line">    <span class="comment"># product 产品</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">product</span>(<span class="params">name</span>):</span></span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">"小汽车"</span>:</span><br><span class="line">            <span class="keyword">return</span> Car()</span><br><span class="line">        <span class="keyword">elif</span> name == <span class="string">'口罩'</span>:</span><br><span class="line">            <span class="keyword">return</span> Mask()</span><br><span class="line"></span><br><span class="line">print(SimpleFactory.product(<span class="string">'小汽车'</span>))</span><br><span class="line">print(SimpleFactory.product(<span class="string">"口罩"</span>))</span><br></pre></td></tr></tbody></table></figure><p><strong>2. Singleton（单例）</strong><br><strong>意图：</strong><br>单例模式是为了提高性能<br>保证一个类仅有一个实例，并提供一个访问它的全局访问点。<br>因为每个实例的内存地址都不一样，如果每个实例都开辟一块内存空间的话，内存会爆掉 </p><p><strong>适用性：</strong><br>当类只能有一个实例而且客户可以从一个众所周知的访问点访问它时。<br>当这个唯一实例应该是通过子类化可扩展的，并且客户应该无需更改代码就能使用一个扩展的实例时。</p><p><img src="/id_26/%E5%8D%95%E4%BE%8B.png" alt="单例模式"></p><p><strong>实现：</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 装饰器实现</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Singleton</span>(<span class="params">cls</span>):</span>  <span class="comment"># 这是一个函数，目的是要实现一个“装饰器”，而且是对类型的装饰器</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    cls:表示一个类名，即所要设计的单例类名称，</span></span><br><span class="line"><span class="string">        因为python一切皆对象，故而类名同样可以作为参数传递</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    instance = {}</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleton</span>(<span class="params">*args, **kargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instance:</span><br><span class="line">            instance[cls] = cls(*args, **kargs)  <span class="comment"># 如果没有cls这个类，则创建，并且将这个cls所创建的实例，保存在一个字典中</span></span><br><span class="line">        <span class="keyword">return</span> instance[cls]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> singleton</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">'张三'</span>, <span class="number">23</span>)</span><br><span class="line">s2 = Student(<span class="string">'李四'</span>, <span class="number">24</span>)</span><br><span class="line">print((s1 == s2))</span><br><span class="line">print(s1 <span class="keyword">is</span> s2)</span><br><span class="line">print(<span class="built_in">id</span>(s1), <span class="built_in">id</span>(s2), sep=<span class="string">'   '</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># __new__方法实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    instance = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, name, age</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls.instance:</span><br><span class="line">            cls.instance = <span class="built_in">super</span>(Student, cls).__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls.instance</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">'张三'</span>, <span class="number">23</span>)</span><br><span class="line">s2 = Student(<span class="string">'李四'</span>, <span class="number">24</span>)</span><br><span class="line">print((s1 == s2))</span><br><span class="line">print(s1 <span class="keyword">is</span> s2)</span><br><span class="line">print(<span class="built_in">id</span>(s1), <span class="built_in">id</span>(s2), sep=<span class="string">'   '</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;设计模式简介&quot;&gt;&lt;a href=&quot;#设计模式简介&quot; class=&quot;headerlink&quot; title=&quot;设计模式简介&quot;&gt;&lt;/a&gt;设计模式简介&lt;/h4&gt;&lt;p&gt;设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。&lt;/p&gt;
&lt;h4 id=&quot;设计模式有三大类：&quot;&gt;&lt;a href=&quot;#设计模式有三大类：&quot; class=&quot;headerlink&quot; title=&quot;设计模式有三大类：&quot;&gt;&lt;/a&gt;设计模式有三大类：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;创建模式，提供实例化的方法，为适合的状况提供相应的对象创建方法。&lt;/li&gt;
&lt;li&gt;结构化模式，通常用来处理实体之间的关系，使得这些实体能够更好地协同工作。&lt;/li&gt;
&lt;li&gt;行为模式，用于在不同的实体建进行通信，为实体之间的通信提供更容易，更灵活的通信方法。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="后端" scheme="https://www.hr915.xyz/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="python" scheme="https://www.hr915.xyz/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>redis键空间事件</title>
    <link href="https://www.hr915.xyz/id_17/"/>
    <id>https://www.hr915.xyz/id_17/</id>
    <published>2019-10-19T12:46:25.000Z</published>
    <updated>2021-05-11T06:56:21.027Z</updated>
    
    <content type="html"><![CDATA[<p>Redis的键空间通知(keyspace notifications)功能是自2.8.0版本开始加入的，客户端可以通过订阅/发布(Pub/Sub)机制，接收那些以某种方式改变了Redis数据空间的事件通知。比如：所有改变给定key的命令；所有经过lpush操作的key；所有在0号数据库中过期的key等等。<br>通知是通过Redis的订阅/发布机制发送的，因此，所有支持订阅/发布功能的客户端都可在无需调整的情况下，使用键空间通知功能。</p><a id="more"></a><h4 id="启用"><a href="#启用" class="headerlink" title="启用"></a>启用</h4><p>因键空间通知功能需要耗费一定的CPU时间，因此默认情况下，该功能是关闭的。<br>可以通过修改配置文件redis.conf，或者通过config set notify-keyspace-events KEA，来启用或关闭该功能。</p><p>KEA字符串表示启用了所有可能的事件。要查看每个字符的含义，请参考文档：<a href="https://redis.io/topics/notifications">https://redis.io/topics/notifications</a><br>CLI 可以在特殊模式下工作，允许您订阅一个通道以接收消息。</p><h4 id="事件的类型"><a href="#事件的类型" class="headerlink" title="事件的类型"></a>事件的类型</h4><p> 针对改变Redis数据空间的每个操作，键空间通知都会发送两类不同的事件。<br>比如在0号数库中，执行del mykey操作，将会触发两个消息，等价于执行下面两个publish命令：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PUBLISH __keyspace@0__:mykey <span class="keyword">del</span></span><br><span class="line">PUBLISH __keyevent@0__:<span class="keyword">del</span> mykey</span><br></pre></td></tr></tbody></table></figure><p>一个频道发布0号数据库中，所有针对mykey键执行的操作，这类事件，以keyspace为前缀，称为keyspace通知；<br> 另一个频道发布0号数据库中，所有成功执行del操作的键，这类事件，以keyevent为前缀，称为keyevent通知；<br> 在上面的例子中，当执行del  mykey时，会发生：<br> a：keyspace频道的订阅者会收到消息，消息中包含键执行的操作的名字；<br> b：keyevent频道的订阅者会收到消息，消息中包含执行某种操作的键的名字；<br> 可以通过配置，使Redis仅发送某一类我们感兴趣的通知。</p><h4 id="案例-1-for-example-："><a href="#案例-1-for-example-：" class="headerlink" title="案例 1 for example ："></a>案例 1 for example ：</h4><ol><li>Redis发布所有通知，客户端A订阅所有消息：<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; config <span class="built_in">set</span> notify-keyspace-events KEA</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;  psubscribe __key*@0__:*</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line"><span class="number">1</span>) <span class="string">"psubscribe"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"__key*@0__:*"</span></span><br><span class="line"><span class="number">3</span>) (integer) <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure></li><li>  然后，在客户端B上执行set和del命令：<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> liu HR</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">del</span> liu</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;</span><br></pre></td></tr></tbody></table></figure></li><li>此时客户端A的打印就变成了这样： <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) <span class="string">"pmessage"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"__key*@0__:*"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"__keyspace@0__:liu"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"set"</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"pmessage"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"__key*@0__:*"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"__keyevent@0__:set"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"liu"</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"pmessage"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"__key*@0__:*"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"__keyspace@0__:liu"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"del"</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"pmessage"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"__key*@0__:*"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"__keyevent@0__:del"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"liu"</span></span><br></pre></td></tr></tbody></table></figure></li><li>可见，针对每一个操作，客户端A都收到了两种消息，分别是keyspace和keyevent消息。</li></ol><h4 id="案例-2-for-example-："><a href="#案例-2-for-example-：" class="headerlink" title="案例 2 for example ："></a>案例 2 for example ：</h4><ol><li>使Redis仅发布keyspace通知，而客户端A订阅所有消息类型：<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; config <span class="built_in">set</span> notify-keyspace-events KA</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; psubscribe __key*@0__:*</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line"><span class="number">1</span>) <span class="string">"psubscribe"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"__key*@0__:*"</span></span><br><span class="line"><span class="number">3</span>) (integer) <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure></li><li>然后，在客户端B上执行set和del命令：<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> liu HR</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">del</span> liu</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">del</span> liu</span><br><span class="line">(integer) <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure></li><li>此时客户端A的打印就变成了这样： <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) <span class="string">"pmessage"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"__key*@0__:*"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"__keyspace@0__:liu"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"set"</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"pmessage"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"__key*@0__:*"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"__keyspace@0__:liu"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"del"</span></span><br></pre></td></tr></tbody></table></figure></li><li>可见，尽管客户端A订阅了所有消息，但是Redis仅发布了keyspace事件。<br>而且，在客户端B上执行了两次del操作，而只有第一个del成功执行了，从而产生了一个事件。</li></ol><h4 id="案例-3-for-example-："><a href="#案例-3-for-example-：" class="headerlink" title="案例 3 for example ："></a>案例 3 for example ：</h4><ol><li>Redis发布所有通知，客户端A仅订阅keyspace消息<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; config <span class="built_in">set</span> notify-keyspace-events KEA</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; psubscribe __keyspace@0__:*</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line"><span class="number">1</span>) <span class="string">"psubscribe"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"__keyspace@0__:*"</span></span><br><span class="line"><span class="number">3</span>) (integer) <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure></li><li>然后，在客户端B上执行set和del命令：<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> liu HR</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">del</span> liu</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">del</span> liu</span><br><span class="line">(integer) <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure></li><li>此时客户端A的打印就变成了这样： <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) <span class="string">"pmessage"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"__keyspace@0__:*"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"__keyspace@0__:liu"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"set"</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"pmessage"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"__keyspace@0__:*"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"__keyspace@0__:liu"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"del"</span></span><br></pre></td></tr></tbody></table></figure></li><li>可见，针对每一个操作，客户端A只收到了keyspace消息</li></ol><h4 id="案例-4-for-example-："><a href="#案例-4-for-example-：" class="headerlink" title="案例 4 for example ："></a>案例 4 for example ：</h4><ol><li>Redis仅发布字符串特定类型的通知，客户端A订阅所有类型的消息<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; config <span class="built_in">set</span> notify-keyspace-events KE$</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; psubscribe __key*@0__:*</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line"><span class="number">1</span>) <span class="string">"psubscribe"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"__key*@0__:*"</span></span><br><span class="line"><span class="number">3</span>) (integer) <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure></li><li>在客户端B上，分别执行lpush，set和del命令：<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lpush <span class="built_in">list</span> liu hui ran</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> liu HR</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">del</span> liu</span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure></li><li>此时客户端A的打印就变成了这样：<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) <span class="string">"pmessage"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"__key*@0__:*"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"__keyspace@0__:liu"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"set"</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"pmessage"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"__key*@0__:*"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"__keyevent@0__:set"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"liu"</span></span><br></pre></td></tr></tbody></table></figure></li><li>可见，针对字符串，产生了keyspace和keyevent类型的消息，而针对列表的lpush命令并没有产生消息，而且，del命令是非特定类型的命令，也没有产生消息。</li></ol><h4 id="OK-本文到此结束"><a href="#OK-本文到此结束" class="headerlink" title="OK,本文到此结束"></a>OK,本文到此结束</h4><p>要查看所有有可能的时间，请参考文档：<a href="https://redis.io/topics/notifications">https://redis.io/topics/notifications</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Redis的键空间通知(keyspace notifications)功能是自2.8.0版本开始加入的，客户端可以通过订阅/发布(Pub/Sub)机制，接收那些以某种方式改变了Redis数据空间的事件通知。比如：所有改变给定key的命令；所有经过lpush操作的key；所有在0号数据库中过期的key等等。&lt;br&gt;通知是通过Redis的订阅/发布机制发送的，因此，所有支持订阅/发布功能的客户端都可在无需调整的情况下，使用键空间通知功能。&lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="https://www.hr915.xyz/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="redis" scheme="https://www.hr915.xyz/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis发布订阅</title>
    <link href="https://www.hr915.xyz/id_16/"/>
    <id>https://www.hr915.xyz/id_16/</id>
    <published>2019-10-18T12:46:25.000Z</published>
    <updated>2021-05-11T06:56:21.105Z</updated>
    
    <content type="html"><![CDATA[<p>Redis提供了发布订阅功能，跟消息中间件是类似的，可以用于消息的传输，Redis提供了一组命令可以让开发者实现“发布/订阅”模式 (publish/subscribe) ，该模式同样可以实现进程间的消息传递。<br>它的实现原理是发布/订阅模式包含两种角色，分别是发布者和订阅者。订阅者可以订阅一个或多个频道，而发布者可以向指定的 频道发送消息，所有订阅此频道的订阅者都会收到该消息。</p><a id="more"></a><h4 id="关系图"><a href="#关系图" class="headerlink" title="关系图"></a>关系图</h4><p><img src="/id_16/01.png" alt="发布订阅"></p><h4 id="redis-消息订阅和发布命令："><a href="#redis-消息订阅和发布命令：" class="headerlink" title="redis 消息订阅和发布命令："></a>redis 消息订阅和发布命令：</h4><ol><li>psubscribe pattern [pattern…] ：订阅一个或多个给定模式的 频道</li><li>punsubscribe [pattern [pttern…]]：退订所有频道给定模式的频道</li><li>pubsub subcommand [argument [argument…]]：查看订阅与发布系统状态</li><li>publish channel message：将信息发送到指定的频道</li><li>subscribe channel [channel…]：订阅给定的一个或多个频道信息。</li><li>unsubscribe [channel [channel…]]：指退订给定的频道。</li></ol><h4 id="案例-for-example-："><a href="#案例-for-example-：" class="headerlink" title="案例 for example ："></a>案例 for example ：</h4><p><strong>注意</strong>：需要打开两个小黑窗口哦！</p><ol><li><p>一次订阅多个频道 c1,c2,c3 (subscribe c1 c2 c3)<br><img src="/id_16/02.png" alt="订阅多个频道"></p></li><li><p>消息发布，向c2频道发布消息 (publish c2 hello-redis)<br><img src="/id_16/03.png" alt="向指定频道发布消息"></p></li><li><p>订阅给定模式的频道，通配符* (psubscribe new*)<br><img src="/id_16/04.png" alt="订阅特定模式的频道"></p></li><li><p>发布消息 (publish new1 redis-hello)<br><img src="/id_16/05.png" alt="发布消息"></p></li></ol><h4 id="OK-本文到此结束"><a href="#OK-本文到此结束" class="headerlink" title="OK 本文到此结束"></a>OK 本文到此结束</h4>]]></content>
    
    
    <summary type="html">&lt;p&gt;Redis提供了发布订阅功能，跟消息中间件是类似的，可以用于消息的传输，Redis提供了一组命令可以让开发者实现“发布/订阅”模式 (publish/subscribe) ，该模式同样可以实现进程间的消息传递。&lt;br&gt;它的实现原理是发布/订阅模式包含两种角色，分别是发布者和订阅者。订阅者可以订阅一个或多个频道，而发布者可以向指定的 频道发送消息，所有订阅此频道的订阅者都会收到该消息。&lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="https://www.hr915.xyz/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="redis" scheme="https://www.hr915.xyz/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>ECharts 的使用</title>
    <link href="https://www.hr915.xyz/id_44/"/>
    <id>https://www.hr915.xyz/id_44/</id>
    <published>2019-10-01T02:32:14.000Z</published>
    <updated>2021-05-11T06:58:42.593Z</updated>
    
    <content type="html"><![CDATA[<h3 id="echarts-实例"><a href="#echarts-实例" class="headerlink" title="echarts 实例"></a>echarts 实例</h3><p>一个网页中可以创建多个 echarts 实例 。每个 echarts 实例 中可以创建多个图表和坐标系等等（用 option 来描述）。准备一个 DOM 节点（作为 echarts 的渲染容器），就可以在上面创建一个 echarts 实例。每个 echarts 实例独占一个 DOM 节点。</p><a id="more"></a>      <p><img src="https://i.loli.net/2021/04/20/cLw2RT3pnZU5zot.png" alt="实例1.png"></p><h3 id="系列（series）"><a href="#系列（series）" class="headerlink" title="系列（series）"></a>系列（series）</h3><ul><li><p>系列 （series）是很常见的名词。在 echarts 里， 系列 （series）是指：一组数值以及他们映射成的图。“系列” 这个词原本可能来源于 “一系列的数据”，而在 echarts 中取其扩展的概念，不仅表示数据，也表示数据映射成为的图。所以，一个 系列 包含的要素至少有：一组数值、图表类型（ series.type ）、以及其他的关于这些数据如何映射成图的参数。</p></li><li><p> echarts 里系列类型（ series.type ）就是图表类型。系列类型（ series.type ）至少有：line（折线图）、bar（柱状图）、pie（饼图）、scatter（散点图）、graph（关系图）、tree（树图）</p></li><li><p> 如下图，右侧的 option 中声明了三个 系列 （series）：pie（饼图系列）、line（折线图系列）、bar（柱状图系列），每个系列中有他所需要的数据（series.data）</p></li></ul><p><img src="https://i.loli.net/2021/04/20/lDtcuE531YvyWS7.png" alt="系列1.png"></p><ul><li>类同地，下图中是另一种配置方式，系列的数据从 dataset 中取：</li></ul><p><img src="https://i.loli.net/2021/04/20/xWT3XwbJOioeAS9.png" alt="实例2.png"></p><h3 id="组件（component）"><a href="#组件（component）" class="headerlink" title="组件（component）"></a>组件（component）</h3><ul><li>在系列之上，echarts 中各种内容，被抽象为 “组件”。例如，echarts 中至少有这些组件：xAxis（直角坐标系 X 轴）、yAxis（直角坐标系 Y 轴）、grid（直角坐标系底板）、angleAxis（极坐标系角度轴）、radiusAxis（极坐标系半径轴）、polar（极坐标系底板）、geo（地理坐标系）、dataZoom（数据区缩放组件）、visualMap（视觉映射组件）、tooltip（提示框组件）、toolbox（工具栏组件）、series（系列）、… </li><li>我们注意到，其实系列（series）也是一种组件，可以理解为：系列是专门绘制 “图” 的组件。 </li><li>如下图，右侧的 option 中声明了各个组件（包括系列），各个组件就出现在图中。</li></ul><p><img src="https://i.loli.net/2021/04/20/6wEDF9luaCN4KPW.png" alt="组件.png"></p><h2 id="话不多说上代码"><a href="#话不多说上代码" class="headerlink" title="话不多说上代码"></a>话不多说上代码</h2><h3 id="直接引入-echarts"><a href="#直接引入-echarts" class="headerlink" title="直接引入 echarts"></a>直接引入 echarts</h3><ul><li><p><strong>安装 echarts 项目依赖</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install echarts --save</span><br><span class="line">// 或者</span><br><span class="line">npm install echarts -S</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>全局引入</strong></p><p>我们安装完成之后，可以在 main.js 中全局引入 echarts</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import echarts from "echarts";</span><br><span class="line">Vue.prototype.$echarts = echarts;</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>创建柱形图表</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="app"&gt;</span><br><span class="line">    &lt;div id="main" style="width: 600px;height:400px;"&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">export default {</span><br><span class="line">  name: "app",</span><br><span class="line">  methods: {</span><br><span class="line">    drawChart() {</span><br><span class="line">      // 基于准备好的dom，初始化echarts实例</span><br><span class="line">      let myChart = this.$echarts.init(document.getElementById("main"));</span><br><span class="line">      // 指定图表的配置项和数据</span><br><span class="line">      let option = {</span><br><span class="line">        title: {</span><br><span class="line">          text: "ECharts 入门示例"</span><br><span class="line">        },</span><br><span class="line">        tooltip: {},</span><br><span class="line">        legend: {</span><br><span class="line">          data: ["销量"]</span><br><span class="line">        },</span><br><span class="line">        xAxis: {</span><br><span class="line">          data: ["衬衫", "羊毛衫", "雪纺衫", "裤子", "高跟鞋", "袜子"]</span><br><span class="line">        },</span><br><span class="line">        yAxis: {},</span><br><span class="line">        series: [</span><br><span class="line">          {</span><br><span class="line">            name: "销量",</span><br><span class="line">            type: "bar",</span><br><span class="line">            data: [5, 20, 36, 10, 10, 20]</span><br><span class="line">          }</span><br><span class="line">        ]</span><br><span class="line">      };</span><br><span class="line">      // 使用刚指定的配置项和数据显示图表。</span><br><span class="line">      myChart.setOption(option);</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    this.drawChart();</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>用 websocket 实现实时折线图</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="myChart" class="chart" :style="{width: '100%', height: '500px'}" :option='loadLine'&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">import echarts from 'echarts'</span><br><span class="line">export default {</span><br><span class="line">  name: 'xwPassengerFlow',</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      Time: [], //x 轴数据，可根据需求</span><br><span class="line">      NewZealand: [], // 数据 1</span><br><span class="line">      USA: [], // 数据 2</span><br><span class="line">      Australia:[] // 数据 3</span><br><span class="line">      </span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">       this.loadLine()       // 渲染折线图</span><br><span class="line">       this.websocketinit()  // 钩子函数中链接 websocket</span><br><span class="line">  },</span><br><span class="line">  watch:{    // 实现监听，当有新数据再次渲染</span><br><span class="line">  Time:function(){</span><br><span class="line">  this.loadLine()</span><br><span class="line">  }</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    loadLine() {</span><br><span class="line">      var option = {</span><br><span class="line">        title: {</span><br><span class="line">          text: '折线图堆叠'</span><br><span class="line">        },</span><br><span class="line">        tooltip: {</span><br><span class="line">          trigger: 'axis'</span><br><span class="line">        },</span><br><span class="line">        legend: {</span><br><span class="line">          data:[ '新西兰元', '澳大利亚元', '美元']</span><br><span class="line">        },</span><br><span class="line">        grid: {</span><br><span class="line">          left: '3%',</span><br><span class="line">          right: '4%',</span><br><span class="line">          bottom: '3%',</span><br><span class="line">          containLabel: true</span><br><span class="line">        },</span><br><span class="line">        xAxis: {</span><br><span class="line">          type: 'category',</span><br><span class="line">          boundaryGap: false,</span><br><span class="line">          data: this.Time //x 轴数据</span><br><span class="line">        },</span><br><span class="line">        yAxis: {</span><br><span class="line">          type: 'value'</span><br><span class="line">        },</span><br><span class="line">        series: [</span><br><span class="line">        </span><br><span class="line">          {</span><br><span class="line">            name: '新西兰元',</span><br><span class="line">            type: 'line',</span><br><span class="line">      </span><br><span class="line">            data: this.NewZealand //y 轴数据 2</span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">            name: '澳大利亚元',</span><br><span class="line">            type: 'line',</span><br><span class="line">            data: this.Australia//y 轴数据 3</span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">            name: '美元',</span><br><span class="line">            type: 'line',</span><br><span class="line">            stack: '总量',</span><br><span class="line">            data: this.USA //y 轴数据 5</span><br><span class="line">          },</span><br><span class="line">       </span><br><span class="line">        ]</span><br><span class="line">      }</span><br><span class="line">      this.myChartOne = echarts.init(document.getElementById('myChart'))</span><br><span class="line">      this.myChartOne.setOption(option)</span><br><span class="line">    },</span><br><span class="line">     // 连接聊天</span><br><span class="line">    websocketinit:function(){</span><br><span class="line">        // 判断浏览器是否支持 websocket</span><br><span class="line">  if('WebSocket' in window){</span><br><span class="line">    console.log('支持')</span><br><span class="line">    // 生成 websocket 连接</span><br><span class="line">    var ws = new WebSocket('ws://192.168.1.27:8000/apps/websocketlink/')</span><br><span class="line">    // var ws = new WebSocket('ws://192.168.1.157:8000/chat_room_websocket/')</span><br><span class="line">    // 发送链接请求</span><br><span class="line">    ws.onopen = function () {</span><br><span class="line">      ws.send('test')</span><br><span class="line">    }</span><br><span class="line">    // 发送消息</span><br><span class="line">    ws.onmessage =  (evt) =&gt;{</span><br><span class="line">      // 将获取信息打印</span><br><span class="line">      console.log(evt.data)</span><br><span class="line">      var msg =JSON.parse(evt.data) </span><br><span class="line">      this.Time.push(msg.Time)</span><br><span class="line">      this.NewZealand.push(msg.NewZealand)</span><br><span class="line">      this.Australia.push(msg.Australia)</span><br><span class="line">      this.USA.push(msg.USA) </span><br><span class="line">    </span><br><span class="line">    }</span><br><span class="line">    ws.onerror = (e)=&gt;{</span><br><span class="line">      console.log('错误信息',e)</span><br><span class="line">      // this.websocketinit()</span><br><span class="line">    }</span><br><span class="line">    // 捕获断开连接</span><br><span class="line">    ws.onclose = function () {</span><br><span class="line">      console.log('链接已关闭')</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  }</span><br><span class="line">}}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;echarts-实例&quot;&gt;&lt;a href=&quot;#echarts-实例&quot; class=&quot;headerlink&quot; title=&quot;echarts 实例&quot;&gt;&lt;/a&gt;echarts 实例&lt;/h3&gt;&lt;p&gt;一个网页中可以创建多个 echarts 实例 。每个 echarts 实例 中可以创建多个图表和坐标系等等（用 option 来描述）。准备一个 DOM 节点（作为 echarts 的渲染容器），就可以在上面创建一个 echarts 实例。每个 echarts 实例独占一个 DOM 节点。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>无限级递归分类</title>
    <link href="https://www.hr915.xyz/id_12/"/>
    <id>https://www.hr915.xyz/id_12/</id>
    <published>2019-08-28T12:46:25.000Z</published>
    <updated>2021-05-11T06:51:26.566Z</updated>
    
    <content type="html"><![CDATA[<p>所谓的无限极分类是啥？其实简单点说就是一个人类可以繁衍出多个后代，然后一个后代又可以分另外多个后代这样无限繁衍下去（举例：家族族谱），就好象linux系统你可以新建一个文件夹，然后在这个文件夹里又可以建一些个文件夹，在文件夹底下还可以建一些文件夹一样，随后使用tree命令就可以查看文件夹目录层级。<br>那么这种层级结构也成为树结构在日常的开发需求里也是很常见的，比如美多商城系统的商品分类，课程的目录章节，以及以及论坛里的帖子回复等等</p><a id="more"></a><h3 id="话不多说，上案例："><a href="#话不多说，上案例：" class="headerlink" title="话不多说，上案例："></a>话不多说，上案例：</h3><h4 id="首先，打开django项目中的models-py，新建一个类别的模型类，这里我们以最简单的parentid的形式来建立"><a href="#首先，打开django项目中的models-py，新建一个类别的模型类，这里我们以最简单的parentid的形式来建立" class="headerlink" title="首先，打开django项目中的models.py，新建一个类别的模型类，这里我们以最简单的parentid的形式来建立"></a>首先，打开django项目中的models.py，新建一个类别的模型类，这里我们以最简单的parentid的形式来建立</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cate</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="comment"># 分类名称</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">500</span>)</span><br><span class="line">    <span class="comment"># 父级id</span></span><br><span class="line">    pid = models.IntegerField()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 表名</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'cate'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></tbody></table></figure><h4 id="由于我们的项目基于drf框架，所以要增加一个序列器类"><a href="#由于我们的项目基于drf框架，所以要增加一个序列器类" class="headerlink" title="由于我们的项目基于drf框架，所以要增加一个序列器类"></a>由于我们的项目基于drf框架，所以要增加一个序列器类</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> WXJapp.models <span class="keyword">import</span> Cate</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CateSer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Cate</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br></pre></td></tr></tbody></table></figure><h4 id="由于django序列化出来的类不具备层级结构，所以我们提前写好一个用来递归的方法："><a href="#由于django序列化出来的类不具备层级结构，所以我们提前写好一个用来递归的方法：" class="headerlink" title="由于django序列化出来的类不具备层级结构，所以我们提前写好一个用来递归的方法："></a>由于django序列化出来的类不具备层级结构，所以我们提前写好一个用来递归的方法：</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xTree</span>(<span class="params">datas</span>):</span></span><br><span class="line">    lists = []</span><br><span class="line">    tree = {}</span><br><span class="line">    parent_id = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> datas:</span><br><span class="line">        item = i</span><br><span class="line">        print(item)</span><br><span class="line">        tree[item[<span class="string">'id'</span>]] = item</span><br><span class="line">    root = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> datas:</span><br><span class="line">        obj = i</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> obj[<span class="string">'pid'</span>]:</span><br><span class="line">            root = tree[obj[<span class="string">'id'</span>]]</span><br><span class="line">            lists.append(root)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            parent_id = obj[<span class="string">'pid'</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'childlist'</span> <span class="keyword">not</span> <span class="keyword">in</span> tree[parent_id]:</span><br><span class="line">                tree[parent_id][<span class="string">'childlist'</span>] = []</span><br><span class="line">            tree[parent_id][<span class="string">'childlist'</span>].append(tree[obj[<span class="string">'id'</span>]])</span><br><span class="line">    <span class="keyword">return</span> lists</span><br></pre></td></tr></tbody></table></figure><h4 id="此时我们写一个视图接口，从数据库中读取数据就可以了"><a href="#此时我们写一个视图接口，从数据库中读取数据就可以了" class="headerlink" title="此时我们写一个视图接口，从数据库中读取数据就可以了"></a>此时我们写一个视图接口，从数据库中读取数据就可以了</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTree</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="comment"># 获取订单列表</span></span><br><span class="line">        catelist = Cate.objects.<span class="built_in">all</span>()</span><br><span class="line">        <span class="comment"># 序列化</span></span><br><span class="line">        catelist_ser = CateSer(catelist, many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        mylist = xTree(catelist_ser.data)</span><br><span class="line">        print(mylist)</span><br><span class="line">        <span class="keyword">return</span> Response(mylist)</span><br></pre></td></tr></tbody></table></figure><h4 id="最后，再配个路由"><a href="#最后，再配个路由" class="headerlink" title="最后，再配个路由"></a>最后，再配个路由</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> WXJapp.views <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'mytree/'</span>, MyTree.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><h3 id="这样我们的后端就写好了"><a href="#这样我们的后端就写好了" class="headerlink" title="这样我们的后端就写好了"></a>这样我们的后端就写好了</h3><h4 id="向数据库中添加测试数据"><a href="#向数据库中添加测试数据" class="headerlink" title="向数据库中添加测试数据"></a>向数据库中添加测试数据</h4><p><img src="/id_12/01.png" alt="测试数据"></p><h4 id="Postman测试后端接口"><a href="#Postman测试后端接口" class="headerlink" title="Postman测试后端接口"></a>Postman测试后端接口</h4><p><img src="/id_12/02.png" alt="测试接口"></p><h3 id="现在我们开始写前端，"><a href="#现在我们开始写前端，" class="headerlink" title="现在我们开始写前端，"></a>现在我们开始写前端，</h3><h4 id="打开vue项目，封装一个WXJcate-vue递归组件"><a href="#打开vue项目，封装一个WXJcate-vue递归组件" class="headerlink" title="打开vue项目，封装一个WXJcate.vue递归组件"></a>打开vue项目，封装一个WXJcate.vue递归组件</h4><p>所谓递归组件: 就是组件可以在它们自己的模板中调用自身，不过它们只能通过 name 选项来做这件事，例如给组件设置属性 name: ‘WJXcate’，然后在模板中就可以使用 WXJcate 调用自己进行递归调用了</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;div :class="[data.id==0 ? 'root': '', 'wxjcate']"&gt;{{ data.name }}&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;ul v-if="data.childlist &amp;&amp; data.childlist.length&gt;0"&gt;</span><br><span class="line">        &lt;WXJcate v-for="child in data.childlist" :key="child.id" :data="child"/&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  name: 'WXJcate', // 递归组件需要设置 name 属性，才能在模板中调用自己</span><br><span class="line">  props:['data'],</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style &gt;</span><br><span class="line">.wxjcate {</span><br><span class="line">  padding-left: 8px;</span><br><span class="line">  border-left: 1px solid gray;</span><br><span class="line">}</span><br><span class="line">ul {</span><br><span class="line">  padding-left: 20px;</span><br><span class="line">  list-style: none;</span><br><span class="line">}</span><br><span class="line">.root { display: none; }</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="然后就可以在其他页面中调用这个递归组件"><a href="#然后就可以在其他页面中调用这个递归组件" class="headerlink" title="然后就可以在其他页面中调用这个递归组件"></a>然后就可以在其他页面中调用这个递归组件</h4><p>在WXJ_Index调用递归组件并请求后端的数据</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;WXJcate :data="data" /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import WXJcate from './WXJcate.vue';</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  data () {</span><br><span class="line">    return {</span><br><span class="line">      data:{},</span><br><span class="line">      online: 0</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  components: {</span><br><span class="line">    WXJcate</span><br><span class="line">  },</span><br><span class="line"></span><br><span class="line">  //钩子方法</span><br><span class="line">  mounted:function(){</span><br><span class="line"></span><br><span class="line">    this.get_token();</span><br><span class="line">  },</span><br><span class="line">  //绑定事件</span><br><span class="line">  methods:{</span><br><span class="line">    get_token(){</span><br><span class="line">      this.$axios.get('mytree/').then((result) =&gt;{</span><br><span class="line">        // console.log(result);</span><br><span class="line">        var mytree = {'id':0,name:'123'};</span><br><span class="line">        mytree['childlist'] = result.data;</span><br><span class="line">        this.data = mytree;</span><br><span class="line">      });</span><br><span class="line">    },</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">.on {</span><br><span class="line">  background: #cdcbff;</span><br><span class="line">}</span><br><span class="line">.off {</span><br><span class="line">  background: #fefdff;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="这样我们的Web端就写好了"><a href="#这样我们的Web端就写好了" class="headerlink" title="这样我们的Web端就写好了"></a>这样我们的Web端就写好了</h3><h4 id="最后我们来看一下页面效果"><a href="#最后我们来看一下页面效果" class="headerlink" title="最后我们来看一下页面效果"></a>最后我们来看一下页面效果</h4><p><img src="/id_12/03.png" alt="最终效果"></p><p>django-git地址：<a href="https://gitee.com/before-l/celery-demo.git">https://gitee.com/before-l/celery-demo.git</a><br>vue-git地址：<a href="https://gitee.com/before-l/annual-leave-vue.git">https://gitee.com/before-l/annual-leave-vue.git</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;所谓的无限极分类是啥？其实简单点说就是一个人类可以繁衍出多个后代，然后一个后代又可以分另外多个后代这样无限繁衍下去（举例：家族族谱），就好象linux系统你可以新建一个文件夹，然后在这个文件夹里又可以建一些个文件夹，在文件夹底下还可以建一些文件夹一样，随后使用tree命令就可以查看文件夹目录层级。&lt;br&gt;那么这种层级结构也成为树结构在日常的开发需求里也是很常见的，比如美多商城系统的商品分类，课程的目录章节，以及以及论坛里的帖子回复等等&lt;/p&gt;</summary>
    
    
    
    <category term="后端" scheme="https://www.hr915.xyz/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="django" scheme="https://www.hr915.xyz/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>异步消费</title>
    <link href="https://www.hr915.xyz/id_22/"/>
    <id>https://www.hr915.xyz/id_22/</id>
    <published>2019-08-28T11:34:15.000Z</published>
    <updated>2021-05-11T06:56:21.078Z</updated>
    
    <content type="html"><![CDATA[<p>异步消费可以使用很多方式来实现，我们今天就来说说异步消费的其中三种实现方式:</p><ul><li>多线程</li><li>线程池</li><li>协程<a id="more"></a></li></ul><h4 id="首先，将封装的代码及逻辑写上"><a href="#首先，将封装的代码及逻辑写上" class="headerlink" title="首先，将封装的代码及逻辑写上"></a>首先，将封装的代码及逻辑写上</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span>:</span></span><br><span class="line">    <span class="comment"># 队列遵循先进先出的原则</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, **redis_kwargs</span>):</span></span><br><span class="line">        <span class="comment"># **kwarys不定长参数  用于可传可不传的参数 </span></span><br><span class="line">        <span class="comment"># kwargs是用来传键值对，args 一般用来传列表和元祖</span></span><br><span class="line">        <span class="comment"># self.__变量名：使用双下划线开头的变量是私有变量，在类外不可以被调用</span></span><br><span class="line">        <span class="comment"># redis的默认参数为：host='localhost', port=6379, db=0， 其中db为定义redis的第几个库</span></span><br><span class="line">        self.__db = redis.Redis(**redis_kwargs, decode_responses=<span class="literal">True</span>)</span><br><span class="line">        self.key = name</span><br><span class="line">        <span class="comment"># llen:获取列表长度</span></span><br><span class="line">        <span class="comment"># lrange:获取列表指定范围内的元素</span></span><br><span class="line">        self.r_len = self.__db.llen(self.key)</span><br><span class="line">        self.l = self.__db.lrange(self.key, <span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, x: <span class="built_in">tuple</span></span>):</span></span><br><span class="line">        <span class="comment"># rpush:在列表中添加一个或多个值</span></span><br><span class="line">        self.__db.rpush(self.key, x)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(self.__db.lrange(self.key, <span class="number">0</span>, -<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> self.__db.lrange(self.key, <span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 排序用来加权(加权是celery没有的)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sort</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 因为redis里存的是字符串，而排序的依据是元组中最后一个元素为int,所以使用-2下标</span></span><br><span class="line">        <span class="comment"># 此处可用eval </span></span><br><span class="line">        self.l = <span class="built_in">sorted</span>(self.l, key=<span class="keyword">lambda</span> x: x[-<span class="number">2</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> self.l</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># pop(0):移出并获取列表的第一个元素</span></span><br><span class="line">        <span class="comment"># lrem 根据第二个参数的值，移除列表中与参数相等的元素。</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.l:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        item = self.l.pop(<span class="number">0</span>)</span><br><span class="line">        self.__db.lrem(self.key, item, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 用来清空列表</span></span><br><span class="line">        <span class="keyword">return</span> self.__db.delete(self.key)</span><br><span class="line"></span><br><span class="line">q = MyQueue(<span class="string">"que"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    q.push((i, i + <span class="number">1</span>, i + <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dojob</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        result = q.pop()</span><br><span class="line">        <span class="comment"># 写逻辑</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        print(result)</span><br></pre></td></tr></tbody></table></figure><h4 id="使用多线程实现异步消费"><a href="#使用多线程实现异步消费" class="headerlink" title="使用多线程实现异步消费"></a>使用多线程实现异步消费</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):  <span class="comment"># 创建三个线程</span></span><br><span class="line">    thread = threading.Thread(target=dojob) <span class="comment">#调用任务</span></span><br><span class="line">    thread.start() <span class="comment"># 开启线程</span></span><br><span class="line">print(q.r_len)</span><br></pre></td></tr></tbody></table></figure><h4 id="使用线程池实现异步消费"><a href="#使用线程池实现异步消费" class="headerlink" title="使用线程池实现异步消费"></a>使用线程池实现异步消费</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 设置线程数最大为5</span></span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">5</span>) <span class="keyword">as</span> t:</span><br><span class="line">        [t.submit(dojob) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">        <span class="comment"># map(func, *iterables)，只是该函数将会启动多个线程，以异步方式立即对iterables执行map处理</span></span><br><span class="line">        <span class="comment"># 可以通过submit提交执行的函数到线程池中</span></span><br><span class="line"><span class="comment"># 线程池是系统来给分配任务</span></span><br></pre></td></tr></tbody></table></figure><h4 id="使用协程实现异步消费"><a href="#使用协程实现异步消费" class="headerlink" title="使用协程实现异步消费"></a>使用协程实现异步消费</h4><p>协程本质上就是一个线程，以前线程任务的切换是由操作系统控制的，遇到I/O自动切换，现在我们用协程的目的就是较少操作系统切换的开销（开关线程，创建寄存器、堆栈等，在他们之间进行切换等），在我们自己的程序里面来控制任务的切换<br>优点：</p><ol><li>协程的切换开销更小，属于程序级别的切换，操作系统完全感知不到，因而更加轻量级</li><li>单线程内就可以实现并发的效果，最大限度地利用cpu</li></ol><p>缺点：</p><ol><li>协程的本质是单线程下，无法利用多核，可以是一个程序开启多个进程，每个进程内开启多个线程，每个线程内开启协程</li><li>协程指的是单个线程，因而一旦协程出现阻塞，将会阻塞整个线程<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 协程也是一种单线程，只不过是用户来给分配任务</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="comment"># 创建事件循环</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"><span class="comment"># 运行事件循环，直到dojob运行结束</span></span><br><span class="line">res = loop.run_until_complete(dojob())</span><br><span class="line">loop.close()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;异步消费可以使用很多方式来实现，我们今天就来说说异步消费的其中三种实现方式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多线程&lt;/li&gt;
&lt;li&gt;线程池&lt;/li&gt;
&lt;li&gt;协程&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="后端" scheme="https://www.hr915.xyz/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="异步" scheme="https://www.hr915.xyz/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>Redis实现消息队列(Queue)</title>
    <link href="https://www.hr915.xyz/id_21/"/>
    <id>https://www.hr915.xyz/id_21/</id>
    <published>2019-08-27T09:53:36.000Z</published>
    <updated>2021-05-11T06:56:21.037Z</updated>
    
    <content type="html"><![CDATA[<ul><li>相关问题：</li></ul><p><strong>问</strong>：为什么能用列表推导式的时候不用普通for循环？<br><strong>答</strong>：列表推导式比普通for循环性能好</p><a id="more"></a><p><strong>问</strong>：什么是lambda表达式？怎么用？<br><strong>答</strong>：lambda表达式又被称为匿名函数，一般在执行简单的逻辑时使用<br>lambda x:x<em>x   lambda关键字 x变量 x</em>x逻辑<br>注意：lambda的使用大量简化了代码，使代码简练清晰。但是值得注意的是，这会在一定程度上降低代码的可读性。还有lambda内不要包含循环，如果有，我宁愿定义函数来完成，使代码获得可重用性和更好的可读性。<br><strong>问</strong>：redis列表里只能存字符串，如果想存别的类型有什么办法？<br><strong>答</strong>：使用eval()</p><blockquote><p>eval() 原样输出字符串，将字符串强转成它包含的数据类型<br>例: a = “[1,2,3]”(字符串)<br>    a = eval(a)<br>结果：a=<a href="%E5%88%97%E8%A1%A8">1,2,3</a></p></blockquote><p><strong>加权队列</strong>：举个例子吧，在银行窗口办理业务的时候需要先取号==放进队列，然后排队等待。<br>但是这只是普通用户。如果有金卡用户取号，那么金卡用户的业务就可以插队==加权，先行办理金卡用户的业务<br>加权需要用到排序，并且Celery并没有加权这一功能<br>上代码！</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先进行方法封装</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span>:</span></span><br><span class="line">    <span class="comment"># 队列遵循先进先出的原则</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, **redis_kwargs</span>):</span></span><br><span class="line">        <span class="comment"># **kwarys不定长参数  用于可传可不传的参数 </span></span><br><span class="line">        <span class="comment"># kwargs是用来传键值对，args 一般用来传列表和元祖</span></span><br><span class="line">        <span class="comment"># self.__变量名：使用双下划线开头的变量是私有变量，在类外不可以被调用</span></span><br><span class="line">        <span class="comment"># redis的默认参数为：host='localhost', port=6379, db=0， 其中db为定义redis的第几个库</span></span><br><span class="line">        self.__db = redis.Redis(**redis_kwargs, decode_responses=<span class="literal">True</span>)</span><br><span class="line">        self.key = name</span><br><span class="line">        <span class="comment"># llen:获取列表长度</span></span><br><span class="line">        <span class="comment"># lrange:获取列表指定范围内的元素</span></span><br><span class="line">        self.r_len = self.__db.llen(self.key)</span><br><span class="line">        self.l = self.__db.lrange(self.key, <span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, x: <span class="built_in">tuple</span></span>):</span></span><br><span class="line">        <span class="comment"># rpush:在列表中添加一个或多个值</span></span><br><span class="line">        self.__db.rpush(self.key, x)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(self.__db.lrange(self.key, <span class="number">0</span>, -<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> self.__db.lrange(self.key, <span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 排序用来加权(加权是celery没有的)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sort</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 因为redis里存的是字符串，而排序的依据是元组中最后一个元素为int,所以使用-2下标</span></span><br><span class="line">        <span class="comment"># 此处可用eval </span></span><br><span class="line">        self.l = <span class="built_in">sorted</span>(self.l, key=<span class="keyword">lambda</span> x: x[-<span class="number">2</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> self.l</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># pop(0):移出并获取列表的第一个元素</span></span><br><span class="line">        <span class="comment"># lrem 根据第二个参数的值，移除列表中与参数相等的元素。</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.l:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        item = self.l.pop(<span class="number">0</span>)</span><br><span class="line">        self.__db.lrem(self.key, item, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 用来清空列表</span></span><br><span class="line">        <span class="keyword">return</span> self.__db.delete(self.key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    m = MyQueue(<span class="string">'que'</span>)</span><br><span class="line">    <span class="comment"># 添加到redis</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 列表推导式</span></span><br><span class="line">    [m.push(i,i+<span class="number">1</span>,i+<span class="number">2</span>) <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) i++]</span><br><span class="line">    <span class="comment"># 将添加进去的数据排序 </span></span><br><span class="line">    m.sort()</span><br><span class="line">    <span class="comment"># 删除排序后列表中的第一个元素</span></span><br><span class="line">    m.pop()</span><br><span class="line">    <span class="comment"># 清空列表</span></span><br><span class="line">    m.clear()</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;相关问题：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;问&lt;/strong&gt;：为什么能用列表推导式的时候不用普通for循环？&lt;br&gt;&lt;strong&gt;答&lt;/strong&gt;：列表推导式比普通for循环性能好&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://www.hr915.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="redis" scheme="https://www.hr915.xyz/tags/redis/"/>
    
    <category term="队列" scheme="https://www.hr915.xyz/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>排行榜实现</title>
    <link href="https://www.hr915.xyz/id_42/"/>
    <id>https://www.hr915.xyz/id_42/</id>
    <published>2019-08-20T04:32:17.000Z</published>
    <updated>2021-05-11T06:57:07.346Z</updated>
    
    <content type="html"><![CDATA[<p>目前我们要设计一个功能</p><p>也就是用户的排行榜,首先我们要知道排行榜都有哪些特点，好选择合适的数据类型去做。我们还要知道排行榜的底层是什么?</p><a id="more"></a>       <h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>排行榜有哪些特点</p><ol><li><strong>有序</strong></li><li><strong>唯一</strong></li><li><strong>实时更新</strong></li></ol><p>那我们现在知道排行榜的特点了，应该选择数据结构，从整体来看，使用Redis中的有序集合是最合适的</p><p>所以我们可以通过利用<strong>redis</strong>的<strong>sorted set</strong>来进行设计，</p><p>那为什么要用redis来实现，而不是使用传统数据库？</p><p><strong>问</strong>：为什么不使用<strong>传统数据库</strong>？</p><p><strong>一</strong>、 用户排行榜属于热点数据，点击量高，所以使用redis要比使用mysql等传统数据库速度方面有优势</p><p><strong>二</strong>、 传统数据库的limit限制了查询排名靠后玩家的性能 举个例子： 当我们每页显示100名玩家，去查询第101页的时候，那么我们的sql中limit语句为</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">limit <span class="number">10000</span> <span class="number">100</span></span><br></pre></td></tr></tbody></table></figure><p>这个语句在执行的过程中会先扫描 100100个数据节点（假设有索引的情况下，没有索引则是全表扫描）<br>然后取出最后100条数据，这么执行实际上很没有效率，查询很靠后的用户排名的时候很容易出现慢查询。</p><p>Redis的<strong>有序集合</strong>又能很好的避免这个问题</p><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><p>既然要使用有序集合，我们先来了解一下有序集合的底层：</p><p>有序集合的底层我们可以看做是一个<strong>链表</strong>，通过指针来指向下一个内存地址</p><p><img src="/id_42/id_42%5C%E9%93%BE%E8%A1%A8.png" alt="链表"></p><p>链表的<strong>特性</strong>又是查询速度缓慢，插入与更新特别快，</p><p>刚好和Tree相反，Tree的特性是查询速度快，更新和插入速度慢</p><h4 id="怎么解决链表查询慢呢？"><a href="#怎么解决链表查询慢呢？" class="headerlink" title="怎么解决链表查询慢呢？"></a>怎么解决链表查询慢呢？</h4><p>使用<strong>跳表(SkipList)</strong></p><p>举个栗子：<br>    <img src="/id_42/id_42%5C%E8%B7%B3%E8%A1%A8.png" alt="跳表"></p><p>跳表是<strong>空间换时间</strong>的方法  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;目前我们要设计一个功能&lt;/p&gt;
&lt;p&gt;也就是用户的排行榜,首先我们要知道排行榜都有哪些特点，好选择合适的数据类型去做。我们还要知道排行榜的底层是什么?&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://www.hr915.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="redis" scheme="https://www.hr915.xyz/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>PostGreSQL</title>
    <link href="https://www.hr915.xyz/id_41/"/>
    <id>https://www.hr915.xyz/id_41/</id>
    <published>2019-06-15T04:32:17.000Z</published>
    <updated>2021-04-21T23:55:00.749Z</updated>
    
    <content type="html"><![CDATA[<p>最近“全栈数据库”的概念甚嚣尘上，主角就是PostgreSQL，它最近这几年的技术发展不可谓不猛，覆盖OLTP、OLAP、NoSQL、搜索、图像等应用场景，实实在在的全栈性发展。帮助公司解决了数据孤岛、数据平台多、同步一致性、延迟，软硬件成本增加等业务痛点，在互联网、金融、物联网、传统企业等领域得到了广泛的应用。PostgreSQL的应用场景丰富，不亚于商用数据库Oracle，常被业界称为“开源界的Oracle”。</p><a id="more"></a>       <p>至于Mysql大家都很熟悉，很多公司因为人才储备和数据量大的原因，一般是Hadoop+Mysql的模式，Hadoop计算大量原始数据，然后按维度汇总后的展示数据存储在Mysql上，但是Mysql也有很多的“坑”：比如著名的Emoji表情坑，由此引申出来的utf8mb4的坑（隐式类型转换陷阱），性能低到发指的悲观锁机制，不支持多表单序列中取 id，不支持over子句，几乎没有性能可言的子查询…有点罄竹难书的意思，更多的“罪行”详见：见鬼的选择：Mysql。而这些问题，在PostgreSQL中得到了改善，本次我们在Win10平台利用Docker安装PostgreSQL，并且初步感受一下它的魅力。</p><p>我们这里使用<strong>云主机</strong>来演示</p><p>首先拉取镜像，这里我们用相对稳定的postgresql:11.1</p><blockquote><p>docker pull postgresql:11.1</p></blockquote><p>拉取成功后，查看镜像</p><blockquote><p>docker images</p></blockquote><p><img src="/id_41/id_41%5C1.png" alt="镜像"></p><p>我们可以看到确实PostgreSQL比MySQL小</p><p>镜像拉取成功，我们现在可以启动容器了</p><blockquote><p>docker run -d –name dev-postgres -e POSTGRES_PASSWORD=root -p 5432:5432 postgres:11.1</p></blockquote><p>这里POSTGRES_PASSWORD是PostgrelSQL的用户密码，自己制定一个就可以了，默认端口号是5432.注意我们用的是云主机，要将云主机上的防火墙打开</p><p>查看容器运行状态</p><blockquote><p>docker ps</p></blockquote><p><img src="/id_41/id_41%5C2.png" alt="容器"></p><p>可以，现在我们的容器已经正常运行了</p><p>我们进入容器的命令行看一看</p><blockquote><p>docker exec -it dev-postgres bash </p><p>psql -h localhost -U postgres</p></blockquote><p>现在我们已经进入命令行了，在命令行输入PostgrelSQL的命令\l 就可以查看数据库列表。<br><img src="/id_41/id_41%5C3.png" alt="数据库"></p><p>建立数据库</p><blockquote><p>CREATE DATABASE mytest;</p></blockquote><p>使用数据库</p><blockquote><p>\c mytest</p></blockquote><p>建立一张表</p><blockquote><p>CREATE TABLE “public”.”article” (<br>    “id” int4 NOT NULL,<br>    “content” text,<br>    PRIMARY KEY (“id”)<br>)<br>WITH (OIDS=FALSE);</p></blockquote><p>列出所有表</p><blockquote><p>\d</p></blockquote><p>如果不习惯使用命令行，也可以用可视化工具来进行链接，比如Navicat<br><img src="/id_41/id_41%5C4.png" alt="可视化工具"><br>这里因为我们用的是云主机所以IP地址不能写本地，还有密码是我们上边指定的密码</p><p><strong>注意</strong> 默认用户是postgres，值得一提的是，使用navicat无法像Mysql一样手动设置属性自增长(auto-increment)，PostgreSQL使用的是序列的形式来实现自增长：</p><blockquote><p>CREATE SEQUENCE serial START 1;</p></blockquote><p>这里创建好的序列是从1开始计数。</p><p>随后，将需要设置的字段的默认值设为序列增长即可</p><blockquote><p>ALTER TABLE “public”.”article” ALTER COLUMN “id” SET DEFAULT nextval(‘serial’);</p></blockquote><p><strong>OVER子句</strong></p><p>我们现在有一个部门表empsal<br><img src="/id_41/id_41%5C5.png" alt="部门表"><br> 现在我想将每一个员工的工资与他所在部门的平均工资做个比较，怎么做？<br> 其实这也是leetcode原题，用mysql只能用子查询，而用PostgreSQL该查询可以很容易的实现</p><blockquote><p>mysql：</p><p>select t1.depname, t1.userid,t1.salary,t2.sal FROM empsalary t1 INNER JOIN (select depname,avg(salary) sal FROM empsalary group by depname) t2 ON t1.depname=t2.depname</p><p>OVER子句：</p><p>SELECT emp, name,salary,avg( salary ) OVER ( PARTITION BY emp )  FROM empsa;</p></blockquote><p>可以看到，这个查询中，聚合函数avg的含义没有变，仍然是求平均值。但和普通的聚合函数不同的是，它不再对表中所有的salary求平均值，而是针对同一个部门（PARTITION BY指定的depname）内的salary求平均值，而且得到的结果由同一个部门内的所有行共享，并没有将这些行合并，这就大大简化了sql的复杂度，同时也能很方便的解决 “每组取 top k” 的这类问题</p><p>在Django项目中使用PostgreSQL和使用mysql是一样的。在setting配置一下</p><p><strong>注意</strong>：我们是在云主机上整的postgreSQL,所以HOST不可以是本地的</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = {</span><br><span class="line">    <span class="string">'default'</span>: {</span><br><span class="line">        <span class="comment"># mysql配置</span></span><br><span class="line">        <span class="comment"># 'ENGINE': 'django.db.backends.mysql',</span></span><br><span class="line">        <span class="comment"># 'NAME': 'test',</span></span><br><span class="line">        <span class="comment"># 'PORT': 3306,</span></span><br><span class="line">        <span class="comment"># 'HOST': '127.0.0.1',</span></span><br><span class="line">        <span class="comment"># 'USER': 'root',</span></span><br><span class="line">        <span class="comment"># 'PASSWORD': '123456'</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># postgreSQL配置</span></span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.postgresql_psycopg2'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'mytest'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="number">5432</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'39.***.***.***'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'postgres'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'root'</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其他的就和MySQL一样啦</p><p>原文转载自「刘悦的技术博客」<a href="https://v3u.cn/a_id_171">https://v3u.cn/a_id_171</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近“全栈数据库”的概念甚嚣尘上，主角就是PostgreSQL，它最近这几年的技术发展不可谓不猛，覆盖OLTP、OLAP、NoSQL、搜索、图像等应用场景，实实在在的全栈性发展。帮助公司解决了数据孤岛、数据平台多、同步一致性、延迟，软硬件成本增加等业务痛点，在互联网、金融、物联网、传统企业等领域得到了广泛的应用。PostgreSQL的应用场景丰富，不亚于商用数据库Oracle，常被业界称为“开源界的Oracle”。&lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="https://www.hr915.xyz/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="postgresql" scheme="https://www.hr915.xyz/tags/postgresql/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之二叉树</title>
    <link href="https://www.hr915.xyz/id_34/"/>
    <id>https://www.hr915.xyz/id_34/</id>
    <published>2019-05-03T13:32:17.000Z</published>
    <updated>2021-05-11T06:56:20.983Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>简单的三种数据结构：</p><p><img src="/id_34/1.png" alt="数据结构"></p><a id="more"></a><p>树：由一个根节点分出许多子节点，最终的节点叫做叶子节点</p><p>二叉树：每一个节点都会生出两个子节点(左节点or右节点)，最终的节点叫做叶子节点</p><p>栈和队列想查询某个元素只有遍历查询，而树每个节点之间都有关联，便于高效查询</p><p>查询效率第一位的时候需要用到树结构</p><h4 id="遍历方式："><a href="#遍历方式：" class="headerlink" title="遍历方式："></a>遍历方式：</h4><p>树遍历的三种方式：前序遍历，中序遍历，后序遍历</p><ul><li>前序遍历 从根节点开始输出—&gt;左节点输出，继续向下左节点输出，直到叶子节点—&gt;右节点输出—&gt;   简单来说: 根—&gt;左—&gt;右</li><li>中序遍历 先找左子树，找到叶子结点输出—&gt;上一级输出—-&gt;右节点的左叶子结点输出—&gt;上一级输出—右节点的左叶子节点输出—&gt;  简单来说: 左—&gt;根—&gt;右</li><li>后序遍历 从子节点的左/右叶子节点，开始输出—&gt;右节点输出—&gt;上级节点—&gt;   简单来说: 左—&gt;右—&gt;根</li></ul><p>举个例子:<br><img src="/id_34/%E4%B8%89%E7%A7%8D%E9%81%8D%E5%8E%86.png" alt="数据结构"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tree</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line">        self.data = <span class="literal">None</span></span><br><span class="line">        self.lis = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preface</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        <span class="string">'''先序'''</span></span><br><span class="line">        self.lis.append(node.data)</span><br><span class="line">        <span class="keyword">if</span> node.left != <span class="literal">None</span>:</span><br><span class="line">            self.preface(node.left)</span><br><span class="line">        <span class="keyword">if</span> node.right != <span class="literal">None</span>:</span><br><span class="line">            self.preface(node.right)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">middleorder</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        <span class="string">'''中序'''</span></span><br><span class="line">        <span class="keyword">if</span> node.left != <span class="literal">None</span>:</span><br><span class="line">            self.middleorder(node.left)</span><br><span class="line"></span><br><span class="line">        self.lis.append(node.data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> node.right != <span class="literal">None</span>:</span><br><span class="line">            self.middleorder(node.right)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postscript</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        <span class="string">'''后序'''</span></span><br><span class="line">        <span class="keyword">if</span> node.left != <span class="literal">None</span>:</span><br><span class="line">            self.postscript(node.left)</span><br><span class="line">        <span class="keyword">if</span> node.right != <span class="literal">None</span>:</span><br><span class="line">            self.postscript(node.right)</span><br><span class="line"></span><br><span class="line">        self.lis.append(node.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">self, node, lis, data</span>):</span></span><br><span class="line">        <span class="string">'''查找'''</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node.left == <span class="literal">None</span>:</span><br><span class="line">            lis = self.search(node.left, lis, data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node.right == <span class="literal">None</span>:</span><br><span class="line">            lis = self.search(node.right, lis, data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> lis != []:</span><br><span class="line">            <span class="comment"># 判断当前节点是否在查询节点的线上</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> node.left != <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">if</span> lis[-<span class="number">1</span>] == node.left.data:</span><br><span class="line">                    lis.append(node.data)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> node.right != <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">if</span> lis[-<span class="number">1</span>] == node.right.data:</span><br><span class="line">                    lis.append(node.data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> node.data == data:</span><br><span class="line">            lis.append(data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> lis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    root = Tree()</span><br><span class="line"></span><br><span class="line">    root.data = <span class="string">'1'</span></span><br><span class="line"></span><br><span class="line">    root.left = Tree()</span><br><span class="line">    root.left.data = <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line">    root.right = Tree()</span><br><span class="line">    root.right.data = <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line">    root.left.left = Tree()</span><br><span class="line">    root.left.left.data = <span class="string">'4'</span></span><br><span class="line"></span><br><span class="line">    root.left.right = Tree()</span><br><span class="line">    root.left.right.data = <span class="string">'5'</span></span><br><span class="line"></span><br><span class="line">    root.right.left = Tree()</span><br><span class="line">    root.right.left.data = <span class="string">'6'</span></span><br><span class="line"></span><br><span class="line">    root.right.right = Tree()</span><br><span class="line">    root.right.right.data = <span class="string">'7'</span></span><br><span class="line"></span><br><span class="line">    root.left.left.left = Tree()</span><br><span class="line">    root.left.left.left.data = <span class="string">'8'</span></span><br><span class="line"></span><br><span class="line">    root.left.right.left = Tree()</span><br><span class="line">    root.left.right.left.data = <span class="string">'9'</span></span><br><span class="line"></span><br><span class="line">    root.right.left.right = Tree()</span><br><span class="line">    root.right.left.right.data = <span class="string">'10'</span></span><br><span class="line"></span><br><span class="line">    root.right.right.right = Tree()</span><br><span class="line">    root.right.right.right.data = <span class="string">'11'</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">'先序:'</span>)</span><br><span class="line">    root.lis = []</span><br><span class="line">    root.preface(root)</span><br><span class="line">    print(root.lis)</span><br><span class="line">    print(<span class="string">'中序:'</span>)</span><br><span class="line">    root.lis = []</span><br><span class="line">    root.middleorder(root)</span><br><span class="line">    print(root.lis)</span><br><span class="line">    print(<span class="string">'后序:'</span>)</span><br><span class="line">    root.lis = []</span><br><span class="line">    root.postscript(root)</span><br><span class="line">    print(root.lis)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h3&gt;&lt;p&gt;简单的三种数据结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/id_34/1.png&quot; alt=&quot;数据结构&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://www.hr915.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="二叉树" scheme="https://www.hr915.xyz/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>栈的使用</title>
    <link href="https://www.hr915.xyz/id_25/"/>
    <id>https://www.hr915.xyz/id_25/</id>
    <published>2019-05-03T12:46:25.000Z</published>
    <updated>2021-05-11T06:56:21.005Z</updated>
    
    <content type="html"><![CDATA[<h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>栈（stack）又名堆栈，它是一种运算受限的<strong>线性表</strong>。限定仅在表尾进行插入和删除操作的线性表。<br>这一端被称为栈顶，相对地，把另一端称为栈底。向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；<br>从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。</p><a id="more"></a><p>栈作为一种数据结构，是一种只能在一端进行插入和删除操作的特殊线性表。<br>它按照<strong>先进后出</strong>，<strong>后进先出</strong>的原则存储数据</p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>银行ATM自动存取款机<br>  假设取款机下有一个用来钱的箱子，箱子只有一个口供用户存取现金<br>  当你存钱的时候，ATM会把钱放在最上面<br>  当你取钱的时候，ATM会把最上面的钱吐出来</li></ul><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><h5 id="将十进制的数转换为二进制的数"><a href="#将十进制的数转换为二进制的数" class="headerlink" title="将十进制的数转换为二进制的数"></a>将十进制的数转换为二进制的数</h5><p>我们都知道，通过求余法，可以将十进制数转换为其他进制，比如要转为二进制，将十进制数除以2，记录余数，然后继续将商除以2，一直到商等于0为止，最后将余数倒着写数来就可以了。</p><p>比如13的二进制，13首先除以2商6余1,1首先进栈，然后6除以2商3余0，第二个余数0进栈，接着3除以2，商1余1，第三个余数1进栈，继续1除以2商0余1，第四个余数1进栈。最后将四个余数出栈，就得到了13的二进制1101。<br>实现代码如下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.item = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        self.item.append(key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(self.item) != <span class="number">0</span>:</span><br><span class="line">                print(self.item.pop(),end=<span class="string">''</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exe</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        key = <span class="built_in">int</span>(key)</span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            self.push(key % <span class="number">2</span>)</span><br><span class="line">            key //= <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> key == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Stack()</span><br><span class="line">s.exe(<span class="built_in">input</span>(<span class="string">"请输入您要进行换算的数字："</span>))</span><br><span class="line">s.pop()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="栈和队列的异同点"><a href="#栈和队列的异同点" class="headerlink" title="栈和队列的异同点"></a>栈和队列的异同点</h3><h4 id="首先，栈（Stack）和队列（Queue）是两种操作受限的线性表。"><a href="#首先，栈（Stack）和队列（Queue）是两种操作受限的线性表。" class="headerlink" title="首先，栈（Stack）和队列（Queue）是两种操作受限的线性表。"></a>首先，栈（Stack）和队列（Queue）是两种操作受限的线性表。</h4><h4 id="栈与队列的相同点："><a href="#栈与队列的相同点：" class="headerlink" title="栈与队列的相同点："></a>栈与队列的相同点：</h4><p>1.都是线性结构。<br>2.插入操作都是限定在表尾进行。<br>3.都可以通过顺序结构和链式结构实现。<br>4.插入与删除的时间复杂度都是O（1），在空间复杂度上两者也一样。<br>5.多链栈和多链队列的管理模式可以相同。</p><h4 id="栈与队列的不同点："><a href="#栈与队列的不同点：" class="headerlink" title="栈与队列的不同点："></a>栈与队列的不同点：</h4><p>1.删除数据元素的位置不同，栈的删除操作在表尾进行，队列的删除操作在表头进行。<br>2.应用场景不同；常见栈的应用场景包括括号问题的求解，表达式的转换和求值，函数调用和递归实现，深度优先搜索遍历等；常见的队列的应用场景包括计算机系统中各种资源的管理，消息缓冲器的管理和广度优先搜索遍历等。<br>3.顺序栈能够实现多栈空间共享，而顺序队列不能。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;栈&quot;&gt;&lt;a href=&quot;#栈&quot; class=&quot;headerlink&quot; title=&quot;栈&quot;&gt;&lt;/a&gt;栈&lt;/h3&gt;&lt;p&gt;栈（stack）又名堆栈，它是一种运算受限的&lt;strong&gt;线性表&lt;/strong&gt;。限定仅在表尾进行插入和删除操作的线性表。&lt;br&gt;这一端被称为栈顶，相对地，把另一端称为栈底。向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；&lt;br&gt;从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://www.hr915.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="进制" scheme="https://www.hr915.xyz/tags/%E8%BF%9B%E5%88%B6/"/>
    
    <category term="栈" scheme="https://www.hr915.xyz/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>视频直播</title>
    <link href="https://www.hr915.xyz/id_11/"/>
    <id>https://www.hr915.xyz/id_11/</id>
    <published>2019-05-02T12:46:25.000Z</published>
    <updated>2021-05-11T06:51:26.559Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>  直播：流式传输协议，传输非常短的一小截视频</p></blockquote><ul><li>主播直播 <strong>推流</strong><ul><li>OBS </li></ul></li><li>观看直播 <strong>拉流</strong><ul><li>  浏览器：video标签</li><li>  客户端工具：vlc播放器</li></ul></li><li>  协议：rtmp协议</li></ul><a id="more"></a><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>视频直播我们需要两个软件，一个用来直播，一个用来看直播<br><strong>直播</strong><br><img src="/id_11/01.png" alt="直播"><br><strong>看直播</strong><br><img src="/id_11/02.png" alt="看直播"></p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><h4 id="推流"><a href="#推流" class="headerlink" title="推流"></a>推流</h4><p>推流：指的是把采集阶段封包好的内容传输到服务器的过程。<br><img src="/id_11/01.jpg" alt="推流"></p><h4 id="拉流"><a href="#拉流" class="headerlink" title="拉流"></a>拉流</h4><p>拉流：指服务器已有直播内容，用指定地址进行拉取的过程<br><img src="/id_11/02.jpg" alt="拉流"></p><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>主流的推送协议和优缺点</p><h4 id="RTMP"><a href="#RTMP" class="headerlink" title="RTMP"></a>RTMP</h4><p>RTMP是Real Time Messaging Protocol（实时消息传输协议）的缩写，是Adobe公司为Flash/AIR平台和服务器之间音、视频及数据传输开发的实时消息传送协议。RTMP协议基于TCP，包括RTMP基本协议及RTMPT/RTMPS/RTMPE等多种变种。<br>RTMP协议中，视频必须是H264编码，音频必须是AAC或MP3编码，且多以flv格式封包。RTMP是目前最主流的流媒体传输协议，对CDN支持良好，实现难度较低，是大多数的直播平台的选择。<br>不过RTMP有着一个最大的不足——不支持浏览器，且Adobe已不再更新。因此直播服务要支持浏览器的话，需要另外的推送协议支持。</p><h4 id="HLS"><a href="#HLS" class="headerlink" title="HLS"></a>HLS</h4><p>Http Live Streaming是由Apple公司定义的基于HTTP的流媒体实时传输协议。它的原理是将整个流分为多个小的文件来下载，每次只下载若干个。服务器端会将最新的直播数据生成新的小文件，客户端只要不停的按顺序播放从服务器获取到的文件，就实现了直播。基本上，HLS是以点播的技术实现了直播的体验。因为每个小文件的时长很短，客户端可以很快地切换码率，以适应不同带宽条件下的播放。<br>分段推送的技术特点，决定了HLS的延迟一般会高于普通的流媒体直播协议。<br>传输内容包括两部分：一是M3U8描述文件，二是TS媒体文件。TS媒体文件中的视频必须是H264编码，音频必须是AAC或MP3编码。<br>由于数据通过HTTP协议传输，所以完全不用考虑防火墙或者代理的问题，而且分段文件的时长很短。</p><h4 id="WebRTC"><a href="#WebRTC" class="headerlink" title="WebRTC"></a>WebRTC</h4><p>WebRTC（Web Real-Time Communication），即“源自网页即时通信”。WebRTC是一个支持浏览器进行实时语音、视频对话的开源协议。WebRTC的支持者甚多，Google、Mozilla、Opera推动其成为W3C推荐标准。<br>WebRTC支持目前的主流浏览器，并且基于SRTP和UDP，即便在网络信号一般的情况下也具备较好的稳定性。<br>此外，WebRTC可以实现点对点通信，通信双方延时低，此外，WebRTC可以实现点对点通信，通信双方延时低，是实现“连麦”功能比较好的选择。</p><h3 id="利用云主机搭建直播服务器"><a href="#利用云主机搭建直播服务器" class="headerlink" title="利用云主机搭建直播服务器"></a>利用云主机搭建直播服务器</h3><h4 id="在云主机上环境部署"><a href="#在云主机上环境部署" class="headerlink" title="在云主机上环境部署"></a>在云主机上环境部署</h4><ul><li>  创建保存软件目录</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/nginx-flv</span><br><span class="line"># 创建了一个安装目录</span><br><span class="line">mkdir /home/flv-tools</span><br><span class="line"># 存储所需软件</span><br></pre></td></tr></tbody></table></figure><ul><li>下载nginx<ul><li>什么是nginx，高性能多路复用服务器，让你支持同时响应多个客户连接<ul><li>  多线程、多进程开发模式</li></ul></li></ul></li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://nginx.org/download/nginx-1.18.0.tar.gz</span><br></pre></td></tr></tbody></table></figure><ul><li>  下载直播模块<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/winshining/nginx-http-flv-module</span><br></pre></td></tr></tbody></table></figure></li><li>  解压下载好的nginx<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.18.0.tar.gz nginx-1.18.0/</span><br></pre></td></tr></tbody></table></figure></li><li>  解压下载好的直播模块<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip nginx-http-flv-module.zip </span><br></pre></td></tr></tbody></table></figure></li><li>  进入解压好的nginx下目录，并进行安装前的配置<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.18.0</span><br><span class="line">./configure --prefix=/usr/local/nginx-flv --add-module=/home/flv-tools/nginx-http-flv-module-master</span><br><span class="line"># --prefix: 配置安装路径</span><br><span class="line">#--add-module: 添加安装插件</span><br></pre></td></tr></tbody></table></figure></li><li>  编译及安装<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">make </span><br><span class="line">make install </span><br><span class="line">------------</span><br><span class="line">make &amp;&amp; make install </span><br></pre></td></tr></tbody></table></figure><h4 id="配置文件修改"><a href="#配置文件修改" class="headerlink" title="配置文件修改"></a>配置文件修改</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">rtmp_auto_push on;</span><br><span class="line">rtmp_auto_push_reconnect 1s;</span><br><span class="line">rtmp_socket_dir /tmp;</span><br><span class="line"></span><br><span class="line">rtmp{</span><br><span class="line">out_queue 4096;</span><br><span class="line">out_cork 8;</span><br><span class="line">max_streams 128;</span><br><span class="line">timeout 15s;</span><br><span class="line">drop_idle_publisher 15s;</span><br><span class="line">log_interval 5s;</span><br><span class="line">log_size 1m;</span><br><span class="line">server {</span><br><span class="line">listen 1935; # 推流端口</span><br><span class="line">server_name zege;</span><br><span class="line"></span><br><span class="line">application live {# 配置推流地址</span><br><span class="line">live on; # 打开推流</span><br><span class="line"><span class="meta">#</span><span class="bash"> gop_cache on;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rtmp://123.123.123.123:1935/live/<span class="built_in">test</span></span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">events {</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li>  配置文件http拉流部分<figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">http {</span><br><span class="line">include       mime.types;</span><br><span class="line">default_type  application/octet-stream;</span><br><span class="line">sendfile        on;</span><br><span class="line">keepalive_timeout  65;</span><br><span class="line">server {</span><br><span class="line">listen       8080; # 拉流通过8080去拉流</span><br><span class="line"><span class="meta">#</span><span class="bash"> http://123.123.123.123:8080/live/?port=1935&amp;stream=<span class="built_in">test</span></span></span><br><span class="line">server_name  localhost;</span><br><span class="line">location /live {</span><br><span class="line">flv_live on;</span><br><span class="line">chunked_transfer_encoding  on;</span><br><span class="line">add_header 'Access-Control-Allow-Origin' '*';</span><br><span class="line">add_header 'Access-Control-Allow-Credentials' 'true';</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li>  关闭旧有服务<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx-rtmp/sbin/nginx -s stop</span><br><span class="line">/usr/local/nginx-rtmp/sbin/nginx -s reload</span><br><span class="line"># 重启</span><br></pre></td></tr></tbody></table></figure></li><li>  开启新服务<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx-flv/sbin/nginx -c /usr/local/nginx-flv/conf/nginx.conf</span><br></pre></td></tr></tbody></table></figure><blockquote><p>   记得打开阿里云的防火墙8080</p></blockquote><h3 id="OBS设置推流地址"><a href="#OBS设置推流地址" class="headerlink" title="OBS设置推流地址"></a>OBS设置推流地址</h3></li><li>  推流地址<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rtmp://云主机IP及端口/live/自定义密钥</span><br></pre></td></tr></tbody></table></figure><img src="/id_11/03.png" alt="推流地址"></li><li>  拉流地址<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://云主机IP及端口/live?port=端口&amp;app=live&amp;stream=密钥</span><br></pre></td></tr></tbody></table></figure><img src="/id_11/04.png" alt="拉流地址"><h3 id="Vue实现拉流"><a href="#Vue实现拉流" class="headerlink" title="Vue实现拉流"></a>Vue实现拉流</h3></li><li>  安装<strong>flv.js</strong>开源工具，进行拉流，哔哩哔哩开源的拉流js<blockquote><p>  video.js 对rtmp拉流</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install flv.js --save</span><br></pre></td></tr></tbody></table></figure></li><li>  导包<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> flv <span class="keyword">from</span> <span class="string">'flv.js'</span>;</span><br></pre></td></tr></tbody></table></figure></li><li>  构建页面标签，播放标签<figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"videoElement"</span> <span class="attr">controls</span> <span class="attr">muted</span>&gt;</span></span><br><span class="line">  Your browser is too old which doesn't support HTML5 video.</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li>  进行初始化<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="keyword">var</span> videoElement = <span class="built_in">document</span>.getElementById(<span class="string">'videoElement'</span>);</span><br><span class="line">    <span class="keyword">var</span> flvPlayer = flv.createPlayer({</span><br><span class="line">      type: <span class="string">'flv'</span>,</span><br><span class="line">      enableWorker: <span class="literal">true</span>,     <span class="comment">//浏览器端开启flv.js的worker,多进程运行flv.js</span></span><br><span class="line">      isLive: <span class="literal">true</span>,           <span class="comment">//直播模式</span></span><br><span class="line">      hasAudio: <span class="literal">false</span>,        <span class="comment">//关闭音频</span></span><br><span class="line">      hasVideo: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// cors: true,</span></span><br><span class="line">      stashInitialSize: <span class="number">128</span>,</span><br><span class="line">      enableStashBuffer: <span class="literal">false</span>, <span class="comment">//播放flv时，设置是否启用播放缓存，只在直播起作用。</span></span><br><span class="line">      url: <span class="string">'http://云主机IP及端口/live?port=端口&amp;app=live&amp;stream=密钥'</span></span><br><span class="line">    })</span><br><span class="line">    flvPlayer.attachMediaElement(videoElement);</span><br><span class="line">    flvPlayer.load();</span><br><span class="line">    flvPlayer.play();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="OK-这样一个直播就做好了"><a href="#OK-这样一个直播就做好了" class="headerlink" title="OK,这样一个直播就做好了"></a>OK,这样一个直播就做好了</h3></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;  直播：流式传输协议，传输非常短的一小截视频&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;主播直播 &lt;strong&gt;推流&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;OBS &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;观看直播 &lt;strong&gt;拉流&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;  浏览器：video标签&lt;/li&gt;
&lt;li&gt;  客户端工具：vlc播放器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;  协议：rtmp协议&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="前端" scheme="https://www.hr915.xyz/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://www.hr915.xyz/tags/vue/"/>
    
  </entry>
  
</feed>
